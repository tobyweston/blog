<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: recipes | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/recipes/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2015-12-03T20:34:04+00:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automatically rebase on git pull]]></title>
    <link href="http://baddotrobot.com/blog/2013/07/09/automatically-rebase-on-git-pull/"/>
    <updated>2013-07-09T17:29:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/07/09/automatically-rebase-on-git-pull</id>
    <content type="html"><![CDATA[<p>Automaticaaly rebase your Git repository when you do a <code>pull</code>.</p>

<!-- more -->


<p>To configure your repository to always rebase when pulling;</p>

<p><code>
git config branch.master.rebase true
</code></p>

<p>which turns the relevant section of your '.git/config' from</p>

<p><code>
[branch "master"]
  remote = origin
  merge = refs/heads/master
</code></p>

<p>to</p>

<p><code>
[branch "master"]
  remote = origin
  merge = refs/heads/master
  rebase = true
</code></p>

<p>In IntelliJ IDEA, when doing up SCM update, it may ask you how to go about the update. Here you can override the setting above to do a regular merge (which is in fact a <code>git fetch</code> followed by a <code>git merge</code> or in one command, <code>git pull --no-rebase</code>), a rebase (<code>git fetch</code>, <code>git rebase</code> or <code>git pull --rebase</code>) or rely on the setting above in your config.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing my Book]]></title>
    <link href="http://baddotrobot.com/blog/2013/05/24/writing-my-book/"/>
    <updated>2013-05-24T13:57:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/05/24/writing-my-book</id>
    <content type="html"><![CDATA[<p>There haven't been many posts on the blog recently because I've been super-busy working on my book <a href="http://baddotrobot.com/book/">Essential Acceptance Testing</a>. It's published via <a href="https://leanpub.com/essential_acceptance_testing">Leanpub</a> and talks about the typical acceptance testing strategy and how, more often than not, it's driven by dogma rather than by a genuine testing need.</p>

<p>Acceptance testing in it's generally accepted form, is so full of duplication and cruft that gaining software confidence can come at a high price. It doesn't have to be this way. The book talks about how we can reclaim all the good parts of acceptance testing without suffering the long build times and specification overload.</p>

<p>It also talks about when not to bother; how gaining software confidence isn't always about testing. Fast feedback and writing software that's cheap to change can be an effective alternative to testing and help shorten the path from concept to cash.</p>

<!-- more -->


<p>Keep an eye on my <a href="/book">blog's book page</a> for the latest news and head over to <a href="https://leanpub.com/essential_acceptance_testing" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">Leanpub</a> to purchase a copy or <a href="http://samples.leanpub.com/essential_acceptance_testing-sample.pdf" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">download a free sample</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Tips]]></title>
    <link href="http://baddotrobot.com/blog/2013/05/24/mac-tips/"/>
    <updated>2013-05-24T10:28:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/05/24/mac-tips</id>
    <content type="html"><![CDATA[<ul>
<li><a href="/blog/2013/05/24/mac-tips#show_hidden_finder">Show hidden files and folders in Finder</a></li>
<li><a href="/blog/2013/05/24/mac-tips#show_hidden_open">Show hidden files and folders from an application's Open dialog</a></li>
<li><a href="/blog/2013/05/24/mac-tips#duplicates">Remove Duplicate Entries in 'Open With' Menu</a></li>
<li><a href="/blog/2013/05/24/mac-tips#calculator">Show your workings with Calculator</a></li>
</ul>


<!-- more -->


<h2><a id="show_hidden_finder"></a>Show hidden files and folders in Finder</h2>

<p><img itemprop="image" class="right" src="../../../../../images/relaunch_finder.png" width="220" height="290" title="'Relaunch Finder'" ></p>

<p>From a terminal window</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>defaults write com.apple.Finder AppleShowAllFiles YES
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then relaunch Finder with Option (<img src="/images/ks_option.gif" alt="Option" />) + Right Click, <code>Relaunch</code>. Switch back using <code>NO</code>.</p>

<h2><a id="show_hidden_open"></a>Show hidden files and folders from an application's Open dialog</h2>

<p>When you've got the dialog open, just hit Command (<img src="/images/ks_command.gif" alt="Command" />) + Shift (<img src="/images/ks_shift.gif" alt="Shift" />) + <code>.</code> to toggle. Nice.</p>

<h2><a id="duplicates"></a>Remove Duplicate Entries in 'Open With' Menu</h2>

<p>Remove duplicate entries from the terminal window.</p>

<p><img itemprop="image" src="../../../../../images/duplicate_open_with_banner.png" title="'Relaunch Finder'" ></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain <span class="nb">local</span> -domain user
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2><a id="calculator"></a>Show your Workings with Calculator</h2>

<p>Hitting Command (<img src="/images/ks_command.gif" alt="Command" />) + T in the Calculator app shows the paper tape so you can see you past calculations!</p>

<p><img itemprop="image" class="right" src="../../../../../images/calculator-paper-tape.png" width="205" height="258" title="'Calculator's Paper Tape'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Git Commands]]></title>
    <link href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands/"/>
    <updated>2013-01-23T19:55:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2013/01/23/useful-git-commands</id>
    <content type="html"><![CDATA[<p><a id="top"></a>More as a reminder to myself than anything, here's a bunch of Git commands I fund useful.</p>

<ul>
<li><a href="/blog/2013/01/23/useful-git-commands#create_remote_branch">Create a branch on a remote (pushing a branch to a remote)</a></li>
<li><a href="/blog/2013/01/23/useful-git-commands#delete_remote_branch">Delete a remote branch</a></li>
<li><a href="/blog/2013/01/23/useful-git-commands#switch_to_ssh">Switch from HTTP to git/ssh</a></li>
<li><a href="/blog/2013/01/23/useful-git-commands#set_upstream_branch">Set upstream branch</a></li>
<li><a href="/blog/2013/01/23/useful-git-commands#status">Abbreviated status</a></li>
<li><a href="/blog/2013/01/23/useful-git-commands#alias">Useful Git aliases</a></li>
</ul>


<!-- more -->


<h2><a id="create_remote_branch"></a>Create a branch on a remote (pushing a branch to a remote)</h2>

<p>Having created a new feature branch locally, you can push to a remote, creating a new branch destination using.</p>

<pre><code>git push -u origin feature_branch
</code></pre>

<p>The <code>-u</code> sets upstream tracking and is optional.</p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="delete_remote_branch"></a>Delete a remote branch</h2>

<p>Having pushed your feature branch,</p>

<pre><code>git push origin feature_branch
</code></pre>

<p>delete locally,</p>

<pre><code>git branch -d feature_branch
</code></pre>

<p>then delete remotely,</p>

<pre><code>git push origin --delete feature_branch
</code></pre>

<p>which is short hand for <code>git push origin :feature_branch</code>. The colon looks out of place but its really just the everyday syntax of <code>git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code> with a empty string representing the local branch. Effectively, it's saying, take no branch from my local branch and push it to the remote branch.</p>

<p>More on remote branches from <a href="http://gitready.com/beginner/2009/02/02/push-and-delete-branches.html">git ready</a></p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="switch_to_ssh"></a>Switch from HTTPS to git/ssh</h2>

<p>If you're using HTTPS as your fetch url (check your <code>.git/config</code> file), you'll likely be asked for your username and password on each push. Switch to git/ssh with the following (assuming you've <a href="https://help.github.com/articles/generating-ssh-keys">setup ssh</a>).</p>

<pre><code>git remote rm origin
git remote add origin git@github.com:tobyweston/playground
</code></pre>

<p>This will alter your <code>.git/config</code> file from</p>

<pre><code>[remote "origin"]
    url = https://github.com/tobyweston/playground.git
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>to</p>

<pre><code>[remote "origin"]
    url = git@github.com:tobyweston/playground.git
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>but won't associate the remote branch with a local one. You'll need to <a href="#set_upstream_branch">set an upstream branch</a> for that.</p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="set_upstream_branch"></a>Set upstream branch</h2>

<p>Trying a <code>git pull</code> after <a href="#switch_to_ssh">switching from HTTPS to git/ssh above</a> will give you an error.</p>

<pre><code>You asked to pull from the remote 'origin', but did not specify
a branch. Because this is not the default configured remote
for your current branch, you must specify a branch on the command line.
</code></pre>

<p>Set the upstream branch with</p>

<pre><code>git branch --set-upstream master origin/master
</code></pre>

<p>which should report back,</p>

<pre><code>Branch master set up to track remote branch master from origin.
</code></pre>

<p>and change your <code>.git/config</code> file from</p>

<pre><code>[remote "origin"]
</code></pre>

<p>to</p>

<pre><code>[branch "master"]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p>Do the same for any other remote branches.</p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="status"></a>Abbreviated status</h2>

<p>The standard <code>git status</code> output</p>

<p>``` sh
$ git status</p>

<h1>On branch master</h1>

<h1>Your branch is ahead of 'origin/master' by 1 commit.</h1>

<p>#</p>

<h1>Changes not staged for commit:</h1>

<h1>(use "git add <file>..." to update what will be committed)</h1>

<h1>(use "git checkout -- <file>..." to discard changes in working directory)</h1>

<p>#</p>

<h1>modified:   LegoWars/BattleShip.h</h1>

<h1>modified:   LegoWars/BattleShip.m</h1>

<p>#
<code>``
The abbreviated</code>git status -sb` version</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git status -sb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;master...origin/master <span class="o">[</span>ahead 1<span class="o">]</span>&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; M LegoWars/BattleShip.h
</span><span class='line'> M LegoWars/BattleShip.m
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2><a id="alias"></a>Useful Git aliases and config</h2>

<p>Set the proxy, your user name and a couple of useful configurations. Feed straight in from the shell.</p>

<p><code>sh
git config --global http.proxy myproxy:8080
git config --global user.email me@email.com
git config --global user.name me
git config --global color.ui true
</code></p>

<p>Some useful aliases.</p>

<p><code>sh
git config --global alias.last "log -1 HEAD"
git config --global alias.st "status -sb"
git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"
</code></p>

<h2>Recommended Reading</h2>

<div>
    <script type="text/javascript">
    function trackOutboundLink(link, category, action) {

        try {
            _gaq.push(['_trackEvent', category , action]);
        } catch(err){}

        setTimeout(function() {
            document.location.href = link.href;
        }, 100);
    }
    </script>
</div>


<p><a href="http://www.amazon.co.uk/gp/product/1934356727/ref=as_li_ss_il?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356727&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img itemprop="image" class="right" src="http://ecx.images-amazon.com/images/I/41iwlU4g9yL.<em>SL160</em>.jpg" title="'Pragmatic Guide to Git (Pragmatic Programmers)'" ></a>
<a href="http://www.amazon.co.uk/gp/product/1934356158/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356158&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img itemprop="image" class="right" src="http://ecx.images-amazon.com/images/I/519CeNsejdL.<em>SL160</em>.jpg" title="'Pragmatic Version Control Using Git'" ></a></p>

<ul>
<li><a href="http://www.amazon.co.uk/gp/product/1934356727/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356727&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Pragmatic Guide to Git (Pragmatic Programmers)</a>, Travis Swicegood</li>
<li><a href="http://www.amazon.co.uk/gp/product/1934356158/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356158&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Pragmatic Version Control Using Git: 1 (Pragmatic Starter Kit)</a>, Travis Swicegood</li>
<li><a href="http://www.amazon.co.uk/gp/product/1430218339/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1430218339&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Pro Git (Expert's Voice in Software Development)</a>, Scott Chacon</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diff Excel with Java and Hamcrest]]></title>
    <link href="http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest/"/>
    <updated>2012-09-14T13:21:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest</id>
    <content type="html"><![CDATA[<p>Comparing Excel spreadsheets programmatically can be tricky. Projects like <a href="http://poi.apache.org/">Apache POI</a> and <a href="http://jexcelapi.sourceforge.net/">JExcel</a> let you build and interrogate sheets but don't offer a built in compare function. Fortunately, <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> offers a simplified API for building sheets in Java and a bunch of <a href="http://hamcrest.org/">Hamcrest</a> matchers to find any differences.</p>

<!-- more -->


<h2>Building Spreadsheets</h2>

<p><a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> takes a sheet as a template and allows you to apply changes programmatically to it. For example, you can start with a blank invoice sheet and insert items and totals from your Java code. It wraps Apache POI to make things easier to work with.</p>

<p>However you create your sheet, it'd be nice to be able to unit test it. <a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> offers <code>Matcher</code>s to do just that. You can write unit style tests, making assertions against individual cells or rows or you can write coarser grained tests that compare every cell of one sheet against every cell of another.</p>

<h2>Matchers</h2>

<p>The matchers you're most likely to use can be found in the <code>bad.robot.excel.matchers.Matchers</code> class. They include <code>WorkbookMatcher</code> and <code>CellMatcher</code> but there are a bunch of finer grained matchers in the <code>bad.robot.excel.matchers</code> package.</p>

<h2>Comparing Sheets</h2>

<p>Using the <code>WorkbookMatcher</code>, you can compare an entire workbook to another. The comparison is made against POI <code>Workbook</code> objects, so load these using POI.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Workbook</span> <span class="n">actual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">expected</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">actual</span><span class="o">,</span> <span class="n">sameWorkbook</span><span class="o">(</span><span class="n">expected</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you use the <code>MatcherAssert.assertThat</code> from Hamcrest rather than the vanilla JUnit version (<code>org.junit.Assert.assertThat</code>), you'll see useful information on a failure.</p>

<pre><code>java.lang.AssertionError:
Expected: entire workbook to be equal
     but: cell at "C14" contained &lt;"bananas"&gt; expected &lt;nothing&gt;,
          cell at "C15" contained &lt;"£1,850,000"&gt; expected &lt;"£1,850,000.00"&gt;,
          cell at "D16" contained &lt;nothing&gt; expected &lt;"Tue Sep 04 06:30:00"&gt;
</code></pre>

<p>Other failures might include differing number of sheets, differently named sheets, different number of rows or columns. They're all aggregated in the failure message so you don't need to fix one and run the test again. It'll try and report all errors up front.</p>

<h2>Finer Grained Comparisons</h2>

<p>Lets say we have a class, <code>InvoiceItem</code> representing a sale item. We'd like to append this line item as a row on an invoice. It might look something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">InputStream</span> <span class="n">template</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;invoiceTemplate.xls&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">invoice</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(</span><span class="n">template</span><span class="o">);</span>
</span><span class='line'><span class="n">InvoiceItem</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvoiceItem</span><span class="o">();</span>
</span><span class='line'><span class="n">item</span><span class="o">.</span><span class="na">appendTo</span><span class="o">(</span><span class="n">invoice</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>appendTo</code> method uses <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> to append the row to the invoice (ignore the details for now) but we'd like to verify that the sheet has been modified in the right way. Using the <code>CellMatcher</code>, you can do something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">stringCell</span><span class="o">(</span><span class="s">&quot;Mac Book Pro&quot;</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">numberCell</span><span class="o">(</span><span class="mf">999.99</span><span class="n">D</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">blankCell</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Where the <code>getCellForCoordinate</code> returns a POI <code>Cell</code> object and <code>equalTo</code> is statically imported from <code>bad.robot.excel.matchers.Matchers</code> (not regular Hamcrest <code>equalTo</code>);</p>

<p>When it fails, you'll get something friendly like this;</p>

<pre><code>java.lang.AssertionError:
Expected: is &lt;999.99D&gt;
     but: cell at "E2" contained &lt;1999.99D&gt; expected &lt;999.99D&gt;
</code></pre>

<p>It matches on type and content of the cell. So the string cell <code>"999.99"</code> is different than the numeric cell <code>999.99</code>. It doesn't yet match against styling (things like borders or background colours).</p>

<p>The project is open source. As always, I'd love to hear how you get on using it. Check it out and the leave a comment if you like it. Issues are tracked on the <a href="http://github.com/tobyweston/simple-excel/issues">project site</a>.</p>

<h2>Recommended Reading</h2>

<div>
    <script type="text/javascript">
    function trackOutboundLink(link, category, action) {

        try {
            _gaq.push(['_trackEvent', category , action]);
        } catch(err){}

        setTimeout(function() {
            document.location.href = link.href;
        }, 100);
    }
    </script>
</div>


<p><a href="http://www.amazon.co.uk/gp/product/0321503627/ref=as_li_ss_il?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321503627&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img itemprop="image" class="right" src="http://ws.assoc-amazon.co.uk/widgets/q?<em>encoding=UTF8&amp;ASIN=0321503627&amp;Format=</em>SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=baddotrobotco-21" title="'Growing Object Oriented Software'" ></a></p>

<ul>
<li><a href="http://www.amazon.co.uk/gp/product/0321503627/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321503627&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Growing Object-Oriented Software, Guided by Tests</a>, Steve Freeman, Nat Pryce</li>
<li><a href="http://www.amazon.co.uk/gp/product/839348930X/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=839348930X&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Practical Unit Testing with TestNG and Mockito</a>, Tomek Kaczanowski</li>
<li><a href="http://www.amazon.co.uk/gp/product/0321784154/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321784154&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">ATDD by Example: A Practical Guide to Acceptance Test-driven Development</a>, Markus Gärtner</li>
</ul>

]]></content>
  </entry>
  
</feed>
