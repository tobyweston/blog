<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2013-05-24T14:21:01+01:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Stack vs Deque]]></title>
    <link href="http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/"/>
    <updated>2013-01-10T12:12:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2013/01/10/stack-vs-deque</id>
    <content type="html"><![CDATA[<p>Java has long had a <a href="/blog/2009/01/24/inheritance-vs-composition/">badly written</a> implementation of a stack. The stack is a great example of single responsibility; it's supposed to implement LIFO and only LIFO behaviour. Java ignores this principle with the default implementation of <code>Stack</code>. It extends <code>Vector</code> and so is implemented in terms of inheritance rather than aggregation. It's <em>both</em> a <code>Stack</code> <em>and</em> a <code>Vector</code>. They haven't made the situation any better when recently deprecating <code>Stack</code> in favour of <code>Deque</code>.</p>

<!-- more -->


<h2>Don't Use Deque</h2>

<p>I can understand that Sun/Oracle never corrected the mistake given Java's principle of backwards compatibility but I was surprised when I noticed they recommend using Deque instead.</p>

<p><blockquote><p>A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class.</p><footer><strong>Oracle Documentation for Stack</strong> <cite><a href='http://docs.oracle.com/javase/7/docs/api/index.html?java/util/Stack.html'>docs.oracle.com/javase/7/docs/&hellip;</a></cite></footer></blockquote></p>

<p>A deque is a double ended queue, by definition it is <strong>not</strong> a stack. It allows LIFO <em>and</em> FIFO behaviour. I can't see why Sun/Oracle are so happy to abandon encapsulation like this.</p>

<h2>Why is this Important?</h2>

<p>If you don't control what operations a stack class can perform, you open up the class for non-stack like uses. For example, you might be able to insert objects into the middle of the stack. If client code starts using this behaviour, there's immediately a  dependency on it. The client code now depends on the <em>implementation</em> and not the <em>role</em> of your class. You won't be able to swap out the implementation of your stack without potentially forcing changes to clients.</p>

<p>You could argue that this is the client code's choice. For classes with well known semantics like the stack, any client using non-stack behaviour should appreciate the coupling and be able to make an informed decision. For more domain or business specific behaviours however, it's very likely that clients will benefit by avoiding this coupling. Forcing clients to depend on defined roles rather than implementation allows for flexibility of substitution.</p>

<h2>Use Encapsulation</h2>

<p>It seems like we should really use a <code>Stack</code> abstraction to define the <em>role</em> and composition to implement the stack. That way, we're able to substitute any implementation and expect our clients to still work. We won't be able to break encapsulation by exposing methods we shouldn't and we'll allow clients to substitute alternative implementations.</p>

<p>For example,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">push</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="n">T</span> <span class="nf">pop</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DequeStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">Deque</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">deque</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">deque</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's important to note that I'm not saying use composition to enforce encapsulation though. The example above restricts what can be done with the underlying <code>Deque</code>. It's <em>hiding the implementation details</em> and exposing the role through an interface. It's using information hiding to achieve encapsulation. That's not to say that you can't achieve the same thing using inheritance.</p>

<p>For example, the naive <code>BoundedStack</code> implementation below is still a <code>Stack</code>. It inherits it, it has an "is a" relationship with <code>Stack</code>. Any stack implementation most certainly does not have a "is a" relationship with list (<code>Vector</code>) or double ended queue (<code>Deque</code>).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoundedStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">DequeStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="n">UPPER_BOUND</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>        <span class="n">deque</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">count</span><span class="o">--;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">deque</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Related</h2>

<p><div class="wikipedia">
  
  <h2>information hiding</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, <strong>information hiding</strong> is the principle of segregation of the <i><a href="http://en.wikipedia.org/wiki/Design" title="Design">design</a> decisions</i> in a <a href="http://en.wikipedia.org/wiki/Computer_program" title="Computer program">computer program</a> that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable <a href="http://en.wikipedia.org/wiki/Interface_(computer_science)" title="Interface (computer science)" class="mw-redirect">interface</a> which protects the remainder of the program from the implementation (the details that are most likely to change).
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Information_hiding" target="_blank">Read more on Wikipedia</a>
</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Messages vs Method Invocation]]></title>
    <link href="http://baddotrobot.com/blog/2012/10/06/sending-messages-vs-method-invocation/"/>
    <updated>2012-10-06T12:12:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/10/06/sending-messages-vs-method-invocation</id>
    <content type="html"><![CDATA[<p><img class="right" src="../../../../../images/letter.jpg" title="'Send a message'" ></p>

<p>In object-oriented languages, some people talk about sending messages whilst others talk about invoking methods. In this post, we'll take a look at the conceptual difference in terminology and the more concrete, technical differences. Whilst we're on the topic, we'll look at the difference between a function and a method and discuss the difference between an object reference and a pointer.</p>

<!-- more -->


<h2>Sending Messages</h2>

<p>The terminology of sending a message to an object is partly historical. Languages like Smalltalk adopted it as a metaphor when working with objects. To understand why the metaphor is useful, we have to look at things before the advent of object oriented languages. In these days, procedural programming relied on subroutines (functions and procedures) to modify state. With no concept of "objects", state is simply associated with data structures. So applying a function to those structures would produce new state and applying a procedure would modify state.</p>

<p>With the arrival of "objects" to encapsulate state <em>and</em> behaviour, the messaging metaphor invites us to think about objects performing their own operations. Objects communicate by sending each other <em>messages</em>. Instead of calling a function directly in procedural programming, you send a message to an object requesting it to perform one of it's own subroutines. This allows us to think about <em>methods</em> in more abstract terms. Rather than think about data structures and the functions (and procedures) that affect them, we can focus on <em>behaviours</em> [2].</p>

<blockquote><p>So sending messages helps us think in object-oriented terms rather than procedural or functional terms; we think in terms of behaviours rather than data structures. However, there is also a more concrete, technical difference.</p></blockquote>

<p>Sending a message means the receiving object decides how to handle a message whilst a call to a function (or procedure) is a more static or class level notion [1]. In lanaguages like Java, the function (or procedure) lookup is still done, it's just done behind the scenes at runtime. By calling a method, for example, <code>person.eat(apple)</code>, the reference to <code>person</code> allows the JVM to associate the object with the procedure <code>eat</code>. It's a process called <a href="http://en.wikipedia.org/wiki/Dynamic_dispatch">dynamic dispatch</a>.</p>

<p>It's very similar in concept to the distinction between functions and methods.</p>

<h2>Functions vs Methods</h2>

<p>Functions and procedures are <a href="http://en.wikipedia.org/wiki/Subroutine">subroutines</a> disassociated from the data they act upon. Methods on the other hand are subroutines associated with objects. Functions are class level subroutines whereas methods are object level subroutines. For example, a <em>method</em> in Objective-C, is compiled down to a C <em>function</em> with additional parameters, one of which is the receiver object (<code>id</code>). It associates the function with this object.</p>

<p>Lets have a look at that in detail. For example, our method above would look like the following in Objective-C.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Objective-C Method  </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">eat:</span><span class="p">(</span><span class="n">Food</span><span class="o">*</span><span class="p">)</span> <span class="n">food</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// nom nom nom</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The equivalent C function, would look like this. It isn't associated with an instance of a class and would be globally available to all modules. It doesn't make sense in the object-oriented world as there is no noun associated with the action. There is no <em>thing</em> eating the food. The act of eating simply affects some data structure. A C function is equivalent to a static class method in Java [3].</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>C Function  </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">eat</span><span class="p">(</span><span class="n">Food</span><span class="o">*</span> <span class="n">food</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// nom nom nom</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Objective-C would compile down the method above into a C function something like the following [3, pg 96-97][4]. The important thing to note is the <code>id</code> parameter, which is the receiving object of the message.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Objective C method compiled into a C Function  </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">eat</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">Food</span><span class="o">*</span> <span class="n">food</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// nom nom nom</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Object References</h2>

<p>So where does object references come in?</p>

<p>Java uses <em>object references</em> not <em>pointers</em>. Pointers are variables who's <em>value</em> is an address in memory. With pointer arithmetic, you can manually manipulate this value to zip around memory locations. Java prevents you from directly accessing memory locations directly like this. Because a pointer is really just a memory location, it can point to anything, a integer, a float, a <code>struct</code> or even to a function [3]. Java's object references point to objects only.</p>

<p>So in [1] when <a href="https://www.informit.com/articles/printerfriendly.aspx?p=1571983">Chisnall</a> says "in Java, a message call looks like a call to a function pointer in a C structure", he's referring to a C structure that contains a pointer to a function being dereferenced and how Java's method invocation syntax looks similar. You access a C structure using the dot notation, so a structure containing a pointer to our C function might look like the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">person</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">eat</span><span class="p">)(</span><span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">struct</span> <span class="n">person</span> <span class="n">person</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and dereferencing it would look similar to Java</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">person</span><span class="p">.</span><span class="n">eat</span><span class="p">(</span><span class="n">apple</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the context of his article, Chisnall is highlighting that Objective-C makes it's syntax as distinct as possible when talking about message sending. It's a useful idea as it makes the terminology of sending messages explicit and baked into the way you work with the language. With Java, you have to work harder to conceptually take up the metaphor. Java's terminology is around calling a method so it brushes over some of these subtleties.</p>

<h2>Roundup</h2>

<p>For me, the challenge of working with object-oriented designs is keeping my object-oriented head on. It's easy to slip into a procedural or functional way of coding but when the domain fits, I find that object-oriented solutions just <em>click</em>. To that end, I jump on any tool that helps remind me to think in terms of objects and their intercommunication, behaviours not accessors (tell don't ask). I find the message sending metaphor useful in doing just that.</p>

<h2>References</h2>

<div>
    <script type="text/javascript">
    function trackOutboundLink(link, category, action) {

        try {
            _gaq.push(['_trackEvent', category , action]);
        } catch(err){}

        setTimeout(function() {
            document.location.href = link.href;
        }, 100);
    }
    </script>
</div>


<p>[1] Objective-C for Java Programmers, <a href="https://www.informit.com/articles/printerfriendly.aspx?p=1568732">Part 1</a>, <a href="https://www.informit.com/articles/printerfriendly.aspx?p=1571983">Part 2</a>, David Chisnall <br/>
[2] <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/OOP_ObjC/Introduction/Introduction.html">Object-Oriented Programming with Objective-C</a>, Apple.    <br/>
[3] <a href="http://amzn.to/Tm1Sh1" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Learn Objective-C for Java Developers</a>, James Bucanek
[4] <a href="http://www.mikeash.com/pyblog/friday-qa-2009-03-20-objective-c-messaging.html">Object-C Messages</a>, Mike Ash</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diff Excel with Java and Hamcrest]]></title>
    <link href="http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest/"/>
    <updated>2012-09-14T13:21:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest</id>
    <content type="html"><![CDATA[<p>Comparing Excel spreadsheets programmatically can be tricky. Projects like <a href="http://poi.apache.org/">Apache POI</a> and <a href="http://jexcelapi.sourceforge.net/">JExcel</a> let you build and interrogate sheets but don't offer a built in compare function. Fortunately, <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> offers a simplified API for building sheets in Java and a bunch of <a href="http://hamcrest.org/">Hamcrest</a> matchers to find any differences.</p>

<!-- more -->


<h2>Building Spreadsheets</h2>

<p><a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> takes a sheet as a template and allows you to apply changes programmatically to it. For example, you can start with a blank invoice sheet and insert items and totals from your Java code. It wraps Apache POI to make things easier to work with.</p>

<p>However you create your sheet, it'd be nice to be able to unit test it. <a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> offers <code>Matcher</code>s to do just that. You can write unit style tests, making assertions against individual cells or rows or you can write coarser grained tests that compare every cell of one sheet against every cell of another.</p>

<h2>Matchers</h2>

<p>The matchers you're most likely to use can be found in the <code>bad.robot.excel.matchers.Matchers</code> class. They include <code>WorkbookMatcher</code> and <code>CellMatcher</code> but there are a bunch of finer grained matchers in the <code>bad.robot.excel.matchers</code> package.</p>

<h2>Comparing Sheets</h2>

<p>Using the <code>WorkbookMatcher</code>, you can compare an entire workbook to another. The comparison is made against POI <code>Workbook</code> objects, so load these using POI.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Workbook</span> <span class="n">actual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">expected</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">actual</span><span class="o">,</span> <span class="n">sameWorkbook</span><span class="o">(</span><span class="n">expected</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you use the <code>MatcherAssert.assertThat</code> from Hamcrest rather than the vanilla JUnit version (<code>org.junit.Assert.assertThat</code>), you'll see useful information on a failure.</p>

<pre><code>java.lang.AssertionError:
Expected: entire workbook to be equal
     but: cell at "C14" contained &lt;"bananas"&gt; expected &lt;nothing&gt;,
          cell at "C15" contained &lt;"£1,850,000"&gt; expected &lt;"£1,850,000.00"&gt;,
          cell at "D16" contained &lt;nothing&gt; expected &lt;"Tue Sep 04 06:30:00"&gt;
</code></pre>

<p>Other failures might include differing number of sheets, differently named sheets, different number of rows or columns. They're all aggregated in the failure message so you don't need to fix one and run the test again. It'll try and report all errors up front.</p>

<h2>Finer Grained Comparisons</h2>

<p>Lets say we have a class, <code>InvoiceItem</code> representing a sale item. We'd like to append this line item as a row on an invoice. It might look something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">InputStream</span> <span class="n">template</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;invoiceTemplate.xls&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">invoice</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(</span><span class="n">template</span><span class="o">);</span>
</span><span class='line'><span class="n">InvoiceItem</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvoiceItem</span><span class="o">();</span>
</span><span class='line'><span class="n">item</span><span class="o">.</span><span class="na">appendTo</span><span class="o">(</span><span class="n">invoice</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>appendTo</code> method uses <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> to append the row to the invoice (ignore the details for now) but we'd like to verify that the sheet has been modified in the right way. Using the <code>CellMatcher</code>, you can do something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">stringCell</span><span class="o">(</span><span class="s">&quot;Mac Book Pro&quot;</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">numberCell</span><span class="o">(</span><span class="mf">999.99</span><span class="n">D</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">blankCell</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Where the <code>getCellForCoordinate</code> returns a POI <code>Cell</code> object and <code>equalTo</code> is statically imported from <code>bad.robot.excel.matchers.Matchers</code> (not regular Hamcrest <code>equalTo</code>);</p>

<p>When it fails, you'll get something friendly like this;</p>

<pre><code>java.lang.AssertionError:
Expected: is &lt;999.99D&gt;
     but: cell at "E2" contained &lt;1999.99D&gt; expected &lt;999.99D&gt;
</code></pre>

<p>It matches on type and content of the cell. So the string cell <code>"999.99"</code> is different than the numeric cell <code>999.99</code>. It doesn't yet match against styling (things like borders or background colours).</p>

<p>The project is open source. As always, I'd love to hear how you get on using it. Check it out and the leave a comment if you like it. Issues are tracked on the <a href="http://github.com/tobyweston/simple-excel/issues">project site</a>.</p>

<h2>Recommended Reading</h2>

<div>
    <script type="text/javascript">
    function trackOutboundLink(link, category, action) {

        try {
            _gaq.push(['_trackEvent', category , action]);
        } catch(err){}

        setTimeout(function() {
            document.location.href = link.href;
        }, 100);
    }
    </script>
</div>


<p><a href="http://www.amazon.co.uk/gp/product/0321503627/ref=as_li_ss_il?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321503627&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img class="right" src="http://ws.assoc-amazon.co.uk/widgets/q?<em>encoding=UTF8&amp;ASIN=0321503627&amp;Format=</em>SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=baddotrobotco-21" title="'Growing Object Oriented Software'" ></a></p>

<ul>
<li><a href="http://www.amazon.co.uk/gp/product/0321503627/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321503627&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Growing Object-Oriented Software, Guided by Tests</a>, Steve Freeman, Nat Pryce</li>
<li><a href="http://www.amazon.co.uk/gp/product/839348930X/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=839348930X&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Practical Unit Testing with TestNG and Mockito</a>, Tomek Kaczanowski</li>
<li><a href="http://www.amazon.co.uk/gp/product/0321784154/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321784154&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">ATDD by Example: A Practical Guide to Acceptance Test-driven Development</a>, Markus Gärtner</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part III)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/13/oauth-and-http-part-iii/"/>
    <updated>2012-08-13T19:13:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/13/oauth-and-http-part-iii</id>
    <content type="html"><![CDATA[<p>In previous posts, we looked at setting up authentication with OAuth to access FreeAgent's API. We've got something working but a couple of caveats remain when working with it from a rich client.</p>

<!-- more -->


<h2>The Workflow</h2>

<p>To summarise the workflow;</p>

<ol>
<li>Ask your user to authorise your application (on the target application's servers).</li>
<li>You'll be given an <em>authorisation token</em> from the above. Stash it.</li>
<li>Exchange your <em>authorisation token</em> for an <em>access token</em>. Stash this too (along with the <em>refresh token</em>).</li>
<li>Make requests passing along the <em>access token</em> to prove you're you.</li>
</ol>


<h2>The Authorisation Request</h2>

<p>It's not always clear, but step 1. above is a one time operation. You don't make this request every time your programmatically want to access the target application. It also implies that the <code>GET</code> request is made from the browser. There are "out of band" options but in-browser is the simplest.</p>

<h2>The Access Token Request</h2>

<p>Again, it's not always clear but the <em>access token</em> request only needs to be made once. In fact, if you've successfully retrieved an <em>access token</em> and then request a new one, FreeAgent will error with a basic authentication failure.</p>

<pre><code>HTTP/1.1 401 Unauthorized
Server: nginx/1.0.14
Date: Mon, 13 Aug 2012 18:13:44 GMT
Content-Type: text/html; charset=utf-8
Status: 401 Unauthorized
WWW-Authenticate: Basic realm="Application"
X-UA-Compatible: IE=Edge,chrome=1
X-Runtime: 0.099212
X-Rev: 9301db5
X-Host: web3

HTTP Basic: Access denied.
</code></pre>

<p>I think it's trying to say that your application isn't allowed to request a new access token whilst one is already valid.</p>

<h2>Refreshing the Access Token</h2>

<p>In a successful exchange of <em>authorisation code</em> for <em>access token</em>, you should see a response like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;access_token&quot;</span><span class="o">:</span><span class="s2">&quot;2YotasFasFzCXcCsMWp1&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;token_type&quot;</span><span class="o">:</span><span class="s2">&quot;bearer&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;expires_in&quot;</span><span class="o">:</span><span class="mi">604800</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;refresh_token&quot;</span><span class="o">:</span><span class="s2">&quot;1Gzv0XG5Qx2T3JOkFlKWyj&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In OAuth, The <code>expires_in</code> value should be the time in seconds that the <em>access token</em> is valid.</p>

<p><blockquote><p>RECOMMENDED. The lifetime in seconds of the access token. For example, the value "3600" denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.</p><footer><strong>OAuth 2.0 Specification</strong> <cite><a href='https://tools.ietf.org/html/draft-ietf-oauth-v2-26#section-4.2.2'>tools.ietf.org/html/&hellip;</a></cite></footer></blockquote></p>

<p>FreeAgent return <code>604800</code> which is consistent with their documentation as it works out as 7 days. As this countdown starts when you exchange the tokens, I convert the number into a concrete date when I get the response. That way, I can see later if I actually need to refresh the token. However, it seems that you can refresh your token at any point.</p>

<p>The process is similar to the <a href="/blog/2012/08/12/oauth-and-http-part-ii">requesting the original <em>access token</em></a>. Make a Basic auth HTTP POST but with a slightly smaller body.</p>

<pre><code>POST /v2/token_endpoint HTTP/1.1
Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
Accept: application/json
Content-Type: application/x-www-form-urlencoded
User-Agent: Java/1.6.0_33
Host: api.freeagent.com
Connection: close
Content-Length: 127

grant_type=refresh_token&amp;refresh_token=12wXjd7SL7SLOE1sdsaX8oCgix
</code></pre>

<p>which will return something like</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;access_token&quot;</span><span class="o">:</span><span class="s2">&quot;2YotasFasFzCXcCsMWp1&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;token_type&quot;</span><span class="o">:</span><span class="s2">&quot;bearer&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;expires_in&quot;</span><span class="o">:</span><span class="mi">604800</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part II)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii/"/>
    <updated>2012-08-12T11:13:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>, we walked through requesting "authorisation" from <a href="https://dev.freeagent.com/docs/oauth">FreeAgent</a> using OAuth. In this next post, we'll look at the next steps, requesting an <em>access token</em> and actually making client API calls to our target application.</p>

<!-- more -->


<h2>After Authorisation</h2>

<p>Once you've got the <em>authorisation code</em> but before actually being able to access target resources, you need to exchange the code for an <em>access token</em>. If you don't know what I'm talking about in terms of authorisation, refer back to the <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>.</p>

<p>To request the access token, you make a HTTP <code>POST</code> to the <em>token endpoint</em>. The request should give you back a <em>temporary</em> token which is required in <em>every subsequent</em> request to the target resources.</p>

<h2>Access Token Request</h2>

<p>The HTTP <code>POST</code> for FreeAgent requires <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">basic auth</a> using <em>client id</em> and <em>client secret</em> as the username and password. That means supplying a <code>Authorization</code> header with base 64 encoded username and password, separated by a colon. So,</p>

<pre><code>client_id:client_secret
</code></pre>

<p>Should be encoded and sent over in the header. It'll look something like this.</p>

<pre><code>Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
</code></pre>

<p>The <code>POST</code> body should include the following <a href="/blog/2012/06/11/http-encoding-schemes">x-www-form-urlencoded</a> parameters.</p>

<ul>
<li><code>grant_type=authorization_code</code></li>
<li><code>code=</code>the authorisation code (see <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>)</li>
<li><code>redirect_uri=</code>your redirect URI</li>
</ul>


<p>FreeAgent differs from a lot of other OAuth implementations where the information is passed along as query parameters to a <code>GET</code> request.</p>

<p>The request should also include an <code>Accept</code> header of <code>application/xml</code> or <code>application/json</code>.</p>

<h2>The Request</h2>

<p>So, an example request would look like this.</p>

<pre><code>POST /v2/token_endpoint HTTP/1.1
Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
Accept: application/json
Content-Type: application/x-www-form-urlencoded
User-Agent: Java/1.6.0_33
Host: api.freeagent.com
Connection: close
Content-Length: 127

grant_type=authorization_code&amp;code=12P3AsFZXwXjd7SLOE1dsaX8oCgix&amp;redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Foauth
</code></pre>

<h2>The Response</h2>

<p>Which should give back a response similar to below</p>

<pre><code>HTTP/1.1 200 OK
Server: nginx/1.0.14
Date: Sat, 11 Aug 2012 17:35:19 GMT
Content-Type: application/json;charset=UTF-8
Transfer-Encoding: chunked
Connection: close
Status: 200 OK
Cache-Control: no-store
Pragma: no-cache
ETag: "6eabf5cd4b391a5d7e6e0ded90e73d7b"
X-UA-Compatible: IE=Edge,chrome=1
X-Runtime: 0.283021
X-Rev: 9301db5
X-Host: web4

{
   "access_token":"1GwfYDOaz_rG352X-gf88aBUasP5QrG9FSasfiD13",
   "token_type":"bearer",
   "expires_in":604800,
   "refresh_token":"2sdf35SFdisaa1g-x1-MaBsdHsdO7ssgZfsSRhUVsjU"
}
</code></pre>

<h2>Using the Access Token</h2>

<p>To make fully authenticated calls to the target system, every request is made using the <em>access token</em>. Therefore, it must be extracted from the response above and stashed in your application. All that's left to do is pass this through on every request to a protected resource.</p>

<p>In FreeAgent's case, the token should be supplied in the <code>Authorization</code> header.</p>

<pre><code>Authorization: Bearer 1GwfYDOaz_rG35SSgf8y8aBUasP5QrG9FSasfiD13
</code></pre>

<h2>Refreshing the Access Token</h2>

<p>The access token will eventually expire (FreeAgent have set it to expire in seven days but this may change). To refresh the FreeAgent token, you send a similar <code>POST</code> request to the access token request with a few minor differences. See the <a href="https://dev.freeagent.com/docs/oauth#refreshing-the-access-token">FreeAgent documentation</a> for details.</p>

<h2>Next Up</h2>

<p>That's about it for now. Hopefully its been useful. If there's interest, I may continue the series and post an extended example using raw HTTP to interact with FreeAgent (not using an OAuth library). Let me know.</p>
]]></content>
  </entry>
  
</feed>
