<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | bad.robot]]></title>
  <link href="http://www.baddotrobot.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.baddotrobot.com/"/>
  <updated>2012-02-11T18:13:53+00:00</updated>
  <id>http://www.baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Transaction Management without the Frameworks]]></title>
    <link href="http://www.baddotrobot.com/blog/2012/01/29/transaction-management-without/"/>
    <updated>2012-01-29T00:00:00+00:00</updated>
    <id>http://www.baddotrobot.com/blog/2012/01/29/transaction-management-without</id>
    <content type="html"><![CDATA[<p>It's easy to avoid manually managing transactions when frameworks like Spring and
containers do a good job of hiding all the details. However, it's often more advantageous
to take the controls and manage your own transactions. We seem to shy away from this but its really straight forward and if it means we're not tied into yet another framework, why wouldn't we?
 Aside from just avoiding frameworks though, how does replacing <code>@Transctional</code> with something bespoke really help us?</p>

<p>Moving from a declarative approach to a more imperative one can help us with
testing and by virtue; <em>composability</em>. We can move from something which can
only be tested using the framework or container (implying an integration or
end-to-end style test) to a more focused style (without the need of said
frameworks or containers). If we manage things ourselves and are explicit
about the transactional boundaries in production code, we can be more
lightweight in our tests.</p>

<!-- more -->


<p>Lets take a look at an example in detail.</p>

<p>It's probably helpful to be clear what we mean by a <em>unit of work</em> here.
Intimately related to the idea of a database transaction, a unit of work is a
series of database operations that when applied together adhere to all the
transactional characteristics (<em>atomic</em>, <em>coherent</em>, <em>isolated</em> and
<em>durable</em>). For example, when updating the database to increment one bank
account and decrementing another, things should be atomic (both operations
happen or neither does), consistent (the bank accounts actually exist),
isolated (protected from concurrent updates to the same accounts) and durable
(permanently applied). Describing both operations as a unit of work and
applying then transactionally achieves this.</p>

<p>So we can think of the unit of work as something that can be executed and when
it is, it'll be under the conditions described above.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UnitOfWork</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">R</span><span class="o">,</span> <span class="n">E</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">R</span> <span class="n">execute</span><span class="o">(</span><span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">E</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Something that would be responsible for executing the unit of work might look like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UnitOfWorkRunner</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">,</span> <span class="n">E</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">T</span> <span class="n">run</span><span class="o">(</span><span class="n">UnitOfWork</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">,</span> <span class="n">E</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">unitOfWork</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When it comes to using Hibernate, we might have a concrete <code>UnitOfWorkRunner</code>
look something like the following. The key thing here is that the transaction
management is handled here, its a simple try catch finally pattern and as you
can see, is very simple.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionalUnitOfWorkRunner</span> <span class="kd">implements</span> <span class="n">UnitOfWorkRunner</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">TransactionalUnitOfWorkRunner</span><span class="o">(</span><span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">sessionProvider</span> <span class="o">=</span> <span class="n">sessionProvider</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">,</span> <span class="n">E</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">T</span> <span class="n">run</span><span class="o">(</span><span class="n">UnitOfWork</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">,</span> <span class="n">E</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">unitOfWork</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sessionProvider</span><span class="o">.</span><span class="na">getCurrentSession</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Transaction</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">beginTransaction</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">result</span> <span class="o">=</span> <span class="n">unitOfWork</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">sessionProvider</span><span class="o">);</span>
</span><span class='line'>        <span class="n">transaction</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">transaction</span><span class="o">.</span><span class="na">rollback</span><span class="o">();</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">isOpen</span><span class="o">())</span>
</span><span class='line'>            <span class="n">session</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">,</span> <span class="n">E</span> <span class="kd">extends</span> <span class="n">Exception</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">T</span> <span class="n">runInTransaction</span><span class="o">(</span><span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">,</span> <span class="n">UnitOfWork</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">T</span><span class="o">,</span> <span class="n">E</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">unitOfWork</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">TransactionalUnitOfWorkRunner</span><span class="o">(</span><span class="n">sessionProvider</span><span class="o">).</span><span class="na">run</span><span class="o">(</span><span class="n">unitOfWork</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's this class and interface that allows us to be explicit about our
transactional boundary. Clients to this define the transaction boundary. In
most containers and frameworks, the transactional boundary is around the
request/response cycle and the developer has little influence. Using the
<code>UnitOfWorkRunner</code> directly in your code gives more control over this. You can
use a servlet filter to achieve a similar request/response scoped transaction
or you can be finer grained and produce what I prefer; a transaction scoped to
a coherent <em>business operation</em>.</p>

<p>For example, lets have a interface describing current account business
functions that work on bank account entities. The <code>CurrentAccount</code> interface
represents business functions and should define the transactional boundary.
The <code>BankAccount</code> on the other hand represents the entities involved which
themselves are stored in an <code>Accounts</code> <em>repostiory</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// &quot;business&quot; operations</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CurrentAccount</span> <span class="o">{</span>
</span><span class='line'>   <span class="kt">void</span> <span class="nf">deposit</span><span class="o">(</span><span class="n">From</span><span class="o">&lt;</span><span class="n">BankAccount</span><span class="o">&gt;</span> <span class="n">from</span><span class="o">,</span> <span class="n">To</span><span class="o">&lt;</span><span class="n">BankAccount</span><span class="o">&gt;</span> <span class="n">to</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When we implement the <code>CurrentAccount</code>, we can define the transactional
behavior as a separate concern from the business behavior. For example,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Accounts</span> <span class="n">repository</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AccountRepository</span><span class="o">();</span>
</span><span class='line'><span class="n">CurrentAccount</span> <span class="n">currentAccount</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AcmeBankCurrentAccount</span><span class="o">(</span><span class="n">repository</span><span class="o">);</span>
</span><span class='line'><span class="n">CurrentAccount</span> <span class="n">transactionally</span> <span class="o">=</span> <span class="n">transactionally</span><span class="o">(</span><span class="n">sessionProvider</span><span class="o">,</span> <span class="n">currentAccount</span><span class="o">);</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">transactionally</span><span class="o">.</span><span class="na">deposit</span><span class="o">(...);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Where <code>transactionally</code> is a statically imported creation method that wires up
the <code>AcmeBankCurrentAccount</code> (the business services) with transactional
behavior. It does this via decoration but essentially creates an anonymous
<code>UnitOfWork</code> in which to execute the business operation within.</p>

<p>The full class looks like this</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TransactionWrapper</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">R</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">R</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">R</span> <span class="n">transactionally</span><span class="o">(</span><span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">,</span> <span class="n">R</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">R</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="n">object</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getInterfaces</span><span class="o">(),</span> <span class="k">new</span> <span class="n">TransactionWrapper</span><span class="o">(</span><span class="n">sessionProvider</span><span class="o">,</span> <span class="n">object</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">TransactionWrapper</span><span class="o">(</span><span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">,</span> <span class="n">R</span> <span class="n">delegate</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">sessionProvider</span> <span class="o">=</span> <span class="n">sessionProvider</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">delegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">TransactionalUnitOfWorkRunner</span><span class="o">(</span><span class="n">sessionProvider</span><span class="o">).</span><span class="na">run</span><span class="o">(</span><span class="k">new</span> <span class="n">UnitOfWork</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Object</span><span class="o">,</span> <span class="n">Exception</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="n">SessionProvider</span> <span class="n">sessionProvider</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">delegate</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">throwable</span><span class="o">.</span><span class="na">getTargetException</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The underlying business functionality within the <code>AcmeBankCurrentAccount</code>
isn't concerned with transactions. Instead, its decorated with
transactionality and we can use this decorating proxy to wrap any business
interface as a transaction.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AcmeBankCurrentAccount</span> <span class="kd">implements</span> <span class="n">CurrentAccount</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">AccountRepository</span> <span class="n">accounts</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">AcmeBankCurrentAccount</span><span class="o">(</span><span class="n">AccountRepository</span> <span class="n">accounts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">accounts</span> <span class="o">=</span> <span class="n">accounts</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">deposit</span><span class="o">(</span><span class="n">From</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">BankAccountIdentifier</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">from</span><span class="o">,</span> <span class="n">To</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">BankAccountIdentifier</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">to</span><span class="o">,</span> <span class="n">Amount</span> <span class="n">amount</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BankAccount</span> <span class="n">benefactor</span> <span class="o">=</span>  <span class="n">accounts</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">from</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
</span><span class='line'>    <span class="n">BankAccount</span> <span class="n">beneficiary</span> <span class="o">=</span> <span class="n">accounts</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">to</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
</span><span class='line'>    <span class="n">benefactor</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>    <span class="n">beneficiary</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="n">amount</span><span class="o">);</span>
</span><span class='line'>    <span class="n">accounts</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">benefactor</span><span class="o">);</span>
</span><span class='line'>    <span class="n">accounts</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">beneficiary</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This can come in handy when testing as we can isolate and test the different
responsibilities. We're also left with a handy framework to add ad-hoc data
directly to the database and it's easy enough to wire up an in-memory only
<code>UnitOfWorkRunner</code>. Back to the point earlier about composability, the overall
approach leaves us with loosely composed objects which combine to provide high
level behavior. The composites are simpler than the sum of its parts to borrow
a phrase from <a href="http://www.growing-object-oriented-software.com/">GOOS</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java source on Mac]]></title>
    <link href="http://www.baddotrobot.com/blog/2011/10/29/java-source-on-mac/"/>
    <updated>2011-10-29T00:00:00+01:00</updated>
    <id>http://www.baddotrobot.com/blog/2011/10/29/java-source-on-mac</id>
    <content type="html"><![CDATA[<p>Mostly as a reminder to myself, getting the Java source on your Mac involves the following.</p>

<!-- more -->


<ol>
<li>Go to the <a href="https://developer.apple.com/downloads">Apple Developer Connection downloads page</a>, search for <strong>Java for Mac OS X 10.x Developer Package</strong> where 10.x matches your version of OS X. The developer bundle includes the source whereas the regular software update version does not.</li>
<li>Download and install. Running <code>/Applications/Utilities/Java Preferences.app</code> should now show "Java SE 6 (System)" in the list.</li>
<li>Open a Terminal.app window</li>
<li><code>cd $JAVA_HOME</code> (aka <code>/System/Library/Frameworks/JavaVM.framework/Home</code>)</li>
<li>Setup a symlink to the source archive with <code>sudo ln -s /Library/Java/JavaVirtualMachines/1.6.0_26-b03-383.jdk/Contents/Home/src.jar</code></li>
<li>And for the JavaDoc, <code>sudo ln -s /Library/Java/JavaVirtualMachines/1.6.0_24-b07-334.jdk/Contents/Home/docs.jar</code></li>
<li>Now point your IDE of choice to the new source folder symlink.</li>
</ol>


<p>Any update to Java will set things up to point to Maven 3, so if you use Maven 2, it'll break things with</p>

<pre><code>java.lang.NoClassDefFoundError: org/codehaus/plexus/classworlds/launcher/Launcher
</code></pre>

<p>Reset things by;</p>

<ol>
<li><code>cd /usr/share</code></li>
<li><code>sudo mv maven maven.new</code> (a symlink which should incorrectly be pointing to <code>java/maven-3.0.3)</code></li>
<li><code>sudo ln -s /maven2/install/folder maven</code></li>
<li>run <code>maven -version</code> to check its back up.</li>
<li>Have a cup of tea.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catching Multiple Exceptions (and rethrowing them all!)]]></title>
    <link href="http://www.baddotrobot.com/blog/2011/08/29/catching-multiple-exceptions-and/"/>
    <updated>2011-08-29T00:00:00+01:00</updated>
    <id>http://www.baddotrobot.com/blog/2011/08/29/catching-multiple-exceptions-and</id>
    <content type="html"><![CDATA[<p>Sometimes, we may want to catch an exception, temporarily ignoring it to continue work before rethrowing it when its more appropriate to do so. I recently saw a slight variation of this whereby the developer wanted to (potentially) catch multiple exceptions, perform some processing then throw. However, it left the question that if more than one was caught, which exception should we actually rethrow. We certainly don't want to loose any information and should really allow the client to catch the exception in a standard way.</p>

<p>This got me thinking about how we should deal with this kind of thing. In the
end, I came up with the idea of a collection class to capture the <code>Exceptions</code>
and a sub-class of <code>Exception</code> to represent an exception containing other,
embedded exceptions. When you're done collecting exceptions, you can just
check and rethrow as a new exception type.</p>

<!-- more -->


<p>For example, the domain cleaning class below can throw an exception during the
<code>deleteAll</code> method. Rather than abandon the cleanup of subsequent objects, we
can employ this tactic to continue the cleanup and throw an exception
containing the underlying problems when we're done.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DomainCleaner</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="n">Domain</span> <span class="n">domain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">CompositeException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Exceptions</span> <span class="n">exceptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Exceptions</span><span class="o">();</span>
</span><span class='line'>    <span class="n">clean</span><span class="o">(</span><span class="n">domain</span><span class="o">.</span><span class="na">customers</span><span class="o">(),</span> <span class="n">exceptions</span><span class="o">);</span>
</span><span class='line'>    <span class="n">clean</span><span class="o">(</span><span class="n">domain</span><span class="o">.</span><span class="na">suppliers</span><span class="o">(),</span> <span class="n">exceptions</span><span class="o">);</span>
</span><span class='line'>    <span class="n">clean</span><span class="o">(</span><span class="n">domain</span><span class="o">.</span><span class="na">invoices</span><span class="o">(),</span> <span class="n">exceptions</span><span class="o">);</span>
</span><span class='line'>    <span class="n">exceptions</span><span class="o">.</span><span class="na">checkAndThrow</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">clean</span><span class="o">(</span><span class="n">Repository</span> <span class="n">repository</span><span class="o">,</span> <span class="n">Exceptions</span> <span class="n">exceptions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">((</span><span class="n">TestRepository</span><span class="o">)</span> <span class="n">repository</span><span class="o">).</span><span class="na">deleteAll</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RepositoryException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">exceptions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We simply add to the exception collection class (<code>exceptions.add(e)</code>) and then
when we're done, we can check it and throw a composite exception if needed
with <code>exceptions.checkAndThrow()</code>.</p>

<p>So far, we've only been interested in the fact that multiple exception can be
handled and so haven't needed to programmatically query for specific exception
types. For example, we've only needed this up until now.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// ... something that calls checkAndThrow()</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">CompositeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// ... this is enough for now</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The details of the classes are below.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Exceptions</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Iterable</span><span class="o">&lt;</span><span class="n">Exception</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Exception</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">exceptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Exception</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">exceptions</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exception</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Exception</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">exceptions</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">checkAndThrow</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CompositeException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">exceptions</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">CompositeException</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>toString()</code> implementation below outputs the embedded exceptions in a way
that is consistent with how you'd expect to see regular exceptions.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompositeException</span> <span class="kd">extends</span> <span class="n">Exception</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">Exceptions</span> <span class="n">exceptions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">CompositeException</span><span class="o">(</span><span class="n">Exceptions</span> <span class="n">exceptions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="s">&quot;composite exception was thrown with embedded exceptions (see details)&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">exceptions</span> <span class="o">=</span> <span class="n">exceptions</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">exception</span> <span class="o">:</span> <span class="n">exceptions</span><span class="o">)</span>
</span><span class='line'>        <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\t&#39;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="k">new</span> <span class="n">ExceptionToString</span><span class="o">(</span><span class="n">exception</span><span class="o">).</span><span class="na">toString</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%s\n{composite exceptions=\n%s}\n%s&quot;</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">(),</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="kd">super</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loggin is still evil but...]]></title>
    <link href="http://www.baddotrobot.com/blog/2011/06/22/loggin-is-still-evil-but/"/>
    <updated>2011-06-22T00:00:00+01:00</updated>
    <id>http://www.baddotrobot.com/blog/2011/06/22/loggin-is-still-evil-but</id>
    <content type="html"><![CDATA[<p>In a <a href="http://pequenoperro.blogspot.com/2010/10/logging-is-evil-but.html">previous post</a>, I was going on about how evil logging is. How it's often confused as a requirement and often badly misused. The upshot of the post was that if you're going to log stuff, in our case using Log4J, lets be honest about it and test it. We should be able to say upfront what's important to log, in what situations and at what log level. Sounds like a straight forward case of test first.</p>

<p>Mocking Log4J however can be a real pain. I've managed it in the past using
Apache's logging abstraction and configuring it to use Log4J under the covers
but in my previous post, I demonstrated a slightly easier way. A helper class
called Log4J that we can use to represent the logging system and that we can
make assertions against. Pretty cool so far.</p>

<!-- more -->


<p>There was one caveat, I wasn't entirely happy with the fact that the class
would rely on your external Log4J configuration. To assert that a log message
appeared at the level INFO for example, you'd have to make sure that the test
environment sets up the appropriate class to log at that level. It made for a
kind of integration / environmental test which in some cases might be a
sensible test but for the most part, I kept seeing test failures down to
configuration on different environments. Yuk.</p>

<p>So I updated the helper class to include a log level override which will
ignore what the actual configuration says. This means you can write less
brittle tests to say things like "ensure my log message is output at debug
level regardless of the runtime configuration".</p>

<p>The updated class looks like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Log4J</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">StringWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Log4J</span> <span class="nf">appendTo</span><span class="o">(</span><span class="n">Logger</span> <span class="n">logger</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Log4J</span><span class="o">(</span><span class="n">logger</span><span class="o">,</span> <span class="n">ALL</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Log4J</span> <span class="nf">appendTo</span><span class="o">(</span><span class="n">Logger</span> <span class="n">logger</span><span class="o">,</span> <span class="n">Level</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">Log4J</span><span class="o">(</span><span class="n">logger</span><span class="o">,</span> <span class="n">level</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="nf">Log4J</span><span class="o">(</span><span class="n">Logger</span> <span class="n">logger</span><span class="o">,</span> <span class="n">Level</span> <span class="n">level</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">logger</span> <span class="o">=</span> <span class="n">logger</span><span class="o">;</span>
</span><span class='line'>    <span class="n">WriterAppender</span> <span class="n">appender</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WriterAppender</span><span class="o">(</span><span class="k">new</span> <span class="n">SimpleLayout</span><span class="o">(),</span> <span class="n">writer</span><span class="o">);</span>
</span><span class='line'>    <span class="n">appender</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">uuid</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">addAppender</span><span class="o">(</span><span class="n">appender</span><span class="o">);</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">level</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">clean</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="na">removeAppender</span><span class="o">(</span><span class="n">uuid</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">assertThat</span><span class="o">(</span><span class="n">Matcher</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">matcher</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">matcher</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which means you can setup to expect a log level at say the ERROR level like
this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Log4J</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Log4J</span><span class="o">.</span><span class="na">appendTo</span><span class="o">(</span><span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">Post</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">LogLevel</span><span class="o">.</span><span class="na">ERROR</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The make assertions like this (which would fail if the matcher fails or
because its not logged at the expected level.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">logger</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">containsString</span><span class="o">(</span><span class="n">EXCEPTION_MESSAGE</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I still think logging is evil and try <em>really</em> hard not to use a single log
statement but if you have to, I hope the helper class helps keep you honest in
your tests ;) Have a look at the <a href="http://pequenoperro.blogspot.com/2010/10/logging-is-evil-but.html">previous
post</a> for
more details and extended examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDK7 Artcile in JavaTech Journal]]></title>
    <link href="http://www.baddotrobot.com/blog/2011/06/10/artcile-in-javatech-journal/"/>
    <updated>2011-06-10T00:00:00+01:00</updated>
    <id>http://www.baddotrobot.com/blog/2011/06/10/artcile-in-javatech-journal</id>
    <content type="html"><![CDATA[<p><a href="http://badrobot.googlecode.com/svn/trunk/bad.robot/JTJ-2011-05.pdf"><img class="right" src="http://jaxenter.com/assets/125/150/JTJ-2011-05.png"></a></p>

<p>My article "Java the language vs Java the platform" (about the new release of JDK7) has been published in this months
<a href="http://jaxenter.com/java-tech-journal/">Java Tech Journal</a>. Click on the image to download.</p>

<p>I'd love to get some feedback, so please feel free to comment here.</p>
]]></content>
  </entry>
  
</feed>
