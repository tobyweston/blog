<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2012-09-20T18:22:16+01:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diff Excel with Java and Hamcrest]]></title>
    <link href="http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest/"/>
    <updated>2012-09-14T13:21:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest</id>
    <content type="html"><![CDATA[<p>Comparing Excel spreadsheets programmatically can be tricky. Projects like <a href="http://poi.apache.org/">Apache POI</a> and <a href="http://jexcelapi.sourceforge.net/">JExcel</a> let you build and interrogate sheets but don't offer a built in compare function. Fortunately, <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> offers a simplified API for building sheets in Java and a bunch of <a href="http://hamcrest.org/">Hamcrest</a> matchers to find any differences.</p>

<!-- more -->


<h2>Building Spreadsheets</h2>

<p><a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> takes a sheet as a template and allows you to apply changes programmatically to it. For example, you can start with a blank invoice sheet and insert items and totals from your Java code. It wraps Apache POI to make things easier to work with.</p>

<p>However you create your sheet, it'd be nice to be able to unit test it. <a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> offers <code>Matcher</code>s to do just that. You can write unit style tests, making assertions against individual cells or rows or you can write coarser grained tests that compare every cell of one sheet against every cell of another.</p>

<h2>Matchers</h2>

<p>The matchers you're most likely to use can be found in the <code>bad.robot.excel.matchers.Matchers</code> class. They include <code>WorkbookMatcher</code> and <code>CellMatcher</code> but there are a bunch of finer grained matchers in the <code>bad.robot.excel.matchers</code> package.</p>

<h2>Comparing Sheets</h2>

<p>Using the <code>WorkbookMatcher</code>, you can compare an entire workbook to another. The comparison is made against POI <code>Workbook</code> objects, so load these using POI.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Workbook</span> <span class="n">actual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">expected</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">actual</span><span class="o">,</span> <span class="n">sameWorkbook</span><span class="o">(</span><span class="n">expected</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you use the <code>MatcherAssert.assertThat</code> from Hamcrest rather than the vanilla JUnit version (<code>org.junit.Assert.assertThat</code>), you'll see useful information on a failure.</p>

<pre><code>java.lang.AssertionError:
Expected: entire workbook to be equal
     but: cell at "C14" contained &lt;"bananas"&gt; expected &lt;nothing&gt;,
          cell at "C15" contained &lt;"£1,850,000"&gt; expected &lt;"£1,850,000.00"&gt;,
          cell at "D16" contained &lt;nothing&gt; expected &lt;"Tue Sep 04 06:30:00"&gt;
</code></pre>

<p>Other failures might include differing number of sheets, differently named sheets, different number of rows or columns. They're all aggregated in the failure message so you don't need to fix one and run the test again. It'll try and report all errors up front.</p>

<h2>Finer Grained Comparisons</h2>

<p>Lets say we have a class, <code>InvoiceItem</code> representing a sale item. We'd like to append this line item as a row on an invoice. It might look something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">InputStream</span> <span class="n">template</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;invoiceTemplate.xls&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">invoice</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(</span><span class="n">template</span><span class="o">);</span>
</span><span class='line'><span class="n">InvoiceItem</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvoiceItem</span><span class="o">();</span>
</span><span class='line'><span class="n">item</span><span class="o">.</span><span class="na">appendTo</span><span class="o">(</span><span class="n">invoice</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>appendTo</code> method uses <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> to append the row to the invoice (ignore the details for now) but we'd like to verify that the sheet has been modified in the right way. Using the <code>CellMatcher</code>, you can do something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">stringCell</span><span class="o">(</span><span class="s">&quot;Mac Book Pro&quot;</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">numberCell</span><span class="o">(</span><span class="mf">999.99</span><span class="n">D</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">blankCell</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Where the <code>getCellForCoordinate</code> returns a POI <code>Cell</code> object and <code>equalTo</code> is statically imported from <code>bad.robot.excel.matchers.Matchers</code> (not regular Hamcrest <code>equalTo</code>);</p>

<p>When it fails, you'll get something friendly like this;</p>

<pre><code>java.lang.AssertionError:
Expected: is &lt;999.99D&gt;
     but: cell at "E2" contained &lt;1999.99D&gt; expected &lt;999.99D&gt;
</code></pre>

<p>It matches on type and content of the cell. So the string cell <code>"999.99"</code> is different than the numeric cell <code>999.99</code>. It doesn't yet match against styling (things like borders or background colours).</p>

<p>The project is open source. As always, I'd love to hear how you get on using it. Check it out the leave me a comment if you like it. Issues are tracked on the <a href="http://github.com/tobyweston/simple-excel/issues">project site</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part III)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/13/oauth-and-http-part-iii/"/>
    <updated>2012-08-13T19:13:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/13/oauth-and-http-part-iii</id>
    <content type="html"><![CDATA[<p>In previous posts, we looked at setting up authentication with OAuth to access FreeAgent's API. We've got something working but a couple of caveats remain when working with it from a rich client.</p>

<!-- more -->


<h2>The Workflow</h2>

<p>To summarise the workflow;</p>

<ol>
<li>Ask your user to authorise your application (on the target application's servers).</li>
<li>You'll be given an <em>authorisation token</em> from the above. Stash it.</li>
<li>Exchange your <em>authorisation token</em> for an <em>access token</em>. Stash this too (along with the <em>refresh token</em>).</li>
<li>Make requests passing along the <em>access token</em> to prove you're you.</li>
</ol>


<h2>The Authorisation Request</h2>

<p>It's not always clear, but step 1. above is a one time operation. You don't make this request every time your programmatically want to access the target application. It also implies that the <code>GET</code> request is made from the browser. There are "out of band" options but in-browser is the simplest.</p>

<h2>The Access Token Request</h2>

<p>Again, it's not always clear but the <em>access token</em> request only needs to be made once. In fact, if you've successfully retrieved an <em>access token</em> and then request a new one, FreeAgent will error with a basic authentication failure.</p>

<pre><code>HTTP/1.1 401 Unauthorized
Server: nginx/1.0.14
Date: Mon, 13 Aug 2012 18:13:44 GMT
Content-Type: text/html; charset=utf-8
Status: 401 Unauthorized
WWW-Authenticate: Basic realm="Application"
X-UA-Compatible: IE=Edge,chrome=1
X-Runtime: 0.099212
X-Rev: 9301db5
X-Host: web3

HTTP Basic: Access denied.
</code></pre>

<p>I think it's trying to say that your application isn't allowed to request a new access token whilst one is already valid.</p>

<h2>Refreshing the Access Token</h2>

<p>In a successful exchange of <em>authorisation code</em> for <em>access token</em>, you should see a response like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;access_token&quot;</span><span class="o">:</span><span class="s2">&quot;2YotasFasFzCXcCsMWp1&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;token_type&quot;</span><span class="o">:</span><span class="s2">&quot;bearer&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;expires_in&quot;</span><span class="o">:</span><span class="mi">604800</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;refresh_token&quot;</span><span class="o">:</span><span class="s2">&quot;1Gzv0XG5Qx2T3JOkFlKWyj&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In OAuth, The <code>expires_in</code> value should be the time in seconds that the <em>access token</em> is valid.</p>

<p><blockquote><p>RECOMMENDED. The lifetime in seconds of the access token. For example, the value "3600" denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.</p><footer><strong>OAuth 2.0 Specification</strong> <cite><a href='https://tools.ietf.org/html/draft-ietf-oauth-v2-26#section-4.2.2'>tools.ietf.org/html/&hellip;</a></cite></footer></blockquote></p>

<p>FreeAgent return <code>604800</code> which is consistent with their documentation as it works out as 7 days. As this countdown starts when you exchange the tokens, I convert the number into a concrete date when I get the response. That way, I can see later if I actually need to refresh the token. However, it seems that you can refresh your token at any point.</p>

<p>The process is similar to the <a href="/blog/2012/08/12/oauth-and-http-part-ii">requesting the original <em>access token</em></a>. Make a Basic auth HTTP POST but with a slightly smaller body.</p>

<pre><code>POST /v2/token_endpoint HTTP/1.1
Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
Accept: application/json
Content-Type: application/x-www-form-urlencoded
User-Agent: Java/1.6.0_33
Host: api.freeagent.com
Connection: close
Content-Length: 127

grant_type=refresh_token&amp;refresh_token=12wXjd7SL7SLOE1sdsaX8oCgix
</code></pre>

<p>which will return something like</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;access_token&quot;</span><span class="o">:</span><span class="s2">&quot;2YotasFasFzCXcCsMWp1&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;token_type&quot;</span><span class="o">:</span><span class="s2">&quot;bearer&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;expires_in&quot;</span><span class="o">:</span><span class="mi">604800</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part II)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii/"/>
    <updated>2012-08-12T11:13:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>, we walked through requesting "authorisation" from <a href="https://dev.freeagent.com/docs/oauth">FreeAgent</a> using OAuth. In this next post, we'll look at the next steps, requesting an <em>access token</em> and actually making client API calls to our target application.</p>

<!-- more -->


<h2>After Authorisation</h2>

<p>Once you've got the <em>authorisation code</em> but before actually being able to access target resources, you need to exchange the code for an <em>access token</em>. If you don't know what I'm talking about in terms of authorisation, refer back to the <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>.</p>

<p>To request the access token, you make a HTTP <code>POST</code> to the <em>token endpoint</em>. The request should give you back a <em>temporary</em> token which is required in <em>every subsequent</em> request to the target resources.</p>

<h2>Access Token Request</h2>

<p>The HTTP <code>POST</code> for FreeAgent requires <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">basic auth</a> using <em>client id</em> and <em>client secret</em> as the username and password. That means supplying a <code>Authorization</code> header with base 64 encoded username and password, separated by a colon. So,</p>

<pre><code>client_id:client_secret
</code></pre>

<p>Should be encoded and sent over in the header. It'll look something like this.</p>

<pre><code>Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
</code></pre>

<p>The <code>POST</code> body should include the following <a href="/blog/2012/06/11/http-encoding-schemes">x-www-form-urlencoded</a> parameters.</p>

<ul>
<li><code>grant_type=authorization_code</code></li>
<li><code>code=</code>the authorisation code (see <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>)</li>
<li><code>redirect_uri=</code>your redirect URI</li>
</ul>


<p>FreeAgent differs from a lot of other OAuth implementations where the information is passed along as query parameters to a <code>GET</code> request.</p>

<p>The request should also include an <code>Accept</code> header of <code>application/xml</code> or <code>application/json</code>.</p>

<h2>The Request</h2>

<p>So, an example request would look like this.</p>

<pre><code>POST /v2/token_endpoint HTTP/1.1
Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
Accept: application/json
Content-Type: application/x-www-form-urlencoded
User-Agent: Java/1.6.0_33
Host: api.freeagent.com
Connection: close
Content-Length: 127

grant_type=authorization_code&amp;code=12P3AsFZXwXjd7SLOE1dsaX8oCgix&amp;redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Foauth
</code></pre>

<h2>The Response</h2>

<p>Which should give back a response similar to below</p>

<pre><code>HTTP/1.1 200 OK
Server: nginx/1.0.14
Date: Sat, 11 Aug 2012 17:35:19 GMT
Content-Type: application/json;charset=UTF-8
Transfer-Encoding: chunked
Connection: close
Status: 200 OK
Cache-Control: no-store
Pragma: no-cache
ETag: "6eabf5cd4b391a5d7e6e0ded90e73d7b"
X-UA-Compatible: IE=Edge,chrome=1
X-Runtime: 0.283021
X-Rev: 9301db5
X-Host: web4

{
   "access_token":"1GwfYDOaz_rG352X-gf88aBUasP5QrG9FSasfiD13",
   "token_type":"bearer",
   "expires_in":604800,
   "refresh_token":"2sdf35SFdisaa1g-x1-MaBsdHsdO7ssgZfsSRhUVsjU"
}
</code></pre>

<h2>Using the Access Token</h2>

<p>To make fully authenticated calls to the target system, every request is made using the <em>access token</em>. Therefore, it must be extracted from the response above and stashed in your application. All that's left to do is pass this through on every request to a protected resource.</p>

<p>In FreeAgent's case, the token should be supplied in the <code>Authorization</code> header.</p>

<pre><code>Authorization: Bearer 1GwfYDOaz_rG35SSgf8y8aBUasP5QrG9FSasfiD13
</code></pre>

<h2>Refreshing the Access Token</h2>

<p>The access token will eventually expire (FreeAgent have set it to expire in seven days but this may change). To refresh the FreeAgent token, you send a similar <code>POST</code> request to the access token request with a few minor differences. See the <a href="https://dev.freeagent.com/docs/oauth#refreshing-the-access-token">FreeAgent documentation</a> for details.</p>

<h2>Next Up</h2>

<p>That's about it for now. Hopefully its been useful. If there's interest, I may continue the series and post an extended example using raw HTTP to interact with FreeAgent (not using an OAuth library). Let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part I)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/11/oauth-and-http-part-i/"/>
    <updated>2012-08-11T19:20:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/11/oauth-and-http-part-i</id>
    <content type="html"><![CDATA[<p>Although OAuth is intended for web, mobile and desktop applications, I've been finding the protocol clunky when accessing a web application from a rich desktop client. Specifically, I'm trying to access FreeAgent's API. Their <a href="https://dev.freeagent.com/docs/oauth">documentation is pretty thin</a> on background. The <a href="https://groups.google.com/forum/#!forum/freeagent_api">support</a> is fairly focused on web apps and I found it difficult getting a desktop client hooked up.</p>

<p>As a result, I'm journaling my experiences and hopefully learning a thing or two about OAuth along the way.</p>

<!-- more -->


<h2>OAuth</h2>

<p><a href="http://www.oauth.net">OAuth</a> is described as "an open protocol to allow secure authorisation from web, mobile and desktop applications". It's intended as a handshaking protocol whereby an application is granted authorisation to another without having to know the target application's user credentials. The application requesting access never knows the end users details.</p>

<p>It's probably best described in terms of it's typical <a href="http://hueniverse.com/oauth/guide/workflow/">workflow</a>.</p>

<h2>Authorisation Request</h2>

<p>Once you have an application <em>client id</em> and <em>client secret</em>, you can request an <em>authorisation code</em>. This affectively means you're application is asking the target application for authorisation and to remember that your application is a valid "user". In API terms, it means you're asking for authorised access to the target's API.</p>

<p>A <code>GET</code> is made to the target <em>authorisation endpoint</em> with the <em>client id</em> and a <em>redirect URL</em> in the query string.</p>

<pre><code>GET https://api.freeagent.com/v2/approve_app?redirect_uri=XXX&amp;response_type=code&amp;client_id=YYY HTTP/1.1
</code></pre>

<p>The <a href="https://dev.freeagent.com/docs/oauth">FreeAgent documentation</a> talks about your application making this request but it really needs to be done in a browser environment. Fine, if your application is a web app. Not fine, if you're trying to programmatically do the HTTP <code>GET</code> request. At least, things got complicated for me when I tried.</p>

<p>If you do make the request in a browser environment, you'll log into FreeAgent with your user account and be asked to authorise the client application.</p>

<p><a href="../../../../../images/freeagent_auth_confirmation.png"><img src="../../../../../images/freeagent_auth_confirmation.png" title="'Authorisation confirmation'" ></a></p>

<p>At this point, FreeAgent will redirect to the <em>redirect URL</em> you supplied with the authorisation request. This is where it gets clunky. For a desktop application, where should you redirect to? The protocol causes tension because it requires a HTTP endpoint. Up and till now, it's only required a HTTP <em>client</em>, not a running <em>server</em>.</p>

<p>There is an "out of band" option in the OAuth specification. Using this, you would supply the query parameter <code>oauth_callback=oob</code> instead of a <code>redirect_url</code>. In this case, you'll be redirected to a page maintained by the target application (FreeAgent in our example) where the authorisation code is displayed for you to copy. Unfortunately, FreeAgent <a href="https://groups.google.com/forum/?fromgroups#!topic/freeagent_api/Rbld9sm0GOA">don't support this</a> "out of band" option.</p>

<h2>Fake OOB</h2>

<p>In lieu of this, I resorted to firing up a temporary HTTP server to reproduce the affect. The server runs on <code>localhost:8088/oauth</code> for example, and will extract the code from the response to the original authorisation request. If you set the <code>redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Foauth</code>, the request will be redirected here after you've manually confirmed authorisation in the browser. Crucially, it will pass along the <em>authorisation code</em> in the URL.</p>

<pre><code>http://localhost:8080/oauth?code=1A18cTY2tK7_ZHUsYSknCVWbVRYB4Nk
</code></pre>

<p>All that's left to do is extract it programmatically or display it for some cut and paste action. In my spoofed "out of band" workflow, it looks like this.</p>

<p><a href="../../../../../images/freeagent_oob_spoof.png"><img src="../../../../../images/freeagent_oob_spoof.png" title="'OOB Spoof'" ></a></p>

<p>At this point, you're application is now authorised to access the target. Jumping into my FreeAgent account, I can see this to be the case. The FreeAgent documentation doesn't make it very clear when it says the next step happens "out of band", but once you've got your authorisation code, it'll be valid for a while. You don't need to go through this step every time your application uses the target API.</p>

<p><a href="../../../../../images/freeagent_authorised.png"><img src="../../../../../images/freeagent_authorised.png" title="'My app is authorised'" ></a></p>

<h2>Next Up</h2>

<p>Once you've got the <em>authorisation code</em> but before actually being able to access target resources, you need to exchange the code for an <em>access token</em>.</p>

<p>I think that's quiet enough for now though, so we'll take a look at how that's done in the <a href="/blog/2012/08/12/oauth-and-http-part-ii">next post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lion Carnage]]></title>
    <link href="http://baddotrobot.com/blog/2012/07/28/mountain-lion-carnage/"/>
    <updated>2012-07-28T12:28:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/07/28/mountain-lion-carnage</id>
    <content type="html"><![CDATA[<p>After installing Mountain Lion, I discovered Java was gone along with Subversion and Git. Even Python was partially crippled. I went through these steps to bring them back.</p>

<!-- more -->


<h2>Git</h2>

<p>On my machine, before the update, Git used to live in</p>

<pre><code>/usr/bin/git
</code></pre>

<p>Which I think was a symbolic link pointing to <code>/usr/local/git</code>. This gets wiped out by Mountain Lion, to preserve tools using the old reference (IntelliJ IDEA in my case), I created a new sym link.</p>

<pre><code>sudo ln -s /usr/local/git/bin/git /usr/bin/git
</code></pre>

<p>The <code>/usr/bin</code> folder should be on the <code>$PATH</code> so it should get the terminal working again too.</p>

<h2>Subversion</h2>

<p><a href="http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;p=34790">Apparently</a>, Apple removed Subversion with 10.8 so there's nothing to do other than install it manually.</p>

<p>You can install Xcode which should put Subversion in <code>/Applications/Xcode.app/Contents/Developer/usr/bin/svn</code>. Victor Quinn talks about <a href="http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion/">reinstalling Xcode</a> to fix similar problems.</p>

<h2>Java</h2>

<p>OSX will install this for you the first time you try and start up a Java app. It sets up a symbolic link for <code>mvn</code> to point to Maven 3 which may need adjusting if you're still using Maven 2. See <a href="/blog/2011/10/29/java-source-on-mac">this post</a> for the fix.</p>

<h2>Rake / Python</h2>

<p>It even managed to mess with my Python installation which gets used when building this blog using the <code>rake generate</code> command. Thanks though to <a href="http://www.sebastien-han.fr/blog/2012/07/26/broken-rake-after-update-to-mountain-lion/">Sébastien Han</a> for getting me out of it.</p>
]]></content>
  </entry>
  
</feed>
