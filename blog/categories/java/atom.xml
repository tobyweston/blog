<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2012-08-12T10:37:26+01:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part II)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii/"/>
    <updated>2012-08-12T11:13:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>, we walked through requesting "authorisation" from <a href="https://dev.freeagent.com/docs/oauth">FreeAgent</a> using OAuth. In this next post, we'll look at the next steps, requesting an <em>access token</em> and actually making client API calls to our target application.</p>

<!-- more -->


<h2>After Authorisation</h2>

<p>Once you've got the <em>authorisation code</em> but before actually being able to access target resources, you need to exchange the code for an <em>access token</em>. If you don't know what I'm talking about in terms of authorisation, refer back to the <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>. This is done in the form of a HTTP <code>POST</code> to the (access) <em>token endpoint</em>. The request should give you back a <em>temporary</em> token which is required in <em>every subsequent</em> request to the target resources.</p>

<h2>Access Token Request</h2>

<p>The HTTP <code>POST</code> for FreeAgent requires <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">basic auth</a> using <em>client id</em> and <em>client secret</em> as the username and password. That means supplying a <code>Authorization</code> header with base 64 encoded username and password, separated by a colon. So,</p>

<pre><code>client_id:client_secret
</code></pre>

<p>Should be encoded and sent over in the header. It'll look something like this.</p>

<pre><code>Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
</code></pre>

<p>The <code>POST</code> body should include the following <a href="/blog/2012/06/11/http-encoding-schemes">x-www-form-urlencoded</a> parameters.</p>

<ul>
<li><code>grant_type=authorization_code</code></li>
<li><code>code=</code>the authorisation code (see <a href="/blog/2012/08/11/oauth-and-http-part-i">previous post</a>)</li>
<li><code>redirect_uri=</code>your redirect URI</li>
</ul>


<p>FreeAgent differs from a lot of other OAuth implementations where the information is passed along as query parameters to a <code>GET</code> request.</p>

<p>The request should also include an <code>Accept</code> header of <code>application/xml</code> or <code>application/json</code>.</p>

<h2>The Request</h2>

<p>So, an example request would look like this.</p>

<pre><code>POST /v2/token_endpoint HTTP/1.1
Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
Accept: application/json
Content-Type: application/x-www-form-urlencoded
User-Agent: Java/1.6.0_33
Host: api.freeagent.com
Connection: close
Content-Length: 127

grant_type=authorization_code&amp;code=12P3AsFZXwXjd7SLOE1dsaX8oCgix&amp;redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Foauth
</code></pre>

<h2>The Response</h2>

<p>Which should give back a response similar to below</p>

<pre><code>HTTP/1.1 200 OK
Server: nginx/1.0.14
Date: Sat, 11 Aug 2012 17:35:19 GMT
Content-Type: application/json;charset=UTF-8
Transfer-Encoding: chunked
Connection: close
Status: 200 OK
Cache-Control: no-store
Pragma: no-cache
ETag: "6eabf5cd4b391a5d7e6e0ded90e73d7b"
X-UA-Compatible: IE=Edge,chrome=1
X-Runtime: 0.283021
X-Rev: 9301db5
X-Host: web4

{
   "access_token":"1GwfYDOaz_rG352X-gf88aBUasP5QrG9FSasfiD13",
   "token_type":"bearer",
   "expires_in":604800,
   "refresh_token":"2sdf35SFdisaa1g-x1-MaBsdHsdO7ssgZfsSRhUVsjU"
}
</code></pre>

<h2>Using the Access Token</h2>

<p>To make fully authenticated calls to the target system, every request is made using the <em>access token</em>. Therefore, it must be extracted from the response above and stashed in your application. All that's left to do is pass this through on every request to a protected resource.</p>

<p>In FreeAgent's case, the token should be supplied in the <code>Authorization</code> header.</p>

<pre><code>Authorization: Bearer 1GwfYDOaz_rG35SSgf8y8aBUasP5QrG9FSasfiD13
</code></pre>

<h2>Refreshing the Access Token</h2>

<p>The access token will eventually expire (FreeAgent have set it to expire in seven days but this may change). To refresh the FreeAgent token, you send a similar <code>POST</code> request to the access token request with a few minor differences. See the <a href="https://dev.freeagent.com/docs/oauth#refreshing-the-access-token">FreeAgent documentation</a> for details.</p>

<h2>Next Up</h2>

<p>That's about it for now. Hopefully its been useful. If there's interest, I may continue the series and post an extended example using raw HTTP to interact with FreeAgent (not using an OAuth library). Let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part I)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/11/oauth-and-http-part-i/"/>
    <updated>2012-08-11T19:20:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/11/oauth-and-http-part-i</id>
    <content type="html"><![CDATA[<p>Although OAuth is intended for web, mobile and desktop applications, I've been finding the protocol clunky when accessing a web application from a rich desktop client. Specifically, I'm trying to access FreeAgent's API. Their <a href="https://dev.freeagent.com/docs/oauth">documentation is pretty thin</a> on background. The <a href="https://groups.google.com/forum/#!forum/freeagent_api">support</a> is fairly focused on web apps and I found it difficult getting a desktop client hooked up.</p>

<p>As a result, I'm journaling my experiences and hopefully learning a thing or two about OAuth along the way.</p>

<!-- more -->


<h2>OAuth</h2>

<p><a href="http://www.oauth.net">OAuth</a> is described as "an open protocol to allow secure authorisation from web, mobile and desktop applications". It's intended as a handshaking protocol whereby an application is granted authorisation to another without having to know the target application's user credentials. The application requesting access never knows the end users details.</p>

<p>It's probably best described in terms of it's typical <a href="http://hueniverse.com/oauth/guide/workflow/">workflow</a>.</p>

<h2>Authorisation Request</h2>

<p>Once you have an application <em>client id</em> and <em>client secret</em>, you can request an <em>authorisation code</em>. This affectively means you're application is asking the target application for authorisation and to remember that your application is a valid "user". In API terms, it means you're asking for authorised access to the target's API.</p>

<p>A <code>GET</code> is made to the target <em>authorisation endpoint</em> with the <em>client id</em> and a <em>redirect URL</em> in the query string.</p>

<pre><code>GET https://api.freeagent.com/v2/approve_app?redirect_uri=XXX&amp;response_type=code&amp;client_id=YYY HTTP/1.1
</code></pre>

<p>The <a href="https://dev.freeagent.com/docs/oauth">FreeAgent documentation</a> talks about your application making this request but it really needs to be done in a browser environment. Fine, if you application is a web app. Not fine, if you're trying to programmatically do the HTTP <code>GET</code> request. At least, things got complicated for me when I tried.</p>

<p>If you do make the request in a browser environment, you'll log into FreeAgent with your user account and be asked to authorise the client application.</p>

<p><a href="../../../../../images/freeagent_auth_confirmation.png"><img src="../../../../../images/freeagent_auth_confirmation.png" title="'Authorisation confirmation'" ></a></p>

<p>At this point, FreeAgent will redirect to the <em>redirect URL</em> you supplied with the authorisation request. This is where it gets clunky. For a desktop application, where should you redirect to? The protocol causes tension because it requires a HTTP endpoint. Up and till now, it's only required a HTTP <em>client</em>, not a running <em>server</em>.</p>

<p>There is an "out of band" option in the OAuth specification. Using this, you would supply the query parameter <code>oauth_callback=oob</code> instead of a <code>redirect_url</code>. In this case, you'll be redirected to a page maintained by the target application (FreeAgent in our example) where the authorisation code is displayed for you to copy. Unfortunately, FreeAgent <a href="https://groups.google.com/forum/?fromgroups#!topic/freeagent_api/Rbld9sm0GOA">don't support this</a> "out of band" option.</p>

<h2>Fake OOB</h2>

<p>In lieu of this, I resorted to firing up a temporary HTTP server to reproduce the affect. The server runs on <code>localhost:8088/oauth</code> for example, and will extract the code from the response to the original authorisation request. If you set the <code>redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Foauth</code>, the request will be redirected here after you've manually confirmed authorisation in the browser. Crucially, it will pass along the <em>authorisation code</em> in the URL.</p>

<pre><code>http://localhost:8080/oauth?code=1A18cTY2tK7_ZHUsYSknCVWbVRYB4Nk
</code></pre>

<p>All that's left to do is extract it programmatically or display it for some cut and paste action. In my spoofed "out of band" workflow, it looks like this.</p>

<p><a href="../../../../../images/freeagent_oob_spoof.png"><img src="../../../../../images/freeagent_oob_spoof.png" title="'OOB Spoof'" ></a></p>

<p>At this point, you're application is now authorised to access the target. Jumping into my FreeAgent account, I can see this to be the case. The FreeAgent documentation doesn't make it very clear when it says the next step happens "out of band", but once you've got your authorisation code, it'll be valid for a while. You don't need to go through this step every time your application uses the target API.</p>

<p><a href="../../../../../images/freeagent_authorised.png"><img src="../../../../../images/freeagent_authorised.png" title="'My app is authorised'" ></a></p>

<h2>Next Up</h2>

<p>Once you've got the <em>authorisation code</em> but before actually being able to access target resources, you need to exchange the code for an <em>access token</em>.</p>

<p>I think that's quiet enough for now though, so we'll take a look at how that's done in the <a href="/blog/2012/08/12/oauth-and-http-part-ii">next post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mountain Lion Carnage]]></title>
    <link href="http://baddotrobot.com/blog/2012/07/28/mountain-lion-carnage/"/>
    <updated>2012-07-28T12:28:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/07/28/mountain-lion-carnage</id>
    <content type="html"><![CDATA[<p>After installing Mountain Lion, I discovered Java was gone along with Subversion and Git. Even Python was partially crippled. I went through these steps to bring them back.</p>

<!-- more -->


<h2>Git</h2>

<p>On my machine, before the update, Git used to live in</p>

<pre><code>/usr/bin/git
</code></pre>

<p>Which I think was a symbolic link pointing to <code>/usr/local/git</code>. This gets wiped out by Mountain Lion, to preserve tools using the old reference (IntelliJ IDEA in my case), I created a new sym link.</p>

<pre><code>sudo ln -s /usr/local/git/bin/git /usr/bin/git
</code></pre>

<p>The <code>/usr/bin</code> folder should be on the <code>$PATH</code> so it should get the terminal working again too.</p>

<h2>Subversion</h2>

<p><a href="http://www.sublimetext.com/forum/viewtopic.php?f=3&amp;p=34790">Apparently</a>, Apple removed Subversion with 10.8 so there's nothing to do other than install it manually.</p>

<p>You can install Xcode which should put Subversion in <code>/Applications/Xcode.app/Contents/Developer/usr/bin/svn</code>. Victor Quinn talks about <a href="http://victorquinn.com/blog/2012/02/19/fix-git-svn-in-mountain-lion/">reinstalling Xcode</a> to fix similar problems.</p>

<h2>Java</h2>

<p>OSX will install this for you the first time you try and start up a Java app. It sets up a symbolic link for <code>mvn</code> to point to Maven 3 which may need adjusting if you're still using Maven 2. See <a href="/2011/10/29/java-source-on-mac">this post</a> for the fix.</p>

<h2>Rake / Python</h2>

<p>It even managed to mess with my Python installation which gets used when building this blog using the <code>rake generate</code> command. Thanks though to <a href="http://www.sebastien-han.fr/blog/2012/07/26/broken-rake-after-update-to-mountain-lion/">Sébastien Han</a> for getting me out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Encoding Schemes]]></title>
    <link href="http://baddotrobot.com/blog/2012/06/11/http-encoding-schemes/"/>
    <updated>2012-06-11T18:06:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/06/11/http-encoding-schemes</id>
    <content type="html"><![CDATA[<p>What's the difference between URL Encoding and Form URL Encoding?</p>

<!-- more -->


<h2>URL Encoding</h2>

<p>Sometimes refered to as <a href="http://en.wikipedia.org/wiki/Percent-encoding">Percent Encoding</a>, this scheme is intended to encode non-ASCII characters consistently in URLs. For example, characters like <code>#</code> have special meaning in a URL and would need to be converted to avoid problems. The scheme is recognisable by the replacement of characters with a percentage value. For example, the space character gets replaced by <code>%20</code>.</p>

<p>In Java, you can create an encoded URL using</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">URI</span><span class="o">(</span><span class="s">&quot;http&quot;</span><span class="o">,</span> <span class="s">&quot;baddotrobot.com&quot;</span><span class="o">,</span> <span class="s">&quot;/cheese sandwich&quot;</span><span class="o">).</span><span class="na">toURL</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which in this case produces</p>

<pre><code>http:baddotrobot.com#/cheese%20sandwich
</code></pre>

<h2>Form URL Encoding</h2>

<p>Refered to by the <code>application/x-www-form-urlencoded</code> mime-type. This scheme was based on an early version of URL Encoding but at some point diverged. For example, the space character gets replaced by the <code>+</code> rather than <code>%20</code>. It's typically used for encoding <code>POST</code> message content by HTML forms.</p>

<p>For example, a HTML form with <code>name</code> and <code>address</code> would send over the following.</p>

<pre><code>POST http://baddotrobot.com/ HTTP/1.1
Content-Type: application/x-www-form-urlencoded

name=bad.robot&amp;address=the+land+of+make+believe
</code></pre>

<p>Use the unhelpfully named class <code>URLEncoder</code> in Java</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">URLEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Base64 Encoding</h2>

<p>Another one to be aware of, this is a basic encoding used by various protocols related to HTTP. For example, basic authentication is supported by adding a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8">Authorization</a> header with base 64 encoded username and password; you'd do something like the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">header</span><span class="o">(</span><span class="s">&quot;Authorization&quot;</span><span class="o">,</span> <span class="s">&quot;Basic &quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="n">sun</span><span class="o">.</span><span class="na">misc</span><span class="o">.</span><span class="na">Base64Encoder</span><span class="o">().</span><span class="na">encode</span><span class="o">(</span><span class="s">&quot;username:password&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which, for example, could be used to send the following HTTP message</p>

<pre><code>GET /login HTTP/1.1
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Should be Simple]]></title>
    <link href="http://baddotrobot.com/blog/2012/06/10/http-simple/"/>
    <updated>2012-06-10T10:06:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/06/10/http-simple</id>
    <content type="html"><![CDATA[<p>Apache's HTTP client libraries (version 4.x has a very different API than 3.x) are fairly involved to configure and require a lot of boilerplate code. Making a simple HTTP GET request usually ends up with way too many lines of code. Working with HTTP should be simple, so I've been working on a library offering a straight forward API with sensible defaults. Typically, you'll make HTTP requests with just one line of code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">anApacheClient</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://baddotrobot.com&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!-- more -->


<h2>The API</h2>

<p>The library, <a href="https://github.com/tobyweston/simple-http">simple-http</a>, provides an implementation agnostic API. It ships with support for Apache's HTTP client 4.x but can be extended to use any underlying HTTP client library without changes to the API. It's essentially a builder ontop of the Apache library. You configure your client in a builder style then hit the HTTP verbs. For example.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">anApacheClient</span><span class="o">()&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;.</span><span class="na">with</span><span class="o">(</span><span class="n">httpTimeout</span><span class="o">(</span><span class="n">seconds</span><span class="o">(</span><span class="mi">30</span><span class="o">)))</span>
</span><span class='line'><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="n">proxy</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://proxy.com:8999&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://baddotrobot.com&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="n">headers</span><span class="o">(</span>
</span><span class='line'>        <span class="n">header</span><span class="o">(</span><span class="s">&quot;Accept&quot;</span><span class="o">,</span> <span class="s">&quot;text/html&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's supposed to be so simple, it's self explanatory. If it's not, <a href="https://twitter.com/#!/jamanifin">let me know</a>. The starting point is just <code>HttpClients.anApacheClient()</code>.</p>

<h2>Separation of Concerns</h2>

<p>First and foremost, <a href="https://github.com/tobyweston/simple-http">simple-http</a> helps with separation of concern. It provides a basic <code>HttpClient</code> interface which you can easily mock in your code to assert your components send messages but not concern yourself with raw HTTP. It provides the anti-corruption layer between your application and HTTP. You depend on the <a href="https://github.com/tobyweston/simple-http">simple-http</a> interfaces and not Apache's implementations. In that way, your application's interactions with HTTP are in terms of the <em>HTTP verbs</em> and not Apache's technical details.</p>

<h2>Configuration</h2>

<p>Secondarily, the library provides a fluent, straight-forward interface to instantiate and use a HTTP client. If you need special configuration, that's fine but as it comes sensible defaults, for the most part all you'll need to do is new it up. For example, to create a HTTP client which trusts self signed certificates, do the following.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpClient</span> <span class="n">http</span> <span class="o">=</span> <span class="n">anApacheClient</span><span class="o">().</span><span class="na">withTrustingSsl</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Regular SSL authentication is straight forward too, just add a username and password to your client.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HttpClient</span> <span class="n">http</span> <span class="o">=</span> <span class="n">anApacheClient</span><span class="o">().</span><span class="na">with</span><span class="o">(</span><span class="s">&quot;bobby brown&quot;</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Helping you Test</h2>

<p>As <a href="https://github.com/tobyweston/simple-http">simple-http</a> ships with a bunch of <code>Matcher</code>s, it's easy to make assertions or set expectations. For a simple case, compare the following.</p>

<p>Using Apache directly, you might write something like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">apacheResponse</span><span class="o">.</span><span class="na">getStatusLine</span><span class="o">().</span><span class="na">getStatusCode</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="mi">200</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which, when it fails presents you with the following.</p>

<pre><code>java.lang.AssertionError:
Expected: is &lt;200&gt;
     got: &lt;404&gt;
</code></pre>

<p>With <a href="https://github.com/tobyweston/simple-http">simple-http</a>, you write.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">has</span><span class="o">(</span><span class="n">status</span><span class="o">(</span><span class="mi">200</span><span class="o">)));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>which is much more helpful when it fails, showing the response's status code, message, content and headers.</p>

<pre><code>java.lang.AssertionError:
Expected: a HttpMessage with status code &lt;200&gt;
     got: &lt;DefaultHttpResponse{statusCode=404, statusMessage='Not Found', content='{ "message", "not found" }', headers='SimpleHeaders{headers=[SimpleHeader{name='Content-Type', value='application/json'}]}'}&gt;
</code></pre>

<p>Of course, you can enrich the assertions, for example.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">allOf</span><span class="o">(</span><span class="n">has</span><span class="o">(</span><span class="n">status</span><span class="o">(</span><span class="mi">200</span><span class="o">)),</span> <span class="n">has</span><span class="o">(</span><span class="n">headerWithValue</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="n">containsString</span><span class="o">(</span><span class="s">&quot;json&quot;</span><span class="o">)))));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>or assert against the message body, for example.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">has</span><span class="o">(</span><span class="n">content</span><span class="o">(</span><span class="n">not</span><span class="o">(</span><span class="n">containsString</span><span class="o">(</span><span class="s">&quot;\&quot;error\&quot;&quot;</span><span class="o">)))));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or use them in an expectation, for example using <a href="http://jmock.org/">JMock</a> below, we expect a HTTP <code>GET</code> to the URL <a href="http://acme.com/stock">http://acme.com/stock</a> when we call the method <code>inventoryCount()</code>.</p>

<p>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">anExample</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">MalformedURLException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">HttpClient</span> <span class="n">http</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">mock</span><span class="o">(</span><span class="n">HttpClient</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span> <span class="o">{{</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">http</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://acme.com/stock&quot;</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">headers</span><span class="o">(</span><span class="n">header</span><span class="o">(</span><span class="s">&quot;Accept&quot;</span><span class="o">,</span> <span class="s">&quot;application/json&quot;</span><span class="o">))));</span> <span class="n">will</span><span class="o">(</span><span class="n">returnValue</span><span class="o">(...));</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}});</span>
</span><span class='line'><span class="k">new</span> <span class="nf">StockRoom</span><span class="o">(</span><span class="n">http</span><span class="o">).</span><span class="na">inventoryCount</span><span class="o">();</span>
</span><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">assertIsSatisfied</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Or here where we expect a HTTP <code>POST</code> to submit a URL form encoded body to add some stock. In the example, the form parameter we're expecting should look like <code>stock=%7Bsome%3A+json+message%7D</code>. Notice how <a href="http://robotooling.com/maven/">bad.robot.repo</a> avoids this complexity.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">anotherExample</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span> <span class="o">{{</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">http</span><span class="o">).</span><span class="na">post</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="s">&quot;http://acme.com/stock&quot;</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">post</span><span class="o">(</span><span class="n">content</span><span class="o">(</span><span class="n">params</span><span class="o">(</span><span class="s">&quot;stock&quot;</span><span class="o">,</span> <span class="s">&quot;{some: json message}&quot;</span><span class="o">).</span><span class="na">asString</span><span class="o">()))));</span>
</span><span class='line'><span class="o">}});</span>
</span><span class='line'><span class="k">new</span> <span class="nf">StockRoom</span><span class="o">(</span><span class="n">http</span><span class="o">).</span><span class="na">addStock</span><span class="o">(...);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Download</h2>

<p>You can download from the <a href="http://robotooling.com/maven/">bad.robot.repo</a> Maven repository or get the source from <a href="https://github.com/tobyweston/simple-http">Github</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;repositories&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>repository<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>id<span class="ni">&amp;gt;</span>bad.robot<span class="ni">&amp;lt;</span>/id<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>name<span class="ni">&amp;gt;</span>bad.robot repository for robotooling<span class="ni">&amp;lt;</span>/name<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>url<span class="ni">&amp;gt;</span>http://www.robotooling.com/maven/<span class="ni">&amp;lt;</span>/url<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/repository<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/repositories&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;dependency&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>bad.robot<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>simple-http<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>1.0-SNAPSHOT<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Enjoy and <a href="https://twitter.com/#!/jamanifin">let me know</a> how you get on.</p>
]]></content>
  </entry>
  
</feed>
