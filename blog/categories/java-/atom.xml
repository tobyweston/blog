<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java, | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/java-/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2019-10-30T13:59:29+00:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Easily Deploy Java to Debian]]></title>
    <link href="http://baddotrobot.com/blog/2019/09/02/deploy-java-to-debian/"/>
    <updated>2019-09-02T09:06:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2019/09/02/deploy-java-to-debian</id>
    <content type="html"><![CDATA[<p>Level up the way you distribute your Java/Scala/Kotlin applications by packaging them as <code>.deb</code> files and deploying via <code>apt</code>.</p>

<!-- more -->


<h2>Approach</h2>

<p>The basic approach:</p>

<ol>
<li>Create a <code>.deb</code> package using <code>sbt</code> and the excellent <code>sbt-native-packager</code></li>
<li>Create your own Debian repository, add your packages and then serve them over HTTP</li>
<li>Tell your customers where your repository is hosted</li>
<li>Profit</li>
</ol>


<p>This post looks at the first step, creating the <code>.deb</code> package using the <code>sbt-native-packager</code> plugin. In the <a href="/blog/2019/09/03/create-debian-repositories">next post</a>, we'll look at how setup your own <a href="https://wiki.debian.org/DebianRepository">debian repository</a> so users can install and upgrade your software via <code>apt-get</code> to popular Linux distros like Debian and Ubuntu.</p>

<p>Thanks and appreciation to <a href="https://github.com/muuki88">@muuki88</a> and the project maintainers for <code>sbt-native-manager</code>, it's a seriously useful piece of software.</p>

<h2>Packaging</h2>

<p>The <a href="https://www.scala-sbt.org/sbt-native-packager/index.html"><code>sbt-native-packager</code></a> plugin can create platform specific distributions for any <code>sbt</code> project. It can create a simple zip bundle for your application (the <code>universal</code> package), tarballs, rpms, Mac dmgs, Windows MSIs, Docker images and, the one we're interested in, <code>.deb</code> files. Debian and derivatives like Ubuntu use this package format with <code>dpkg</code> and <code>apt</code> as the standard way to install and manage software. If you want to make it easy for Linux user's to get hold of your software, this is the way to do it.</p>

<h3>Native Packager Core Concepts</h3>

<p>The native packager takes care of packaging, the act of putting a list of <em>mappings</em> (source file to install target path) into the chosen package format (zip, rpm, etc.). Each <a href="https://www.scala-sbt.org/sbt-native-packager/formats/index.html">packaging format</a> you use will expect the package specific files in a specific folder location in your source. For example, the Universal plugin will look in <code>src\universal</code> for files to add to the zip. Debian packaging will look for <code>src\debian</code>.</p>

<p>You'll need to read up a little on how to use the plugin, see <a href="https://www.scala-sbt.org/sbt-native-packager/formats/debian.html">Debian specific instructions</a> but the core concepts include:</p>

<ol>
<li><a href="https://www.scala-sbt.org/sbt-native-packager/introduction.html#format-plugins">Packaging format plugins</a> - <em>how</em> an application is packaged; universal, linux, debian, rpm, docker, windows etc</li>
<li><a href="https://www.scala-sbt.org/sbt-native-packager/introduction.html#archetype-plugins">Archetype plugins</a> - <em>what's</em> packaged (predefined configurations); java application, java server application, system loaders etc</li>
<li><a href="https://www.scala-sbt.org/sbt-native-packager/introduction.html#mappings">Mappings</a> map source files to target system locations</li>
</ol>


<p>The native packager uses <a href="https://www.scala-sbt.org/sbt-native-packager/archetypes/index.html">Project Arcetypes</a> like the <a href="https://www.scala-sbt.org/sbt-native-packager/archetypes/java_app/index.html">Java CLI Application Archetype</a> or <a href="https://www.scala-sbt.org/sbt-native-packager/archetypes/java_server/index.html">Java Server Application Archetype</a> to add additional files to the mappings enriching the created package. They donâ€™t provide any new features per se.</p>

<h3>Running as a Service</h3>

<p>One of the many awesome features of the packager is that it can set your application up as a service on the target system. For example, if you want to start your application using <code>systemd</code>, just add a <code>enablePlugins(SystemdPlugin)</code> line to your build. The OS will take care of everything else, even restarting your application should it crash.</p>

<p>The native packagers doesn't provide application lifecyle management however. Custom start/stop scripts, PID management, etc. are not part of native packager.</p>

<h3>Extras</h3>

<p>For some additional nice to haves, you might consider adding <code>man</code> pages (with <code>ronn</code>), creating a "fat" JAR (with <a href="https://github.com/sbt/sbt-assembly"><code>sbt-assembly</code></a> plugin) and stripping unused Scala library classes with ProGuard.</p>

<h2>Deploying Debian Repository</h2>

<p>The native packager doesn't take care of deployment. You use it to create your <code>.deb</code> package but what you do with it is down to you. The obvious choice is to deploy it to a Debian repository for your users to download via <code>apt</code>. Read the <a href="/blog/2019/09/03/create-debian-repositories">next post</a> to find out how.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Interfaces in Java 8]]></title>
    <link href="http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8/"/>
    <updated>2014-04-07T21:33:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8</id>
    <content type="html"><![CDATA[<p>Java 8 treats lambdas as an instance of an interface type. It formalises this into something it calls "functional interfaces". A functional interface is just an interface with a single method. Java calls the method a "functional method" but the name "single abstract method" or SAM is often used. All the existing single method interfaces like <code>Runnable</code> and <code>Callable</code> in the JDK are now functional interfaces and lambdas can be used anywhere a single abstract method interface is used.</p>

<p>Let's run through the basic syntax.</p>

<!-- more -->


<h2>@FunctionalInterface</h2>

<p>Oracle have introduced a new annotation <code>@FunctionalInterface</code> to mark an interface as such. It's basically to communicate intent but also allows the compiler to do some additional checks.</p>

<p>For example, this interface compiles,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>but when you indicate that it should be a <em>functional interface</em></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="nd">@FunctionalInterface</span> <span class="c1">// &amp;lt;- error here</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The compiler will raise an error as there is no method. It says that "Example is not a functional interface" as "no abstract method was found". It'll also error if we try and add a second method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">illegal</span><span class="o">();</span>    <span class="c1">// &amp;lt;- error here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This time it's saying "multiple, non-overriding abstract methods were found". Functional interfaces can have only <strong>one</strong> method.</p>

<h2>Extension</h2>

<p>What about the case of an interfaces that extends another interfaces?</p>

<p>Let's create a new functional interface called <code>A</code> and another called <code>B</code>. <code>B</code> extends <code>A</code>. <code>B</code> is still "functional". It inherits the parents <code>apply</code> method as you'd expect.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you wanted to make this clearer, you can also override the functional method from the parent.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We can verify it works as a functional interface if we use it as a lambda. So I'll implement a little method to show that a lambda can be assigned to a type of <code>A</code> and a type of <code>B</code>. The implementation will just print out "A" or "B".</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can't add a new abstract method to the extending interface though, as the resulting type would have two abstract methods and the compiler will error.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">illegal</span><span class="o">();</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>    <span class="c1">// &amp;lt;- error</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In both cases, you can override methods from <code>Object</code> without causing problems. You can also add default methods (also new to Java 8). As you'd probably expect, it doesn't make sense to try and mark an abstract class as a functional interface.</p>

<h2>Summary</h2>

<p>An important point to take away was the idea that any place a functional interface is used, you can now use lambdas. Lambdas can be used in-lieu of anonymous implementations of the functional interface. Using a lambda instead of the anonymous class may seem like syntactic sugar, but they're actually quiet different. See the <a href="/blog/2014/04/08/classes-vs-functions">Classes vs. Functions</a> post for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method References in Java 8]]></title>
    <link href="http://baddotrobot.com/blog/2014/02/18/method-references-in-java8/"/>
    <updated>2014-02-18T21:33:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/02/18/method-references-in-java8</id>
    <content type="html"><![CDATA[<p>Java 8 brings with it method references; shortcuts that you can use anywhere you would use a lambda. The <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Oracle docs</a> describe four types of method reference but do such a poor job of describing them that I felt compelled to describe them myself.</p>

<!-- more -->


<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Oracle describe the four kinds of method reference</a> as follows.</p>

<table>
<thead>
<tr>
<th> Kind                                                                           </th>
<th> Example                                </th>
</tr>
</thead>
<tbody>
<tr>
<td> Reference to a static method                                                   </td>
<td> <code>ContainingClass::staticMethodName</code></td>
</tr>
<tr>
<td> Reference to an instance method of a particular object                         </td>
<td> <code>ContainingObject::instanceMethodName</code></td>
</tr>
<tr>
<td> Reference to an instance method of an arbitrary object of a particular type    </td>
<td> <code>ContainingType::methodName</code></td>
</tr>
<tr>
<td> Reference to a constructor                                                     </td>
<td> <code>ClassName::new</code></td>
</tr>
</tbody>
</table>


<p>Static and constructor references are straight forward but it's their description of instance method references that muddies the waters. What on earth is an instance method of an arbitrary object of a particular type? Aren't all objects <em>of a</em> particular type?  Why is it important that the object is <em>arbitrary</em>?</p>

<h2>What they should have written</h2>

<p>It's talking about four types of method reference; constructor references, static method references, instance method references and what it calls instance method references of a particular type. The last one is really just another kind of instance method reference.</p>

<p>What they should have written is this.</p>

<table>
<thead>
<tr>
<th> Kind                                                                 </th>
<th> Syntax                           </th>
<th> Example                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> Reference to a static method                                         </td>
<td> <code>Class::staticMethodName</code>        </td>
<td> <code>String::valueOf</code></td>
</tr>
<tr>
<td> Reference to an instance method of a specific object                 </td>
<td> <code>object::instanceMethodName</code>     </td>
<td> <code>x::toString</code></td>
</tr>
<tr>
<td> Reference to an instance method of a arbitrary object supplied later </td>
<td> <code>Class::instanceMethodName</code>      </td>
<td> <code>String::toString</code></td>
</tr>
<tr>
<td> Reference to a constructor                                           </td>
<td> <code>ClassName::new</code>                 </td>
<td> <code>String::new</code></td>
</tr>
</tbody>
</table>


<p>or as lambdas</p>

<table>
<thead>
<tr>
<th> Kind                                                                 </th>
<th> Syntax                           </th>
<th> As Lambda                  </th>
</tr>
</thead>
<tbody>
<tr>
<td> Reference to a static method                                         </td>
<td> <code>Class::staticMethodName</code>        </td>
<td> <code>(s) -&gt; String.valueOf(s)</code></td>
</tr>
<tr>
<td> Reference to an instance method of a specific object                 </td>
<td> <code>object::instanceMethodName</code>     </td>
<td> <code>() -&gt; "hello".toString()</code> <strong>â€ </strong></td>
</tr>
<tr>
<td> Reference to an instance method of a arbitrary object supplied later </td>
<td> <code>Class::instanceMethodName</code>      </td>
<td> <code>(s) -&gt; s.toString()</code></td>
</tr>
<tr>
<td> Reference to a constructor                                           </td>
<td> <code>ClassName::new</code>                 </td>
<td> <code>() -&gt; new String()</code></td>
</tr>
</tbody>
</table>


<p>I found their description of the two confusing. I prefer to think of the first as an instance method of a <em>specific</em> object known ahead of time and the second as an instance method of an arbitrary object that will be <em>supplied</em> later. Interestingly, this means the first is a <em>closure</em> and the second is a <em>lambda</em>. One is <em>bound</em> and the other <em>unbound</em>.</p>

<p>The distinction between a method reference that closes over something (a closure) and one that doesn't (a lambda) may be a bit academic but at least it's a more formal definition than Oracle's unhelpful description. If you're interested in the difference between a closure and a lambda, check out my <a href="/blog/2010/07/13/lambdas-vs-closures">previous article</a>.</p>

<h2>The "closure" method reference</h2>

<p>The example above (<code>x::toString</code>) is an instance method reference using a closure. It creates a lambda that will call the <code>toString</code> method on the instance <code>x</code>.</p>

<pre><code class="java">public void example() {
    String x = "hello";
    function(x::toString);
}
</code></pre>

<p>where the signature of <code>function</code> looks like this</p>

<pre><code class="java">public static String function(Supplier&lt;String&gt; supplier) {
    return supplier.get();
}
</code></pre>

<p>The <code>Supplier</code> interface must provide a string value (the <code>get</code> call) and the only way it can do that is if it's been supplied to it on construction. It's equivalent to</p>

<pre><code class="java">public void example() {
    String x = "hello";
    function(() -&gt; x.toString());
}
</code></pre>

<p>Notice here that the lambda has no arguments (it uses the 'hamburger' symbol). This shows that the value of <code>x</code> isn't available in the lambda's local scope and so can only be available from outside it's scope. It's a closure because must close over <code>x</code>.</p>

<p>The anonymous class equivalent really makes this obvious, it looks like this.</p>

<pre><code class="java">public void example() {
    String x = "";
    function(new Supplier&lt;String&gt;() {
        @Override
        public String get() {
            return x.toString(); // &lt;- closes over 'x'
        }
    });
}
</code></pre>

<p>All three of these are equivalent. Compare this to the lambda variation of an instance method reference where it doesn't have it's argument explicitly passed in from an outside scope.</p>

<h2>The "lambda" method reference</h2>

<p>The other example (<code>String::toString</code>) is similar to the previous one, it calls the <code>toString</code> method of a string only this time, the string is supplied to the function that's making use of the lambda and not passed in from an outside scope.</p>

<pre><code class="java">public void lambdaExample() {
    function("value", String::toString);
}
</code></pre>

<p>The <code>String</code> part looks like it's referring to a class but it's actually referencing an instance. It's confusing, I know but to see things more clearly, we need to see the function that's making use of the lambda. It looks like this.</p>

<pre><code class="java">public static String function(String value, Function&lt;String, String&gt; function) {
    return function.apply(value);
}
</code></pre>

<p>So, the string value is passed directly to the function, it would look like this as a fully qualified lambda.</p>

<pre><code class="java">public void lambdaExample() {
    function("value", x -&gt; x.toString());
}
</code></pre>

<p>If you expand it fully to an anonymous interface, it looks like this. The <code>x</code> parameter is made available and not closed over. It's a lambda rather than a closure.</p>

<pre><code class="java">public void lambdaExample() {
    function("value", new Function&lt;String, String&gt;() {
      @Override
      public String apply(String x) {   // &lt;- takes the argument as a parameter, doesn't need to close over it
        return x.toString();
      }
    });
}
</code></pre>

<h2>Summary</h2>

<p>The difference between the two types of instance method reference is interesting but basically academic. Sometimes, you'll need to pass something in, other times, the usage of the lambda will supply it for you. My gripe is with Oracle's documentation. They make a big deal out of the distinction but fail to describe it in an easily understandable way. It's <em>the</em> canonical reference material but it's just plain confusing. It feels like interns are producing this stuff.</p>

<p>If you liked this post, you might like my course on <a href="https://www.udemy.com/whats-new-in-java-8/">Udemy</a>. For a limited time only, get <a href="https://www.udemy.com/whats-new-in-java-8/?couponCode=BLOG10">10% off with this coupon</a>!</p>

<h2>Caveat</h2>

<p><strong>â€ </strong> There's a caveat here; the example isn't a closure, so my comment about that being a distinguishing feature isn't quiet true. If, as in the later examples, it closes over some <code>x</code> (as is more likely), great. If however, you use a literal value (as in my starred example), it wont close over the term <code>x</code> so it's back to being a lambda. So it oesn't <em>have</em> to be a closure, it's just more than likely to be one. For example;</p>

<pre><code class="java This time the "reference to an instance method of a arbitrary object supplied later" is a Lambda, not a closure">public void example() {
    // String x = "hello";
    function(() -&gt; "hello".toString());
}
</code></pre>

<p><a href="http://amzn.to/1M0w9jZ" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img itemprop="image" class="right" src="http://ws-eu.amazon-adsystem.com/widgets/q?<em>encoding=UTF8&amp;ASIN=1508734178&amp;Format=</em>SL160_&amp;ID=AsinImage&amp;MarketPlace=GB&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=baddotrobotco-21" title="Learn Scala for Java Developers" ></a>
<a href="http://leanpub.com/whatsnewjava8" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;"><img itemprop="image" class="right" src="http://titlepages.leanpub.com/whatsnewjava8/bookpage" width="140" height="180" title="Learn Scala for Java Developers" ></a></p>

<h2>Recommended Reading</h2>

<ul>
<li><a href="http://leanpub.com/whatsnewjava8" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">What's New in Java 8</a>, Toby Weston</li>
<li><a href="http://amzn.to/1M0w9jZ" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Learn Scala for Java Developers</a>, Toby Weston</li>
</ul>


<p>&nbsp;
&nbsp;
&nbsp;</p>
]]></content>
  </entry>
  
</feed>
