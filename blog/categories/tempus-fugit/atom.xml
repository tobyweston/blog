<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tempus-fugit | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/tempus-fugit/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2014-11-24T20:10:33+00:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Calculate the Optimum Number of Threads]]></title>
    <link href="http://baddotrobot.com/blog/2013/06/01/optimum-number-of-threads/"/>
    <updated>2013-06-01T20:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/06/01/optimum-number-of-threads</id>
    <content type="html"><![CDATA[<p>Working out the theoretical optimal number of threads you should use for your application is fairly straightforward. You do, however, need to understand your applications runtime characteristics. Is it mostly occupied with CPU intensive work or is it mostly waiting for IO?</p>

<p>In this post, we look at how to work out a good thread pool size for your CPU and IO based tasks.</p>

<!-- more -->


<h2>CPU Bound Tasks</h2>

<p>For CPU bound tasks, Goetz (2002, 2006) recommends</p>

<pre><code>threads = number of CPUs + 1
</code></pre>

<p>Which is intuitive as if a CPU is being kept busy, we can't do more work than the number of CPUs. Goetz purports that the additional CPU has been shown as an improvement over omitting it (2006), but others don't agree and suggest just the number of CPUs is optimal.</p>

<h2>IO Bound Tasks</h2>

<p>Working out the optimal number for IO bound tasks is less obvious. During an IO bound task, a CPU will be left idle (waiting or blocking). This idle time can be better used in initiating another IO bound request.</p>

<p>Subramaniam (2011, p.31) describes the optimal number of threads in terms of the following formula.</p>

<pre><code>threads = number of cores /  (1 – blocking coefficient)
</code></pre>

<p><img src="../../../../../images/optimal-threads/subramaniam.gif"></p>

<p>And Goetz (2002) describes the optimal number of threads in terms of the following.</p>

<pre><code>threads = number of cores * (1 + wait time / service time)
</code></pre>

<p><img src="../../../../../images/optimal-threads/goetz-1.gif"></p>

<p>Where we can think of <code>wait time / service time</code> as a measure of how contended the task is.</p>

<h2>Goetz and Subramaniam Agree</h2>

<p>Just out of interest, we can show that both IO bound formulas are equivalent. Starting with Goetz’s formula, we assert that <code>w+s=1</code> and remove the service time (<code>s</code>) giving the following</p>

<p><img src="../../../../../images/optimal-threads/goetz-2.gif"></p>

<p>We can continue by multiplying both sides by <code>1-w</code> reducing the right hand side to <code>c</code> before reversing the operation and revealing Subramaniam’s expression.</p>

<p><img src="../../../../../images/optimal-threads/goetz-3.gif"></p>

<p><img src="../../../../../images/optimal-threads/goetz-4.gif"></p>

<p><img src="../../../../../images/optimal-threads/subramaniam.gif"></p>

<p>This post originally appeared on my concurrency library <a href="http://tempusfugitlibrary.org/">tempus-fugit</a>'s project site.</p>

<h2>References</h2>

<ul>
<li>Goetz, B. 2002. <a href="http://www.ibm.com/developerworks/java/library/j-jtp0730/index.html">Java theory and practice: Thread pools and work queues</a>. IBM DeveloperWorks.</li>
<li>Goetz, B. Peierls, T. Bloch, J. Bowbeer, J. Holmes, D. and Lea, D. 2006. <a href="http://amzn.to/NrXQPZ">Java Concurrency in Practice</a>. 1st Edition. Addison Wesley.</li>
<li>Subramaniam, V. 2011. <a href="http://amzn.to/NrXXuI">Programming Concurrency on the JVM</a>. 1st Edition. Pragmatic Bookshelf.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tempus-fugit 1.1 released]]></title>
    <link href="http://baddotrobot.com/blog/2011/04/13/tempus-fugit-1.1-released/"/>
    <updated>2011-04-13T00:00:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2011/04/13/tempus-fugit-1.1-released</id>
    <content type="html"><![CDATA[<p>Yesterday, I released the 1.1 version of my micro-library <a href="http://tempusfugitlibrary.org/">tempus-fugit</a>. From the project's website</p>

<blockquote><p>The tempus-fugit library is a small collection of classes and interfaces capturing common abstractions useful when writing concurrent and time sensitive code.</p></blockquote>

<p>It's now available from the <a href="http://repo2.maven.org/maven2/com/google/code/tempus-fugit/tempus-fugit/">Maven Central</a>
repository having had a bad experience with <a href="http://repo2.maven.org/maven2/com/google/code/tempus-fugit/tempus-fugit/">java.net</a>
since their migration (and no longer being able to publish, see this <a href="http://java.net/projects/maven-repository/lists/users/archive/2011-03/message/0">post</a>
and <a href="http://java.net/projects/wagon/lists/users/archive/2011-02/message/0">another</a> if you're interested).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambdas vs. Closures]]></title>
    <link href="http://baddotrobot.com/blog/2010/07/13/lambdas-vs-closures/"/>
    <updated>2010-07-13T00:00:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2010/07/13/lambdas-vs-closures</id>
    <content type="html"><![CDATA[<p><img class="right" src="../../../../../images/lambda.png" title="'The Lambda greek character'" ></p>

<p>When writing Java in a functional style, things tend to get very verbose. We often create a bunch of anonymous implementation fragments and pass them around akin to a <em>function</em> in functional languages. These fragments often get called closures or lambdas, but what's the difference between the two terms?</p>

<!-- more -->


<p>Lets take the <code>WaitFor</code> class from <a href="http://tempusfugitlibrary.org/">tempus-fugit</a> as an example where we pass an anonymous instance as a parameter to the <code>waitOrTimeout</code> method. We define a function here that will be called at some later point by <code>waitOrTimeout</code>. We can think of this as <em>lazy invocation</em>. Java isn't a functional language but we've simulated at least one characteristic of a functional language using <code>WaitFor</code> and an anonymous function. We've created a <em>higher order function</em> but not necessarily a <em>pure function</em> (<a href="/blog/2012/04/03/scala-as-a-functional-oo-hybrid/">1</a>).</p>

<p>For example,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="n">WaitFor</span><span class="o">.</span><span class="na">waitOrTimeout</span><span class="o">(</span><span class="k">new</span> <span class="n">Condition</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSatisfied</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">server</span><span class="o">.</span><span class="na">isRunning</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">},</span> <span class="n">timeout</span><span class="o">(</span><span class="n">seconds</span><span class="o">(</span><span class="mi">5</span><span class="o">)));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The anonymous class implementing <code>Condition</code> is evaluated by the method <code>waitOrTimeout</code> (which will call the <code>isSatisfied</code>) method.</p>

<p>The recent shift to this functional style has lead to eager anticipation of JDK7 and the promise of closures. More accurately however, it's the inclusion of <em>lambdas</em> that we're waiting for, not <em>closures</em>. Closures have in fact been available in Java since 1.1, so what's the difference?</p>

<h2>Lambs to the Slaughter</h2>

<p>So, we want to be able to define anonymous functions on the fly, the result of the function is purely dependent on it's arguments and this is called a lambda. Those functions that depend on external values (not just it's arguments) are when closures come into it. The act of binding those external values to the anonymous function is referred to as <em>closure</em>. After closure, when all variables have been captured and bound to the function, the term is closed.</p>

<p>For example, the code snippet above will return a new <code>Condition</code> instance on each invocation. Because it will bind the variable server to the anonymous function, it will return a closure. To put it another way, we'll extract the anonymous part to a method to explicitly create a new instance, such</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Condition</span> <span class="nf">isRunning</span><span class="o">(</span><span class="kd">final</span> <span class="n">Server</span> <span class="n">server</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="nf">Condition</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSatisfied</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">server</span><span class="o">.</span><span class="na">isRunning</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This should make it more obvious that the variable outside the scope of the anonymous <code>Condition</code> is required (the <code>server</code> variable), each call to the <code>isRunning</code> method will return a closure over the argument, the instance of which captures the value of server. Java implements the closure by passing a reference to the outer scoped (lets say <code>Foo.class</code>) to the anonymous class (<code>Foo$1.class</code>). The <code>access$000</code> call accesses the appropriate private field in the outer class directly in the bytecode</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Foo</span><span class="n">$1</span> <span class="kd">implements</span> <span class="n">Condition</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">final</span> <span class="n">Foo</span> <span class="k">this</span><span class="n">$0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Foo$1</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="n">$0</span> <span class="o">=</span> <span class="n">Foo</span><span class="o">.</span><span class="na">this</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSatisfied</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Foo</span><span class="o">.</span><span class="na">access</span><span class="n">$000</span><span class="o">(</span><span class="n">Foo</span><span class="o">.</span><span class="na">this</span><span class="o">).</span><span class="na">isRunning</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So, if, we have update the example again, this time removing the out of scope variable, we're left with something like this;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Condition</span> <span class="nf">isRunning</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="nf">Condition</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSatisfied</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">// optimistic!</span>
</span><span class='line'>  <span class="o">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then no out of scope variables are required, the term doesn't need to be closed. The anonymous function that is left is effectively a lambda.</p>

<h2>Summary</h2>

<p>A lambda will generally be more efficient that a closure as it <a href="http://mail.openjdk.java.net/pipermail/lambda-dev/2012-November/006867.html">only needs to evaluated once</a>. As a closure closes over something not in it's environment, it has to be evaluated every time it's called.</p>

<p>What JDK7 will (finger's crossed) bring is more explicit, concise way of expressing the same ideas. It will support lambdas as a language feature although I can't quite figure out what the example would look like in those terms. See the <a href="http://cr.openjdk.java.net/%7Emr/lambda/straw-man/">straw man proposal</a> and see if you can figure it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapping Exceptions is Dull]]></title>
    <link href="http://baddotrobot.com/blog/2010/04/25/wrapping-exceptions-is-dull/"/>
    <updated>2010-04-25T00:00:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2010/04/25/wrapping-exceptions-is-dull</id>
    <content type="html"><![CDATA[<p>I'm totally bored of wrapping exceptions in Java,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// do something</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">BoredomException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="c1">// do something else</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's verbose, ugly and has nothing to do with what you're really trying to convey. It's just noise. For example, when using the <em>dreadful</em> Google Data API to access my calendar, I wrapped a couple of underlying Google services to be able to mock. Each service wanted to throw a bunch of Google specific exceptions which I wanted to rethrow as application specific exceptions.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">O</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">CalendarException</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">call</span><span class="o">();</span>  <span class="c1">// the call to the google service</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">CalendarException</span><span class="o">(</span><span class="n">BAD_URL_MESSAGE</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">CalendarException</span><span class="o">(</span><span class="n">IO_EXCEPTION_MESSAGE</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AuthenticationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">CalendarException</span><span class="o">(</span><span class="n">AUTHENTICATION_MESSAGE</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ServiceException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">CalendarException</span><span class="o">(</span><span class="n">SERVICE_EXCEPTION_MESSAGE</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If I didn't delegate like this, every internal call would have to wrap and handle the google exceptions rather than my application specific one. There's no class hierarchy in Google's API here.</p>

<p>As I've done this a few times, I decided to add it to <a href="http://tempusfugitlibrary.org/">tempus-fugit</a> as a <code>ExceptionWrapper</code> class. Using this class, you can wrap a <code>Callable</code> to rethrow any caught exception as some other (including the underlying exception as the <code>cause</code>).</p>

<p>So, in a similar way to the above, the client can ignore any declared
exceptions and just rethrow them in-line. For example,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">wrapAnyException</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Object</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">ServiceException</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// nasty code throwing a bunch of exceptions</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;},</span> <span class="n">with</span><span class="o">(</span><span class="n">CalendarException</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>when this is in-lined further, it hopefully becomes more succinct.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">wrapAnyException</span><span class="o">(</span><span class="n">serviceCall</span><span class="o">(),</span> <span class="n">with</span><span class="o">(</span><span class="n">CalendarException</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This will wrap any exception and rethrow as a new <code>CalendarException</code> to include as the cause any underlying exception. It uses reflection to create the new exception, and forces the syntactically sugary <code>with</code> by taking a <code>WithException</code> as the second parameter.</p>

<p>It's in <a href="http://tempusfugitlibrary.org/">tempus-fugit</a>, let me know if you find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nibbles the Cat & Concurrency]]></title>
    <link href="http://baddotrobot.com/blog/2010/03/19/nibbles-cat/"/>
    <updated>2010-03-19T00:00:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2010/03/19/nibbles-cat</id>
    <content type="html"><![CDATA[<p>I recently introduced a deadlock into our performance monitoring. I inadvertently prevented a statistic collection daemon I wrote from shutting down thanks to some unlucky timing and a bad synchronisation policy. Because the synchronisation that was involved was distributed across a couple of classes (including some external classes) it wasn't obvious where they clashed. It got me thinking more about deadlocks and how many times we <em>actually </em>see them in real systems. In the end, I created a <code>DeadlockDetector</code> class.</p>

<p>I'm talking here about Java level deadlocks and to illustrate the point, poor old <code>Nibbles</code> got himself into quite a pickle. The situation is like this; <code>Nibbles</code> has been abducted and the <code>Kidnapper</code> and <code>Negotiator</code> threads have started a dialogue.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">potentialDeadlock</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="k">new</span> <span class="n">Kidnapper</span><span class="o">().</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'> <span class="k">new</span> <span class="nf">Negotiator</span><span class="o">().</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>However, in the process of negotiation it becomes apparent that the  <code>Kidnapper</code> is unwilling to release poor <code>Nibbles</code> until he has received the <code>Cash</code> and the <code>Negotiator</code> is unwilling to part with the <code>Cash</code> until he has poor <code>Nibbles</code> back in his arms.</p>

<!-- more -->


<p>By synchronising on nibbles below, the  <code>Kidnapper</code> is holding onto him (more specifically his monitor) until the end of the synchronised block. However, within this block the  <code>Kidnapper</code> is trying to take the cash. The access to this method is itself synchronised on the cash, meaning that no one else can access the cash whilst the  <code>Kidnapper</code> is grabbing it. Meanwhile, the <code>Negotiator</code> is synchronising on the cash, holding onto it (or again, more specifically, it's monitor) until the end of the synchronised block then within that block, it requires nibbles. We can start to see the potential for deadlock.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Kidnapper</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">nibbles</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="kd">synchronized</span> <span class="o">(</span><span class="n">cash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">take</span><span class="o">(</span><span class="n">cash</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Negotiator</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="kd">synchronized</span> <span class="o">(</span><span class="n">cash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>     <span class="kd">synchronized</span> <span class="o">(</span><span class="n">nibbles</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">take</span><span class="o">(</span><span class="n">nibbles</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The deadlock detector displays this woeful situation as follows.</p>

<pre><code>Deadlock detected
=================

"Negotiator-Thread-1":
  waiting to lock Monitor of com.google.code.tempusfugit.concurrency.DeadlockDetectorTest$Cat@ce4a8a
  which is held by "Kidnapper-Thread-0"

"Kidnapper-Thread-0":
  waiting to lock Monitor of com.google.code.tempusfugit.concurrency.DeadlockDetectorTest$Cash@7fc8b2
  which is held by "Negotiator-Thread-1"
</code></pre>

<p>If you fire up the example and point jconsole at it, you'll get similar results from the Thread tab. You can see how tempus-fugit tests the <code>DeadlockDetector</code> class <a href="https://github.com/tobyweston/tempus-fugit/blob/master/src/test/java/com/google/code/tempusfugit/concurrency/DeadlockDetectorTest.java">here</a> and to find out more about see the project <a href="http://tempusfugitlibrary.org/documentation/threading/deadlock/">documentation</a>.</p>

<p>Oh and don't worry, <code>Nibbles</code> was released and the <code>Kidnapper</code> arrested in the end.</p>
]]></content>
  </entry>
  
</feed>
