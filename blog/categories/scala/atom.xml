<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2016-08-13T18:53:39+01:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Type Classes in Scala]]></title>
    <link href="http://baddotrobot.com/blog/2016/08/13/type-classes/"/>
    <updated>2016-08-13T18:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2016/08/13/type-classes</id>
    <content type="html"><![CDATA[<p>Type classes provide <a href="http://bit.ly/1kr6C8E#Ad_hoc_polymorphism">ad-hoc inheritance</a> which means that we can use them to create polymorphic functions that can be applied to arguments of different types. This is a fancy way of saying that we can create common behaviour for classes without resorting to traditional (<code>extends</code>) polymorphism.</p>

<p>From the <a href="http://danielwestheide.com/blog/2013/02/06/the-neophytes-guide-to-scala-part-12-type-classes.html">Neophytes Guide</a>, Daniel Westheide describes type classes, slightly paraphrased, as follows.</p>

<!-- more -->


<blockquote><p>A type class <code>C</code> defines behaviour.<br/>
Type <code>T</code> must support behaviour defined in <code>C</code> to be a "member" of <code>C</code>.<br/>
If <code>T</code> is a "member", it isn't inherent to that type (if <code>T</code> has <code>C</code>'s behaviour, it isn't native to that type via <code>extends</code> or otherwise).<br/>
Instead, anyone can supply implementations of <code>C</code> behaviour for type <code>T</code> and this infers that <code>T</code> is a "member" of <code>C</code>.</p></blockquote>

<h2>How to Create Type Classes</h2>

<ol>
<li>Define behaviour <code>C</code> as a trait</li>
<li>Provide default implementations for your types (e.g. <code>T</code> above)</li>
<li>Call the behaviours of <code>C</code> in a common way (optionally extending "members" like <code>T</code> with implicit classes)</li>
</ol>


<h2>Example from the Neophytes Guide</h2>

<blockquote><p>The type class here is <code>NumberLike</code> providing abstract <code>plus</code>, <code>divide</code> and <code>minus</code> behaviours.<br/>
Types <code>Int</code> and <code>Double</code> are "members" of <code>NumberLike</code>.<br/>
<code>Int</code> and <code>Double</code> don't natively have the behaviors of <code>NumberLike</code>.<br/>
Instead, the implementations on the <code>NumberLike</code> object provides them.</p></blockquote>

<h3>Step 1: Define Behaviour (as a trait)</h3>

<p>Notice the paramaterised type <code>[T]</code>.</p>

<p>```scala
object Example {
  trait NumberLike[T] {</p>

<pre><code>def plus(x: T, y: T): T
def divide(x: T, y: Int): T
def minus(x: T, y: T): T
</code></pre>

<p>  }
}
```</p>

<h3>Step 2: Provide Implementations</h3>

<p>Provide some default implementations of your type class trait in its companion object. Usually, these are singletons (<code>object</code>) but could be <code>val</code>s. They are <strong>always</strong> <code>implicit</code>.</p>

<p>```scala
object NumberLike {
  implicit object NumberLikeDouble extends NumberLike[Double] {</p>

<pre><code>def plus(x: Double, y: Double): Double = x + y
def divide(x: Double, y: Int): Double = x / y
def minus(x: Double, y: Double): Double = x - y
</code></pre>

<p>  }</p>

<p>  implicit object NumberLikeInt extends NumberLike[Int] {</p>

<pre><code>def plus(x: Int, y: Int): Int = x + y
def divide(x: Int, y: Int): Int = x / y
def minus(x: Int, y: Int): Int = x - y
</code></pre>

<p>  }
}
```</p>

<h3>Step 3a. Call the Type Class</h3>

<p>The whole point of the pattern is to be able to provide common behaviour to classes without tight coupling or even by modifying them at all. So far, we've created specific behaviours for our classes (like <code>plus</code> above) conforming to our "contract" type class <code>C</code>.</p>

<p>To call that behaviour, we use Scala's <code>implicit</code> semantics to find an appropriate implementation. It binds a concrete type of <code>T</code> (let's say <code>Int</code>) with it's corresponding type class (<code>NumberLikeInt</code>). It means we only need one method for all number-like types.</p>

<p>```scala
object Statistics {
  def mean<a href="numbers:%20Seq[T]">T</a>(implicit number: NumberLike[T]): T = {</p>

<pre><code>number.divide(numbers.reduce(number.plus), numbers.size)
</code></pre>

<p>  }
}
```</p>

<p>So, if an implicit parameter can be found for a given type, Scala will use that implementation. The <code>NumberLikeInt</code> is used below.</p>

<pre><code>scala&gt; println(Statistics.mean(List[Int](1, 2, 3, 6, 8)))
4
</code></pre>

<p>Without an implicit in scope, you'd get an error</p>

<pre><code>Error:(42, 26) could not find implicit value for parameter number: NumberLike[Int]
  println(Statistics.mean(Seq(1, 2, 3, 6, 8)))
</code></pre>

<h4>Context Bounds</h4>

<p>Another way of writing the generic method is to use context bounds (ie, use <code>T: NumberLike</code>).</p>

<p>```scala
object Statistics {
  def mean<a href="numbers:%20Seq[T]">T: NumberLike</a> = {</p>

<pre><code>val number = implicitly[NumberLike[T]]
number.divide(numbers.reduce(number.plus), numbers.size)
</code></pre>

<p>  }
}
```</p>

<h3>Step 3b. Call the Type Class (with an Implicit Class)</h3>

<p>As a simple extension, you can extend "member" types directly using an <code>implicit</code> class. For example, we can add the <code>mean</code> method to any sequence of <code>NumberLike</code>s.</p>

<p>```scala
implicit class SeqNumberOps<a href="numbers:%20Seq[T]">T</a> {
  def mean(implicit number: NumberLike[T]): T = {</p>

<pre><code>number.divide(numbers.reduce(number.plus), numbers.size)
</code></pre>

<p>  }
}
```</p>

<p>and call <code>mean</code> directly.</p>

<p>```scala
import NumberOps</p>

<p>val numbers = List<a href="1,%205,%2032,%2043,%204">Int</a>
println(numbers.mean)
```</p>

<p>or like this for <code>Double</code>.</p>

<p><code>scala
val numbers = List[Double](3.2, 4.2, 3.0, 4.4)
println(numbers.mean)
</code></p>

<h2>Another Example</h2>

<h3>Step 1: Define Behaviour</h3>

<p>A basic "decoder" interface that uses an <code>Either</code> to return a result as either successful or unsuccessful.</p>

<p><code>scala
trait StringDecoder[A] {
  def fromString(string: String): Either[String, A]
}
</code></p>

<h3>Step 2: Provide Implementations</h3>

<p>We could provide an implementation to decode a string to a valid <code>Colour</code> type. Unsupported colours produce a "left" result.</p>

<p>```scala
implicit val colourTypeStringDecoder = new StringDecoder[Colour] {
  def fromString(value: String) = {</p>

<pre><code>val colours = List("red", "green", "yellow")
  if (colours.contains(value)) Right(Colour(value)) 
  else Left(s"$value is not a valid colour, chose one of ${colours.mkString(", ")}")
</code></pre>

<p>  }
}
```</p>

<h3>Step 3. Call the Type Classes</h3>

<p>With an implicit class extending <code>String</code>, any string value can be decoded to a type <code>A</code>.</p>

<p>```scala
object StringSyntax {
  implicit class StringDecoderOps(value: String) {</p>

<pre><code>def decodeTo[A](implicit decoder: StringDecoder[A]) = {
  decoder.fromString(value)
}
</code></pre>

<p>  }
}
```</p>

<p>Then anywhere you have a string and you want to decode it, just go ahead.</p>

<p><code>scala
"red".decodeTo[Colour]      // right
"square".decodeTo[Colour]   // Left(square is not a valid colour, chose one of red, green, yellow)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit Functions in Scala]]></title>
    <link href="http://baddotrobot.com/blog/2015/07/14/scala-implicit-functions/"/>
    <updated>2015-07-14T18:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/07/14/scala-implicit-functions</id>
    <content type="html"><![CDATA[<p>In the <a href="/blog/2015/07/03/scala-implicit-parameters/">previous post</a>, we looked at implicit parameters; parameters that will be automatically passed values annotated as <code>implicit</code>. In this post, we'll take a look at implicit functions and how they can be useful to convert things of one type to things of another.</p>

<!-- more -->


<h2>Implicit Functions</h2>

<p>Implicit functions will be called automatically if the compiler thinks it's a good idea to do so. What that means is that if your code doesn't compile but would, if a call was made to an implicit function, Scala will call that function to make it compile. They're typically used to create <em>implicit conversion functions</em>; single argument functions to automatically convert from one type to another.</p>

<p>For example, the following function allows you to convert a Scala function into a instance of the Java 8 <code>Consumer</code> <a href="/blog/2014/04/07/functional-interfaces-in-java8/">single argument method</a> but still use Scala's concise syntax.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">toConsumer</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;function:%20A%20=&gt;%20Unit&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="k">&gt;:</span> <span class="nc">Consumer</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="n">A</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">accept</span><span class="o">(</span><span class="n">arg</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">function</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can avoid having to write clunky anonymous class instantiation when interfacing with Java and so mimic Java's lambda syntax. So rather than having to use the longhand version like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingJavaForEach</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">(</span><span class="k">new</span> <span class="nc">Consumer</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">&gt;</span><span class="nc">Element</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">override</span> <span class="k">def</span> <span class="n">accept</span><span class="o">(</span><span class="n">element</span><span class="k">:</span> <span class="kt">Element</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You can write this, where we just pass a Scala function to Java's <code>forEach</code> method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingImplicitConversion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">((</span><span class="n">element</span><span class="k">:</span> <span class="kt">Element</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The argument to <code>forEach</code> is actually a function of type <code>Element =&gt; Unit</code>. Scala recognises that the <code>toConsumer</code> method could convert this into a <code>Consumer[Element]</code> and does so implicitly.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingImplicitConversion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">function</span><span class="k">:</span> <span class="kt">ObserverS</span> <span class="o">=&gt;</span> <span class="nc">Unit</span> <span class="k">=</span> <span class="o">(</span><span class="n">observer</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">(</span><span class="n">function</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Which is basically short-hand for this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingImplicitConversion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">function</span><span class="k">:</span> <span class="kt">ObserverS</span> <span class="o">=&gt;</span> <span class="nc">Unit</span> <span class="k">=</span> <span class="o">(</span><span class="n">observer</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">status</span><span class="o">)</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">(</span><span class="n">toConsumer</span><span class="o">(</span><span class="n">function</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Another Example</h2>

<p>If we have a button on we web page that we'd like to find using <a href="http://www.seleniumhq.org/projects/webdriver/">Web Driver</a>, we'd normally write something like the following, using a "locator" to locate it by <code>id</code> attribute.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">button</span><span class="k">:</span> <span class="kt">WebElement</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">findElement</span><span class="o">(</span><span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;save-button&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">click</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It doesn't take into account that the element might not be there when we call it (for example, when our UI uses ajax and adds the button asynchronously) and it's also a bit verbose. We can use an implicit function to address both of these issues.</p>

<p>The fragment below uses the <a href="https://selenium.googlecode.com/git/docs/api/java/index.html?org/openqa/selenium/support/ui/WebDriverWait.html"><code>WebDriverWait</code></a> class to wait for a UI element to appear on the screen (using <code>findElement</code> to check and retrying if necessary) and so smooths out the asynchronous issues.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">waitForElement</span><span class="o">(</span><span class="n">locator</span><span class="k">:</span> <span class="kt">By</span><span class="o">)</span><span class="k">:</span> <span class="kt">WebElement</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">predicate</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=&gt;</span> <span class="nc">WebElement</span> <span class="k">=</span> <span class="k">_</span><span class="o">.</span><span class="n">findElement</span><span class="o">(</span><span class="n">locator</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">30</span><span class="o">).</span><span class="n">withMessage</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;waiting for element &#39;$locator&#39; on page &#39;${driver.getCurrentUrl}&#39;&quot;</span><span class="o">).</span><span class="n">until</span><span class="o">(</span><span class="n">predicate</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It's also an implicit function designed to convert a <code>By</code> locator into a <code>WebElement</code>. It means we can write something like the following where <code>button</code> is no longer a <code>WebElement</code>, but a <code>By</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">button</span> <span class="k">=</span> <span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;save-button&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">click</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Without the implicit <code>waitForElement</code> function, the code wouldn't compile; <code>By</code> doesn't have a <code>click</code> method on it. With the implicit function in scope however, the compiler works out that calling it (and passing in <code>create</code> as the argument), would return something that <em>does</em> have the <code>click</code> method and would compile.</p>

<h2>Single Arguments Only Please</h2>

<p>Now there's one little bit I've brushed over here; namely how the <code>WebDriver</code> <code>driver</code> instance is made available. The example above assumes it's available but it'd be nicer to pass it into the function along with <code>locator</code>. However, there's a restriction of passing only a single argument into an implicit function. The answer is to use a second argument (using Scala's built in <a href="/blog/2013/07/21/curried-functions/">currying support</a>). By combining implicit parameters the we saw in the <a href="/blog/2015/07/03/scala-implicit-parameters/">previous post</a>, we can maintain the elegant API.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">waitForElement</span><span class="o">(</span><span class="n">locator</span><span class="k">:</span> <span class="kt">By</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver:</span> <span class="kt">WebElement</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">predicate</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=&gt;</span> <span class="nc">WebElement</span> <span class="k">=</span> <span class="k">_</span><span class="o">.</span><span class="n">findElement</span><span class="o">(</span><span class="n">locator</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">30</span><span class="o">).</span><span class="n">withMessage</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;waiting for element &#39;$locator&#39; on page &#39;${driver.getCurrentUrl}&#39;&quot;</span><span class="o">).</span><span class="n">until</span><span class="o">(</span><span class="n">predicate</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So the full example would look like this; making <code>driver</code> an implicit <code>val</code> means we can avoid a call to <code>button.click()(driver)</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ExampleWebDriverTest</span> <span class="k">extends</span> <span class="n">mutable</span><span class="o">.</span><span class="nc">Specification</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=</span> <span class="nc">Browser</span><span class="o">.</span><span class="n">create</span><span class="o">.</span><span class="n">driver</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="s">&quot;The &#39;save&#39; button writes to the database&quot;</span> <span class="o">&gt;&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">button</span> <span class="k">=</span> <span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;save&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// scala calls the implicit def to convert the button into a WebElement</span>
</span><span class='line'><span class="n">button</span><span class="o">.</span><span class="n">click</span><span class="o">()</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Roundup</h2>

<p>You can see from the examples above that implicit functions (and often combining them with implicit values) can make for succinct and more readable APIs. Next we'll look at implicit classes.</p>

<p>If you're interested in more Java bridge implicits like <code>toConsumer</code>, check out this <a href="https://gist.github.com/tobyweston/0fbb8eb114db48596e6b">gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit Parameters in Scala]]></title>
    <link href="http://baddotrobot.com/blog/2015/07/03/scala-implicit-parameters/"/>
    <updated>2015-07-03T18:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/07/03/scala-implicit-parameters</id>
    <content type="html"><![CDATA[<p>Scala "implicits" allow you to omit calling methods or referencing variables directly but instead rely on the compiler to make the connections for you. For example, you could write a function to convert from and <code>Int</code> to a <code>String</code> and rather than call that function <em>explicitly</em>, you can ask the compiler to do it for you, <em>implicitly</em>.</p>

<p>In the next few posts, we'll look at the different types of implicit bindings Scala offers and show some examples of when they can be useful.</p>

<!-- more -->


<p>There are three categories of "implicits";</p>

<ol>
<li><strong><a href="/blog/2015/07/03/scala-implicit-parameters/">Implicit parameters</a></strong> (aka implicit values) will be automatically passed values that have been marked as <code>implicit</code></li>
<li><strong><a href="/blog/2015/07/14/scala-implicit-functions/">Implicit functions</a></strong> are <code>def</code>s that will be called automatically if the code wouldn't otherwise compile</li>
<li><strong>Implicit classes</strong> extend behaviour of existing classes you don't otherwise control (akin to <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">categories</a> in Objective-C)</li>
</ol>


<!-- more -->


<h2>Implicit Parameters</h2>

<p>At it's simplest, an implicit parameter is just a function parameter annotated with the <code>implicit</code> keyword. It means that if no value is supplied when called, the compiler will look for an implicit value and pass it in for you.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">multiply</span><span class="o">(</span><span class="k">implicit</span> <span class="n">by</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">value</span> <span class="o">*</span> <span class="n">by</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You tell the compiler what it can pass in implicitly but annotating values with <code>implicit</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">multiplier</span> <span class="k">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>and call the function like this</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">multiply</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The compiler knows to convert this into a call to <code>multiply(multiplier)</code>. If you forget to define an implicit <code>var</code>, you'll get an error like the following.</p>

<pre><code>error: could not find implicit value for parameter by: Int
       multiply
       ^
</code></pre>

<h2>Implicit <code>val</code>, <code>var</code> or <code>def</code></h2>

<p>You can ask the compiler to call your function with an implicit <code>val</code> (like we've just seen), a <code>var</code> or even another <code>def</code>. So, we could have written a function that returns an <code>Int</code> and Scala would attempt to use that instead.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">f</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">monday</span><span class="o">)</span> <span class="mi">4</span> <span class="k">else</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The compiler would try to resolve this as <code>multiply(f())</code>.</p>

<p>However, you can't have more than one in scope. So if we have both the <code>multipler</code> value and <code>f</code> function defined as implicit and call <code>multiply</code>, we'd get the following error.</p>

<pre><code>error: ambiguous implicit values:
 both value multiplier of type =&gt; Int
 and method f of type =&gt; Int
 match expected type Int
       multiply
       ^
</code></pre>

<h2>Syntax</h2>

<p>You can only use <code>implicit</code> once in a parameter list and all parameters following it will be implicit. For example;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">example1</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>                       <span class="c1">// x is implicit</span>
</span><span class='line'><span class="k">def</span> <span class="n">example2</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// x and y are implicit</span>
</span><span class='line'><span class="k">def</span> <span class="n">example3</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">implicit</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// wont compile</span>
</span><span class='line'><span class="k">def</span> <span class="n">example4</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// only y is implicit</span>
</span><span class='line'><span class="k">def</span> <span class="n">example5</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// wont compile</span>
</span><span class='line'><span class="k">def</span> <span class="n">example6</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>      <span class="c1">// wont compile</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Example</h2>

<p>As an example, the test below uses <a href="http://www.seleniumhq.org/projects/webdriver/">Web Driver</a> (and specifically an instance of the <code>WebDriver</code> class) to check that a button is visible on screen. The <code>beVisible</code> method creates a <code>Matcher</code> that will check this for us but rather than pass in the <code>driver</code> instance explicitly, it uses an implicit <code>val</code> to do so.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ExampleWebDriverTest</span> <span class="k">extends</span> <span class="n">mutable</span><span class="o">.</span><span class="nc">Specification</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=</span> <span class="nc">Browser</span><span class="o">.</span><span class="n">create</span><span class="o">.</span><span class="n">driver</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="s">&quot;The checkout button is visible&quot;</span> <span class="o">&gt;&gt;</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">val</span> <span class="n">button</span> <span class="k">=</span> <span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;checkout&quot;</span><span class="o">)</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="n">button</span> <span class="n">must</span> <span class="n">beVisible</span>           <span class="c1">// reads better than &#39;must beVisible(driver)&#39;   </span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">beVisible</span><span class="o">(</span><span class="k">implicit</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver</span><span class="o">)</span><span class="k">:</span> <span class="kt">Matcher</span><span class="o">[</span><span class="kt">By</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Matcher</span><span class="o">[</span><span class="kt">By</span><span class="o">]</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">S</span> <span class="kt">&amp;lt</span><span class="err">;</span><span class="kt">:</span> <span class="kt">By</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">Expectable</span><span class="o">[</span><span class="kt">S</span><span class="o">])</span> <span class="k">=</span> <span class="n">result</span><span class="o">(</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">isDisplayed</span><span class="o">,</span>
</span><span class='line'>  <span class="n">s</span><span class="s">&quot;${t.value.toString} is visible&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="n">s</span><span class="s">&quot;${t.value.toString} is not visible&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="n">t</span><span class="o">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Roundup</h2>

<p>Implicit parameters are useful for removing boiler plate parameter passing and can make your code more readable. So if you find yourself passing the same value several times in quick succession, they can help hide the duplication.</p>

<p>The Scala library often use them to define default implementations that are "just available". When you come to need a custom implementation, you can pass one in explicitly or use your own implicit value. A good example here is the <code>sorted</code> method on <a href="http://www.scala-lang.org/api/2.11.7/#scala.collection.SeqLike"><code>SeqLike</code></a> class.</p>

<p>The really useful stuff though comes when we combine implicit parameters with the other types of "implicits". Read more in the series to build up a picture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JMock to Scalamock Cheat Sheet]]></title>
    <link href="http://baddotrobot.com/blog/2015/05/09/jmock-to-scalamock-cheatsheet/"/>
    <updated>2015-05-09T12:41:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/05/09/jmock-to-scalamock-cheatsheet</id>
    <content type="html"><![CDATA[<p>An abbreviated set of JMock examples with their Scalamock equivalents.</p>

<!-- more -->


<h2>Mock Objects &amp; the "Context"</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Mocks and Mockery: Java / JMock </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Mockery</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JUnit4Mockery</span><span class="o">();&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">private</span> <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">mock</span><span class="o">(</span><span class="n">ScheduledExecutorService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ScheduledFuture</span> <span class="n">future</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">mock</span><span class="o">(</span><span class="n">ScheduledFuture</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Mocks and Mockery: Scala / Scalamock &amp; Specs2 </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="s">&quot;A test with a mock context in scope&quot;</span> <span class="n">in</span> <span class="k">new</span> <span class="nc">MockContext</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">executor</span> <span class="k">=</span> <span class="n">mock</span><span class="o">[</span><span class="kt">ScheduledExecutorService</span><span class="o">]&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">future</span> <span class="k">=</span> <span class="n">mock</span><span class="o">[</span><span class="kt">ScheduledFuture</span><span class="o">[</span><span class="kt">Any</span><span class="o">]]</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Returns</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Return a value: Java / JMock </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">oneOf</span><span class="o">(</span><span class="n">executor</span><span class="o">).</span><span class="na">shutdownNow</span><span class="o">();</span> <span class="n">will</span><span class="o">(</span><span class="n">returnValue</span><span class="o">(</span><span class="n">asList</span><span class="o">(</span><span class="n">waiting</span><span class="o">)));</span>
</span><span class='line'><span class="n">oneOf</span><span class="o">(</span><span class="n">waiting</span><span class="o">).</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Return a value: Scala / Scalamock </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">executor</span><span class="o">.</span><span class="n">shutdownNow</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;).</span><span class="n">expects</span><span class="o">().</span><span class="n">returning</span><span class="o">(</span><span class="n">asList</span><span class="o">(</span><span class="n">waiting</span><span class="o">)).</span><span class="n">once</span>
</span><span class='line'><span class="o">(</span><span class="n">waiting</span><span class="o">.</span><span class="n">cancel</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;).</span><span class="n">expects</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="n">once</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Notes:</strong></p>

<ul>
<li><code>expects()</code> is required for zero argument method call expectations.</li>
<li>You can leave off <code>once</code>; it will default to the same behaviour</li>
</ul>


<h2>Allowing / Ignoring</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Allowing: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">allowing</span><span class="o">(</span><span class="n">executor</span><span class="o">).</span><span class="na">scheduleWithFixedDelay</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Runnable</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span> <span class="n">will</span><span class="o">(</span><span class="n">returnValue</span><span class="o">(</span><span class="n">future</span><span class="o">));</span>
</span><span class='line'><span class="n">oneOf</span><span class="o">(</span><span class="n">future</span><span class="o">).</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Allowing: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">executor</span><span class="o">.</span><span class="n">scheduleWithFixedDelay</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;).</span><span class="n">expects</span><span class="o">(&lt;</span><span class="n">em</span><span class="o">&gt;,</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;,</span> <span class="o">*</span> <span class="o">,</span> <span class="o">*).</span><span class="n">returning</span><span class="o">(</span><span class="n">future</span><span class="o">)</span>
</span><span class='line'><span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="n">cancel</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;).</span><span class="n">expects</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="n">once</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Notes:</strong></p>

<ul>
<li>You could also add <code>.anyNumberOfTimes</code> after the <code>returning</code> call but it's unnecessary.</li>
<li>There's no way to distinguish the <em>intention</em> of allowing and ignoring interactions in Scalamock.</li>
</ul>


<h2>Default Values</h2>

<p>JMock will return a default value (as a dynamic proxy) if you set up an expectation but leave off a <code>returnValue</code>. In the example below, we don't care if it returns anything so if the code under test relies on a value, but the test does not, we don't have to express anything in the test.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Default Values: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">create</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If the underlying code were to check, say, that the result of <code>factory.create()</code> was not an empty list with <code>if (result.isEmpty())</code>, JMock would return something sensible and we'd avoid a <code>NullPointerException</code>. You might argue that this side affect should be captured in a test but leaving it off makes the intention of expectation clearer; we only care that <code>create</code> is called, not what it returns.</p>

<p>Scalamock will return <code>null</code> by default. So the above example would give a <code>NullPointerException</code> and you're required to do something like this. Notice we're using a <code>stub</code> and not a <code>mock</code> here.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Default Values: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">stub</span><span class="o">[</span><span class="kt">Result</span><span class="o">]</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">create</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">().</span><span class="n">once</span><span class="o">.</span><span class="n">returning</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">result</span><span class="o">))&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Any / Wildcards</h2>

<p>JMock uses <code>with</code> and Hamcrest the matcher <code>IsAnything</code> (<code>any</code>) to match anything. The type is used by the compiler.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Any: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">ignoring</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">notifyObservers</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">SomeException</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'><span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">notifyObservers</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">AnotherException</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>In the Scala version, use a <a href="http://docs.scala-lang.org/style/types.html#ascription">type ascription</a> to give the compiler a hand in the partially applied method call;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Any: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">notifyObservers</span><span class="o">(&lt;</span><span class="n">em</span><span class="k">&gt;:</span> <span class="nc">SomeException</span><span class="o">)).</span><span class="n">expects</span><span class="o">(*).</span><span class="n">anyNumberOfTimes</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">notifyObservers</span><span class="o">(&lt;/</span><span class="n">em</span><span class="k">&gt;:</span> <span class="nc">SomeException</span><span class="o">)).</span><span class="n">expects</span><span class="o">(*).</span><span class="n">once</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Notes:</strong></p>

<ul>
<li><code>AnotherException</code> is a subtype of <code>SomeException</code> but <code>any</code> will match on literally anything. Using subtypes like this in JMock is a bit of a smell as a test won't fail if a different subtype is thrown at runtime. It may be useful to express intent.</li>
<li><a href="http://stackoverflow.com/questions/30162263/scalamock-wildcard-argument-match-on-subtype">You can't replicate the subtype line</a> in Scalamock; (<code>(factory.notifyObservers(_: AnotherException))</code> doesn't compile.</li>
</ul>


<h2>Throwing Exceptions</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Exception: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Exception</span> <span class="n">exception</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">();</span>
</span><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span> <span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">create</span><span class="o">();</span> <span class="n">will</span><span class="o">(</span><span class="n">throwException</span><span class="o">(</span><span class="n">exception</span><span class="o">));</span>
</span><span class='line'><span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">notifyObservers</span><span class="o">(</span><span class="n">exception</span><span class="o">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Exception: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">exception</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Exception</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">create</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;).</span><span class="n">expects</span><span class="o">().</span><span class="n">throws</span><span class="o">(</span><span class="n">exception</span><span class="o">).</span><span class="n">once</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">notifyObservers</span><span class="o">(&lt;/</span><span class="n">em</span><span class="k">&gt;:</span> <span class="nc">Exception</span><span class="o">)).</span><span class="n">expects</span><span class="o">(</span><span class="n">exception</span><span class="o">).</span><span class="n">once</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<strong>Notes:</strong></p>

<ul>
<li>In Scalamock, <code>throws</code> and <code>throwing</code> are interchangeable.</li>
<li>Again, <code>once</code> is optional.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Learning Curve]]></title>
    <link href="http://baddotrobot.com/blog/2014/11/25/scala-learning-curve/"/>
    <updated>2014-11-25T07:09:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/11/25/scala-learning-curve</id>
    <content type="html"><![CDATA[<p>If you've just started to learn Scala and are wondering what to expect, it's typical to experience a quick ramp up in skill followed by a slower adoption of the more sophisticated features. In this post, I talk about what I think of as a typical learning curve.</p>

<p><img itemprop="image" class="center" src="../../../../../images/learning_curve.png" width="752" height="389"></p>

<p>Taken from my <a href="http://bit.ly/1DsYl9f">Pluralsight</a> course, the chart shows experience (or time) along the <code>x</code> axis and some measure of "learning" on the <code>y</code>.</p>

<!-- more -->


<h2>Milestone 1</h2>

<p>When you first start, you can expect getting up to speed with the language to be a fairly steep incline. That's not to say that it's difficult to get to the first plateau, so by "steep", I really mean "short"; you can expect a relatively quick increment in learning.</p>

<p>You'll probably sit here for a bit applying what you've learnt. I see this as the first milestone; to be able to build object-oriented or imperative applications using language specific constructs and features but without necessarily adopting functional programming. Just like learning any other language in the Java / C family.</p>

<h2>Milestone 2</h2>

<p>I see the next milestone as adopting functional programming techniques.</p>

<p>This is much more challenging and likely to be a shallower curve. Typically this will involve using traditional architecture design but implementing functional programming techniques in the small. You can think of this approach as <a href="http://www.johndcook.com/blog/2009/03/23/functional-in-the-small-oo-in-the-large/">"functional in the small, OO in the large"</a>. Starting to embrace a new functional way of thinking and unlearning some of the traditional techniques can be hard, hence the shallower incline.</p>

<p>Concrete examples here are more than just language syntax, so things like <a href="http://baddotrobot.com/blog/2012/04/03/scala-as-a-functional-oo-hybrid/">higher order and pure functions</a>, <a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)">referential transparency</a>, immutability and side-affect free, more declarative coding; all the things that are typically offered by <a href="http://en.wikipedia.org/wiki/Pure_function">pure</a> functional languages. <strong>The key thing here is that they're applied in small, isolated areas.</strong></p>

<h2>Milestone 3</h2>

<p>The next challenge is working towards a more cohesive functional design; this really means adopting a functional style at a system level; architecting the entire application as functions and abandoning the object-oriented style completely. So, aiming for something like a Haskell application.</p>

<p>All the concrete functional programming mechanisms above apply but this time, throughout the system; not to isolated areas but lifted to application-wide concerns. Picking up advanced libraries like <a href="http://eed3si9n.com/learning-scalaz/index.html">Scalaz</a> seems to go hand-in-hand with this point of the curve.</p>

<h2>As a Continuum</h2>

<p>You can also think of adoption as more of a continuum with traditional imperative programming on the left and pure functionally programming on the right.</p>

<p><img itemprop="image" class="center" src="../../../../../images/continuum.png" width="591" height="368"></p>

<p>You can think of the far right as Haskell on the JVM. Haskell is a pure functional language so you don't have any choice but to design your app in a functional way. Scala is an object-oriented / functional hybrid, it can only give you the tools. It can't enforce functional programming; you need discipline and experience in Scala to avoid mutating state for example. Haskell will physically stop you.</p>

<p>So as you start out on the continuum using Java and move to the right, libraries like <a href="http://www.functionaljava.org/">Functional Java</a>, <a href="https://code.google.com/p/totallylazy/">Totally Lazy</a> and even <a href="https://leanpub.com/whatsnewjava8">Java 8 features</a> help you adopt a more functional style. There comes a point where a language switch helps even more. Functional idioms become a <strong>language feature</strong> rather than a <strong>library feature</strong>. The syntactical sugar of for-comprehensions are a good example.</p>

<h2>Final Thoughts</h2>

<p>Libraries like <a href="http://eed3si9n.com/learning-scalaz/index.html">Scalaz</a> make it easier to a develop a purely functional style. It's worth noting that reaching the far right of the continuum (or top right quadrant of the learning curve) doesn't have to be the goal. There are plenty of teams operating effectively across the continuum.</p>

<p>When you're adopting Scala, make a deliberate decision about where you want to be on the continuum, be clear about <em>why</em> and use my learning curve as a way to gauge your progress.</p>

<p>I've developed a video course exclusively for <a href="http://bit.ly/1DsYl9f">Pluralsight</a> to help Java teams make the transition to Scala. If you're interested and liked this post, <a href="http://bit.ly/1DsYl9f">check it out</a> or read my book <a href="http://amzn.to/1M0w9jZ">Learn Scala for Java Developers</a>.</p>
]]></content>
  </entry>
  
</feed>
