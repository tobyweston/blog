<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: REST | bad.robot]]></title>
  <link href="http://baddotrobot.com/blog/categories/rest/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2016-03-30T18:28:43+01:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HTTP Encoding Schemes]]></title>
    <link href="http://baddotrobot.com/blog/2012/06/11/http-encoding-schemes/"/>
    <updated>2012-06-11T18:06:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/06/11/http-encoding-schemes</id>
    <content type="html"><![CDATA[<p>What's the difference between URL Encoding and Form URL Encoding?</p>

<!-- more -->


<h2>URL Encoding</h2>

<p>Sometimes refered to as <a href="http://en.wikipedia.org/wiki/Percent-encoding">Percent Encoding</a>, this scheme is intended to encode non-ASCII characters consistently in URLs. For example, characters like <code>#</code> have special meaning in a URL and would need to be converted to avoid problems. The scheme is recognisable by the replacement of characters with a percentage value. For example, the space character gets replaced by <code>%20</code>.</p>

<p>In Java, you can create an encoded URL using</p>

<p>{% codeblock lang:java %}
new java.net.URI("http", "baddotrobot.com", "/cheese sandwich").toURL();
{% endcodeblock %}</p>

<p>which in this case produces</p>

<pre><code>http:baddotrobot.com#/cheese%20sandwich
</code></pre>

<h2>Form URL Encoding</h2>

<p>Refered to by the <code>application/x-www-form-urlencoded</code> mime-type. This scheme was based on an early version of URL Encoding but at some point diverged. For example, the space character gets replaced by the <code>+</code> rather than <code>%20</code>. It's typically used for encoding <code>POST</code> message content by HTML forms.</p>

<p>For example, a HTML form with <code>name</code> and <code>address</code> would send over the following.</p>

<pre><code>POST http://baddotrobot.com/ HTTP/1.1
Content-Type: application/x-www-form-urlencoded

name=bad.robot&amp;address=the+land+of+make+believe
</code></pre>

<p>Use the unhelpfully named class <code>URLEncoder</code> in Java</p>

<p>{% codeblock lang:java %}
java.net.URLEncoder.encode(value, "UTF-8");
{% endcodeblock %}</p>

<h2>Base64 Encoding</h2>

<p>Another one to be aware of, this is a basic encoding used by various protocols related to HTTP. For example, basic authentication is supported by adding a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.8">Authorization</a> header with base 64 encoded username and password; you'd do something like the following.</p>

<p>{% codeblock lang:java %}
new header("Authorization", "Basic " + new sun.misc.Base64Encoder().encode("username:password".getBytes()));
{% endcodeblock %}</p>

<p>Which, for example, could be used to send the following HTTP message</p>

<pre><code>GET /login HTTP/1.1
Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Should be Simple]]></title>
    <link href="http://baddotrobot.com/blog/2012/06/10/http-simple/"/>
    <updated>2012-06-10T10:06:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/06/10/http-simple</id>
    <content type="html"><![CDATA[<p>Apache's HTTP client libraries (version 4.x has a very different API than 3.x) are fairly involved to configure and require a lot of boilerplate code. Making a simple HTTP GET request usually ends up with way too many lines of code. Working with HTTP should be simple, so I've been working on a library offering a straight forward API with sensible defaults. Typically, you'll make HTTP requests with just one line of code.</p>

<p>{% codeblock lang:java %}
HttpResponse response = anApacheClient().get(new URL("http://baddotrobot.com"));
{% endcodeblock %}</p>

<!-- more -->


<h2>The API</h2>

<p>The library, <a href="https://github.com/tobyweston/simple-http">simple-http</a>, provides an implementation agnostic API. It ships with support for Apache's HTTP client 4.x but can be extended to use any underlying HTTP client library without changes to the API. It's essentially a builder ontop of the Apache library. You configure your client in a builder style then hit the HTTP verbs. For example.</p>

<p>{% codeblock lang:java %}
HttpResponse response = anApacheClient()</p>

<pre><code>.with(httpTimeout(seconds(30)))
.with(proxy(new URL("http://proxy.com:8999")))
.get(new URL("http://baddotrobot.com"),
    headers(
        header("Accept", "text/html")
    )
);
</code></pre>

<p>{% endcodeblock %}</p>

<p>It's supposed to be so simple, it's self explanatory. If it's not, <a href="https://twitter.com/#!/jamanifin">let me know</a>. The starting point is just <code>HttpClients.anApacheClient()</code>.</p>

<h2>Separation of Concerns</h2>

<p>First and foremost, <a href="https://github.com/tobyweston/simple-http">simple-http</a> helps with separation of concern. It provides a basic <code>HttpClient</code> interface which you can easily mock in your code to assert your components send messages but not concern yourself with raw HTTP. It provides the anti-corruption layer between your application and HTTP. You depend on the <a href="https://github.com/tobyweston/simple-http">simple-http</a> interfaces and not Apache's implementations. In that way, your application's interactions with HTTP are in terms of the <em>HTTP verbs</em> and not Apache's technical details.</p>

<h2>Configuration</h2>

<p>Secondarily, the library provides a fluent, straight-forward interface to instantiate and use a HTTP client. If you need special configuration, that's fine but as it comes sensible defaults, for the most part all you'll need to do is new it up. For example, to create a HTTP client which trusts self signed certificates, do the following.</p>

<p>{% codeblock lang:java %}
HttpClient http = anApacheClient().withTrustingSsl();
{% endcodeblock %}</p>

<p>Regular SSL authentication is straight forward too, just add a username and password to your client.</p>

<p>{% codeblock lang:java %}
HttpClient http = anApacheClient().with("bobby brown", "secret");
{% endcodeblock %}</p>

<h2>Helping you Test</h2>

<p>As <a href="https://github.com/tobyweston/simple-http">simple-http</a> ships with a bunch of <code>Matcher</code>s, it's easy to make assertions or set expectations. For a simple case, compare the following.</p>

<p>Using Apache directly, you might write something like this.</p>

<p>{% codeblock lang:java %}
assertThat(apacheResponse.getStatusLine().getStatusCode(), is(200));
{% endcodeblock %}</p>

<p>which, when it fails presents you with the following.</p>

<pre><code>java.lang.AssertionError:
Expected: is &lt;200&gt;
     got: &lt;404&gt;
</code></pre>

<p>With <a href="https://github.com/tobyweston/simple-http">simple-http</a>, you write.</p>

<p>{% codeblock lang:java %}
assertThat(response, has(status(200)));
{% endcodeblock %}</p>

<p>which is much more helpful when it fails, showing the response's status code, message, content and headers.</p>

<pre><code>java.lang.AssertionError:
Expected: a HttpMessage with status code &lt;200&gt;
     got: &lt;DefaultHttpResponse{statusCode=404, statusMessage='Not Found', content='{ "message", "not found" }', headers='SimpleHeaders{headers=[SimpleHeader{name='Content-Type', value='application/json'}]}'}&gt;
</code></pre>

<p>Of course, you can enrich the assertions, for example.</p>

<p>{% codeblock lang:java %}
assertThat(response, allOf(has(status(200)), has(headerWithValue("Content-Type", containsString("json")))));
{% endcodeblock %}</p>

<p>or assert against the message body, for example.</p>

<p>{% codeblock lang:java %}
assertThat(response, has(content(not(containsString("\"error\"")))));
{% endcodeblock %}</p>

<p>Or use them in an expectation, for example using <a href="http://jmock.org/">JMock</a> below, we expect a HTTP <code>GET</code> to the URL <a href="http://acme.com/stock">http://acme.com/stock</a> when we call the method <code>inventoryCount()</code>.</p>

<p>{% assign braces = '{{' %}
{% codeblock lang:java %}
@Test
public void anExample() throws MalformedURLException {</p>

<pre><code>final HttpClient http = context.mock(HttpClient.class);
context.checking(new Expectations() {{ braces }}
    oneOf(http).get(with(new URL("http://acme.com/stock")), with(headers(header("Accept", "application/json")))); will(returnValue(...));
    ...
}});
new StockRoom(http).inventoryCount();
context.assertIsSatisfied();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Or here where we expect a HTTP <code>POST</code> to submit a URL form encoded body to add some stock. In the example, the form parameter we're expecting should look like <code>stock=%7Bsome%3A+json+message%7D</code>. Notice how <a href="http://robotooling.com/maven/">bad.robot.repo</a> avoids this complexity.</p>

<p>{% codeblock lang:java %}
public void anotherExample() throws Exception {</p>

<pre><code>checking(new Expectations() {{ braces }}
    oneOf(http).post(with(new URL("http://acme.com/stock")), with(post(content(params("stock", "{some: json message}").asString()))));
}});
new StockRoom(http).addStock(...);
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Download</h2>

<p>You can download from the <a href="http://robotooling.com/maven/">bad.robot.repo</a> Maven repository or get the source from <a href="https://github.com/tobyweston/simple-http">Github</a>.</p>

<p>{% codeblock lang:xml %}
<repositories></p>

<pre><code>&lt;repository&gt;
    &lt;id&gt;bad.robot&lt;/id&gt;
    &lt;name&gt;bad.robot repository for robotooling&lt;/name&gt;
    &lt;url&gt;http://www.robotooling.com/maven/&lt;/url&gt;
&lt;/repository&gt;
</code></pre>

<p></repositories></p>

<p><dependency></p>

<pre><code>&lt;groupId&gt;bad.robot&lt;/groupId&gt;
&lt;artifactId&gt;simple-http&lt;/artifactId&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
</code></pre>

<p></dependency>
{% endcodeblock %}</p>

<p>Enjoy and <a href="https://twitter.com/#!/jamanifin">let me know</a> how you get on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Force IE8 to Display JSON with Jersey]]></title>
    <link href="http://baddotrobot.com/blog/2012/02/21/jersey-and-ie8/"/>
    <updated>2012-02-21T06:27:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2012/02/21/jersey-and-ie8</id>
    <content type="html"><![CDATA[<p>If Internet Explorer 8 performs a HTTP <code>GET</code> against some resource and receives a mime-type that it wasn't expecting, it will ask the user to download the resource and save it. Annoyingly for JSON content this means you wont see the JSON 'in-browser' like in Firefox and Chrome. If you're using <a href="http://jersey.java.net/">Jersey</a>, Oracle's JAX-RS reference implementation, here's how to make IE8 play nice.</p>

<!-- more -->


<p>The problem is in IE8's default set of <code>Accept</code> header values. For some reason, it'll ask for a very specific set of Microsoft types in the request;</p>

<p>{% codeblock %}
Accept: application/x-ms-application, application/xaml+xml, application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, <em>/</em>
{% endcodeblock %}</p>

<p>When the server responds with a <code>Content-Type</code> of anything other than what's in the accept list,
IE will prompt the user to save the resource instead of attempting to display it. That's fair enough as I imagine its
saying "I didn't say I could accept this so therefore, I don't know how to display it".</p>

<p>Responding to a request with the above <code>Accept</code> header from IE with a response including the following header</p>

<p>{% codeblock %}
Content-Type: application/json
{% endcodeblock %}</p>

<p>will prompt IE8 to save the file rather than display 'in-browser'.</p>

<p>When we return a response with a JSON content type, IE won't know how to handle it. We could send back our JSON as <code>text/plain</code> for all cases, but that kind of defeats the object of using <code>Content-Type</code> all together.</p>

<p>However, we can use Jersey to handle the IE case (where the request is for say <code>application/x-ms-application</code>)
by sending back plain text but still return JSON for all other cases.</p>

<p>{% codeblock lang:java %}
@Path("/customers")
public class Customers {</p>

<pre><code>@GET
@Produces("application/json")
public String getAllCustomers() {
    return allCustomersAsJson();
}

@GET
@Produces("application/x-ms-application")
public TextPlainOkResponse getAllCustomersForInternetExplorer() {
    return new TextPlainOkResponse(getAllCustomersAsJson());
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>The class above will return a list of all Customers as JSON. The <code>getAllCustomers</code> method will be dispatched to via
Jersey and send back the <code>String</code> with a <code>Content-Type</code> of <code>application/json</code> for all cases <em>unless</em>
the client asks for <code>application/x-ms-application</code>. This is the case for IE. Now, although the same JSON string is
constructed, we'll overwrite the <code>Content-Type</code> masquerading as <code>text/plain</code> in the <code>TextPlainOkResponse</code> class.</p>

<p>{% assign braces = '{{' %}
{% codeblock lang:java %}
public class TextPlainOkResponse extends Response {</p>

<pre><code>private final String json;

public TextPlainOkResponse(String json) {
    this.json = json;
}

@Override
public Object getEntity() {
    return json;
}

@Override
public int getStatus() {
    return 200;
}

@Override
public MultivaluedMap&lt;String, Object&gt; getMetadata() {
    return new MetadataMap&lt;String, Object&gt;() {{ braces }}
        put("Content-Type", Arrays.&lt;Object&gt;asList("text/plain"));
    }};
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>So for all clients asking for <code>application/x-ms-application</code>, they'll actually get <code>text/plain</code>. In the case of
Internet Explorer 8, it will display the JSON 'in-browser'. It won't apply any formatting though, so you may want to
pretty print the response before sending it back.</p>

<p>If it doesn't work for you, see what headers IE is actually sending and adapt the strategy accordingly. You can using
something like <a href="http://www.blunck.info/iehttpheaders.html">ieHttpHeaders</a> or the awesome <a href="http://www.membrane-soa.org/soap-monitor/">Membrane</a> to see what headers are going over the wire.</p>
]]></content>
  </entry>
  
</feed>
