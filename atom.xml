<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bad.robot]]></title>
  <link href="http://baddotrobot.com/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2014-09-22T20:31:07+01:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dealing with Exceptions as Monads]]></title>
    <link href="http://baddotrobot.com/blog/2014/09/21/exceptions-as-monads/"/>
    <updated>2014-09-21T05:12:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/09/21/exceptions-as-monads</id>
    <content type="html"><![CDATA[<p>In some <a href="http://baddotrobot.com/blog/categories/exceptions/">previous posts</a>, I wrote about treating exceptions as a system wide concern. In this post, I extend that idea and talk about distinguishing between exceptional behaviour and just code that didn&#8217;t return what you wanted.</p>

<p>Pure functional languages often discourage the use of exceptions because when they are used to control execution flow, they introduce side-affects and violate <a href="http://baddotrobot.com/blog/2012/04/03/scala-as-a-functional-oo-hybrid/">purity of function</a>. By using the type system to capture exceptional behaviour and dealing with exceptions monadically, it&#8217;s much easier to provide that system wide consistently I&#8217;ve been talking about.</p>

<!-- more -->


<h2>Object-Oriented</h2>

<p><strong><em>The norm for object oriented code is to use exceptions to control execution flow.</em></strong> When you have a method that can return <code>true</code> or <code>false</code> <em>and</em> throw an exception, it might as well be returning three things. It forces clients to have to reason about logic that has nothing to do with the function of the method. It&#8217;s complicated and often makes it hard to treat exceptions consistently across the entire application.</p>

<h2>Functional</h2>

<p><strong><em>So what can we learn from functional programing languages?</em></strong> Exceptions are a fact of life, unexpected things can happen with your code and you still need to deal with them. The subtlety here is that functional languages emphasize the <em>unexpected</em> part with exceptions. They try and discourage you from using exceptions for dealing with known branches of logic and instead use them like Java uses <code>Error</code>s (ie as non-recoverable). This means thinking of exceptions of <em>exceptional behaviour</em> and not Java&#8217;s notion of checked <code>Exceptions</code>.</p>

<p><strong><em>So how do languages like Scala discourage you using them like Java?</em></strong> They usually offer alternative mechanisms. Scala for example has the <a href="http://www.scala-lang.org/api/2.11.1/#scala.util.Either"><code>Either</code></a> and <a href="http://www.scala-lang.org/api/2.11.1/#scala.util.Try"><code>Try</code></a> classes. These classes allow you to express using the type system, that a method was successful or unsuccessful, independently from the return value. As an additional bonus, because they are <a href="http://debasishg.blogspot.co.uk/2008/03/monads-another-way-to-abstract.html">monadic</a>, you can deal with exceptional and expected behaviour consistently in code. That means you can use the same structures to process the positive and the negative case without resorting to <code>catch</code> blocks.</p>

<h2>Either in Java</h2>

<p>For example, let&#8217;s say we have a method <code>uploadExpenses</code> that uploads this months expenses to my online accountant&#8217;s web service. It uploads a single expense at a time, so it could fail because of some network problem or if the web service rejects an individual <code>Expense</code>. Once done, I&#8217;d like to produce a report (just using <code>System.out</code> in our example).</p>

<h3>Traditional Exception Throwing</h3>

<p>In a traditional exception throwing version below, the <code>uploadExpenses</code> call can break after only some expenses have been uploaded. With no report, it would be hard to work out which were successfully uploaded. You&#8217;re also left to deal with the exceptions. If other code depends on this, it may make sense to propagate the exception to an <a href="http://baddotrobot.com/blog/2012/03/28/exception-handling-as-a-system-wide-concern/">appropriate system boundary</a> but dealing with exceptions consistently for the entire system is a real challenge.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">&gt;</span> <span class="n">expenses</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'>    <span class="n">Expenses</span> <span class="n">uploaded</span> <span class="o">=</span> <span class="n">uploadExpenses</span><span class="o">(</span><span class="n">expenses</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">()));</span>    <span class="c1">// &lt;- can throw exceptions</span>
</span><span class='line'>    <span class="n">uploaded</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">HttpProblem</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// what to do?</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DuplicateExpenseFound</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// what to do?</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Eithers</h3>

<p>On the other hand, if we use an <code>Either</code> we can make the <code>uploadExpenses</code> call return <em>either</em> a successfully upload <code>Expense</code> or a tuple detailing the expense that failed to upload along with the reason why. Once we have a list of these, we can process them in the same way to produce our report. The neat thing here is that the exceptional behaviour is encoded in the return type; clients know that this thing could fail and can deal with it without coding alternative logic.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">&gt;</span> <span class="n">expenses</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Either</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">&gt;,</span> <span class="n">Expense</span><span class="o">&gt;&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">uploadExpenses</span><span class="o">(</span><span class="n">expenses</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">&gt;&gt;</span> <span class="n">failures</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">flatMap</span><span class="o">(</span><span class="n">either</span> <span class="o">-&gt;</span> <span class="n">either</span><span class="o">.</span><span class="na">left</span><span class="o">());</span>
</span><span class='line'><span class="n">failures</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">failure</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">failure</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">&gt;</span> <span class="n">successes</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">flatMap</span><span class="o">(</span><span class="n">either</span> <span class="o">-&gt;</span> <span class="n">either</span><span class="o">.</span><span class="na">right</span><span class="o">());</span>
</span><span class='line'><span class="n">successes</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">success</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">success</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this way, having the semantics baked into the return types is what forces clients to deal with the exceptional behaviour. Dealing with them monadically ensures that we can deal with them consistently. For a naive implementation, have a look at my <a href="https://gist.github.com/tobyweston/caefc3b5ec36348387e5">gist</a> and for fuller implementations, see <a href="https://github.com/scala/scala/blob/2.11.x/src/library/scala/util/Either.scala">Scala&#8217;s version</a> or the <a href="https://code.google.com/p/totallylazy/source/browse/src/com/googlecode/totallylazy/Either.java">TotallyLazy</a> and <a href="https://functionaljava.ci.cloudbees.com/job/master/javadoc/fj/data/Either.html">Functional Java</a> versions in Java.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Udemy Java 8 Course]]></title>
    <link href="http://baddotrobot.com/blog/2014/05/20/udemy-course/"/>
    <updated>2014-05-20T19:12:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/05/20/udemy-course</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just published my course on Java 8 over at <a href="https://www.udemy.com/whats-new-in-java-8/">Udemy.com</a>, for a limited time only, get <a href="https://www.udemy.com/whats-new-in-java-8/?couponCode=BLOG10">10% off with coupon code BLOG10</a>!</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/BOgcl5anYyI "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes vs. Functions]]></title>
    <link href="http://baddotrobot.com/blog/2014/04/08/classes-vs-functions/"/>
    <updated>2014-04-08T19:40:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/04/08/classes-vs-functions</id>
    <content type="html"><![CDATA[<p>You can use lambdas in Java 8 anywhere you would have previously used a <a href="http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8">single method interface</a> so it may just look like syntactic sugar but it&#8217;s not. Let&#8217;s have a look at how they differ; it&#8217;s anonymous classes vs. lambdas or simply put, classes vs. functions.</p>

<!-- more -->


<p>So, a typical implementation of an anonymous class (a single method interface) in Java pre-8, might look something like this. The <code>anonymousClass</code> method is calling the <code>waitFor</code> method passing in some implementation of <code>Condition</code>, in this case it&#8217;s saying wait for some server to have shutdown.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">anonymousClass</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpServer</span><span class="o">();</span>
</span><span class='line'>    <span class="n">waitFor</span><span class="o">(</span><span class="k">new</span> <span class="n">Condition</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">isSatisfied</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">!</span><span class="n">server</span><span class="o">.</span><span class="na">isRunning</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The functionally equivalent lambda would look like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">closure</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpServer</span><span class="o">();</span>
</span><span class='line'>    <span class="n">waitFor</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">server</span><span class="o">.</span><span class="na">isRunning</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where in the interest of completeness, a naive polling <code>waitFor</code> method might look like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">WaitFor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">waitFor</span><span class="o">(</span><span class="n">Condition</span> <span class="n">condition</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(!</span><span class="n">condition</span><span class="o">.</span><span class="na">isSatisfied</span><span class="o">())</span>
</span><span class='line'>          <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">250</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Some Theoretical Differences</h2>

<p>Firstly, both implementations are in-fact closures, the later is also a lambda. Confused, see <a href="http://baddotrobot.com/blog/2010/07/13/lambdas-vs-closures">my distinction between lambdas and closures</a>. This means that both have to capture their &#8220;environment&#8221; at runtime. In Java pre-8, this means copying the things the closure needs into an instance of an class (an anonymous instances of <code>Condition</code>). In our example, the <code>server</code> variable.</p>

<p>As it&#8217;s a copy, it has to be declared final to ensure that it can not be changed between when it&#8217;s captured and when it&#8217;s used. These two points in time could be very different given that closures are often used to defer execution until some later point (see <a href="http://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluation</a> for example). Java 8 uses a neat trick whereby if it can reason that a variable is never updated, it might as well be final so it treats it as &#8220;effectively final&#8221; and you don&#8217;t need to declare it as <code>final</code> explicitly.</p>

<p>A lambda on the other hand, doesn&#8217;t need to copy it&#8217;s environment or <em>capture any terms</em>. This means it can be treated as a genuine function and not an instance of a class. What&#8217;s the difference? Plenty.</p>

<h3>Functions vs. Classes</h3>

<p>For a start, functions; <a href="http://en.wikipedia.org/wiki/Pure_function">genuine functions</a>, don&#8217;t need to be instantiated many times. I&#8217;m not sure if instantiation is even the right word to use when talking about allocating memory and loading a chunk of machine code as a function. The point is, once it&#8217;s available, it can be re-used, it&#8217;s idempotent in nature as it retains no state. Static class methods are the closest thing Java has to functions.</p>

<p>For Java, this means that a lambda need not be instantiated every time it&#8217;s evaluated which is a big deal. Unlike instantiating an anonymous class, the memory impact should be minimal.</p>

<p>In terms of some conceptual differences then;</p>

<ul>
<li>Classes must be instantiated, whereas functions are not.</li>
<li>When classes are newed up, memory is allocated for the object.</li>
<li>Memory need only be allocated once for functions. They are stored in the &#8220;permanent&#8221; area of the heap.</li>
<li>Objects act on their own data, functions act on unrelated data.</li>
<li>Static class methods in Java are roughly equivalent to functions.</li>
</ul>


<h2>Some Concrete Differences</h2>

<h3>Capture Semantics</h3>

<p>Another difference is around capture semantics for <code>this</code>. In an anonymous class, <code>this</code> refers to the instance of the anonymous class. For example, <code>Foo$InnerClass</code> and not <code>Foo</code>. That&#8217;s why you have whacky syntax like <code>Foo.this.x</code> when you refer to the enclosing scope from the anonymous class.</p>

<p>In lambdas on the other hand, <code>this</code> refers to the enclosing scope (<code>Foo</code> directly in our example). In fact, lambdas are <strong>entirely lexically scoped</strong>, meaning they don&#8217;t inherit any names from a super type or introduce a new level of scoping at all; you can directly access fields, methods and local variables from the enclosing scope.</p>

<p>For example, this class shows that the lambda can reference the <code>firstName</code> variable directly.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="s">&quot;Jack&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">addSurname</span> <span class="o">=</span> <span class="n">surname</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">firstName</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">surname</span><span class="o">;</span>       <span class="c1">// equivalent to this.firstName</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The anonymous class equivalent would need to explicitly refer to <code>firstName</code> from the enclosing scope.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="s">&quot;Charlie&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">anotherExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">addSurname</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">surname</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Example</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">surname</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Shadowing also becomes much more straight forward to reason about (when referencing shadowed variables).</p>

<h3>Byte Code Differences</h3>

<p>The other thing to note is the byte code an anonymous class implementation produces compared to the lambda byte-code. The former will use the <code>invokespecial</code> whereas a lambda uses <code>invokedynamic</code>. The difference is about when the caller is linked to a destination; lambdas are matched at <em>runtime</em> (<code>invokedynamic</code>) rather than compile time (<code>invokespecial</code> and <code>invokevirtual</code>).</p>

<p>This may not seem like a big deal but the main take-away is that these instructions can be optimised by the JVM. We can expect dynamic invocations (and so lambdas) to out-perform their more traditional counterparts.</p>

<p>The <code>invokedynamic</code> instruction was originally motivated by supporting more dynamic languages on the JVM. With it, you don&#8217;t need to know the types ahead of time (statically typed) and you can relax these constraints and support dynamically typed languages (like JavaScript). However, it can be used to do so much more.</p>

<p>It links into type inference and target typing with Java 8, supporting method references (method handles), default methods, removing the need to create intermediary anonymous instances, avoid bridge methods as well as optimisation opportunities. It&#8217;s introduction in Java 7 was under the radar for the mainstream but it&#8217;s probably the biggest proponent to supporting Java 8 features like lambdas. It&#8217;s the mechanism by which Java achieves no additional class loading when using lambdas.</p>

<h2>Summary</h2>

<p>So there we have it. Functions in the academic sense are very different things from anonymous classes (which we often treat like functions in Java pre-8). I find it useful to keep the distinctions in my head as I feel that I need to be able to justify the use of Java 8 lambdas in my code with more than just arguing for their concise syntax. Of course, there&#8217;s lots of additional advantages in using lambdas (not least the retrofit of the JDK to heavily use them), but I want to be able to respond when people say &#8220;isn&#8217;t that just syntactic sugar over anonymous classes?&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Interfaces in Java 8]]></title>
    <link href="http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8/"/>
    <updated>2014-04-07T21:33:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8</id>
    <content type="html"><![CDATA[<p>Java 8 treats lambdas as an instance of an interface type. It formalises this into something it calls &#8220;functional interfaces&#8221;. A functional interface is just an interface with a single method. Java calls the method a &#8220;functional method&#8221; but the name &#8220;single abstract method&#8221; or SAM is often used. All the existing single method interfaces like <code>Runnable</code> and <code>Callable</code> in the JDK are now functional interfaces and lambdas can be used anywhere a single abstract method interface is used.</p>

<p>Let&#8217;s run through the basic syntax.</p>

<!-- more -->


<h2>@FunctionalInterface</h2>

<p>Oracle have introduced a new annotation <code>@FunctionalInterface</code> to mark an interface as such. It&#8217;s basically to communicate intent but also allows the compiler to do some additional checks.</p>

<p>For example, this interface compiles,</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>but when you indicate that it should be a <em>functional interface</em></p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span> <span class="c1">// &lt;- error here</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler will raise an error as there is no method. It says that &#8220;Example is not a functional interface&#8221; as &#8220;no abstract method was found&#8221;. It&#8217;ll also error if we try and add a second method.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">illegal</span><span class="o">();</span>    <span class="c1">// &lt;- error here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time it&#8217;s saying &#8220;multiple, non-overriding abstract methods were found&#8221;. Functional interfaces can have only <strong>one</strong> method.</p>

<h2>Extension</h2>

<p>What about the case of an interfaces that extends another interfaces?</p>

<p>Let&#8217;s create a new functional interface called <code>A</code> and another called <code>B</code>. <code>B</code> extends <code>A</code>. <code>B</code> is still &#8220;functional&#8221;. It inherits the parents <code>apply</code> method as you&#8217;d expect.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanted to make this clearer, you can also override the functional method from the parent.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can verify it works as a functional interface if we use it as a lambda. So I&#8217;ll implement a little method to show that a lambda can be assigned to a type of <code>A</code> and a type of <code>B</code>. The implementation will just print out &#8220;A&#8221; or &#8220;B&#8221;.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can&#8217;t add a new abstract method to the extending interface though, as the resulting type would have two abstract methods and the compiler will error.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">illegal</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>    <span class="c1">// &lt;- error</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, you can override methods from <code>Object</code> without causing problems. You can also add default methods (also new to Java 8). As you&#8217;d probably expect, it doesn&#8217;t make sense to try and mark an abstract class as a functional interface.</p>

<h2>Summary</h2>

<p>An important point to take away was the idea that any place a functional interface is used, you can now use lambdas. Lambdas can be used in-lieu of anonymous implementations of the functional interface. Using a lambda instead of the anonymous class may seem like syntactic sugar, but they&#8217;re actually quiet different. See the <a href="http://baddotrobot.com/2014/04/08/classes-vs-functions">Classes vs. Functions</a> post for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method References in Java 8]]></title>
    <link href="http://baddotrobot.com/blog/2014/02/18/method-references-in-java8/"/>
    <updated>2014-02-18T21:33:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/02/18/method-references-in-java8</id>
    <content type="html"><![CDATA[<p>Java 8 brings with it method references; shortcuts that you can use anywhere you would use a lambda. The <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Oracle docs</a> describe four types of method reference but do such a poor job of describing them that I felt compelled to describe them myself.</p>

<!-- more -->


<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Oracle describe the four kinds of method reference</a> as follows.</p>

<table>
<thead>
<tr>
<th></th>
<th> Kind                                                                           </th>
<th> Example                                </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Reference to a static method                                                   </td>
<td> <code>ContainingClass::staticMethodName</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a particular object                         </td>
<td> <code>ContainingObject::instanceMethodName</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of an arbitrary object of a particular type    </td>
<td> <code>ContainingType::methodName</code></td>
</tr>
<tr>
<td></td>
<td> Reference to a constructor                                                     </td>
<td> <code>ClassName::new</code></td>
</tr>
</tbody>
</table>


<p>Static and constructor references are straight forward but it&#8217;s their description of instance method references that muddies the waters. What on earth is an instance method of an arbitrary object of a particular type? Aren&#8217;t all objects <em>of a</em> particular type?  Why is it important that the object is <em>arbitrary</em>?</p>

<h2>What they should have written</h2>

<p>It&#8217;s talking about four types of method reference; constructor references, static method references, instance method references and what it calls instance method references of a particular type. The last one is really just another kind of instance method reference.</p>

<p>What they should have written is this.</p>

<table>
<thead>
<tr>
<th></th>
<th> Kind                                                                 </th>
<th> Syntax                           </th>
<th> Example                  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Reference to a static method                                         </td>
<td> <code>Class::staticMethodName</code>        </td>
<td> <code>String::valueOf</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a specific object                 </td>
<td> <code>object::instanceMethodName</code>     </td>
<td> <code>x::toString</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a arbitrary object supplied later </td>
<td> <code>Class::instanceMethodName</code>      </td>
<td> <code>String::toString</code></td>
</tr>
<tr>
<td></td>
<td> Reference to a constructor                                           </td>
<td> <code>ClassName::new</code>                 </td>
<td> <code>String::new</code></td>
</tr>
</tbody>
</table>


<p>or as lambdas</p>

<table>
<thead>
<tr>
<th></th>
<th> Kind                                                                 </th>
<th> Syntax                           </th>
<th> As Lambda                  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Reference to a static method                                         </td>
<td> <code>Class::staticMethodName</code>        </td>
<td> <code>(s) -&gt; String.valueOf(s)</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a specific object                 </td>
<td> <code>object::instanceMethodName</code>     </td>
<td> <code>() -&gt; "hello".toString()</code> <strong>†</strong></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a arbitrary object supplied later </td>
<td> <code>Class::instanceMethodName</code>      </td>
<td> <code>(s) -&gt; s.toString()</code></td>
</tr>
<tr>
<td></td>
<td> Reference to a constructor                                           </td>
<td> <code>ClassName::new</code>                 </td>
<td> <code>() -&gt; new String()</code></td>
</tr>
</tbody>
</table>


<p>I found their description of the two confusing. I prefer to think of the first as an instance method of a <em>specific</em> object known ahead of time and the second as an instance method of an arbitrary object that will be <em>supplied</em> later. Interestingly, this means the first is a <em>closure</em> and the second is a <em>lambda</em>. One is <em>bound</em> and the other <em>unbound</em>.</p>

<p>The distinction between a method reference that closes over something (a closure) and one that doesn&#8217;t (a lambda) may be a bit academic but at least it&#8217;s a more formal definition than Oracle&#8217;s unhelpful description. If you&#8217;re interested in the difference between a closure and a lambda, check out my <a href="http://baddotrobot.com/blog/2010/07/13/lambdas-vs-closures">previous article</a>.</p>

<h2>The &#8220;closure&#8221; method reference</h2>

<p>The example above (<code>x::toString</code>) is an instance method reference using a closure. It creates a lambda that will call the <code>toString</code> method on the instance <code>x</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="nl">x:</span><span class="o">:</span><span class="n">toString</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the signature of <code>function</code> looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">function</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">supplier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">supplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Supplier</code> interface must provide a string value (the <code>get</code> call) and the only way it can do that is if it&#8217;s been supplied to it on construction. It&#8217;s equivalent to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice here that the lambda has no arguments (it uses the &#8216;hamburger&#8217; symbol). This shows that the value of <code>x</code> isn&#8217;t available in the lambda&#8217;s local scope and so can only be available from outside it&#8217;s scope. It&#8217;s a closure because must close over <code>x</code>.</p>

<p>The anonymous class equivalent really makes this obvious, it looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span> <span class="c1">// &lt;- closes over &#39;x&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All three of these are equivalent. Compare this to the lambda variation of an instance method reference where it doesn&#8217;t have it&#8217;s argument explicitly passed in from an outside scope.</p>

<h2>The &#8220;lambda&#8221; method reference</h2>

<p>The other example (<code>String::toString</code>) is similar to the previous one, it calls the <code>toString</code> method of a string only this time, the string is supplied to the function that&#8217;s making use of the lambda and not passed in from an outside scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">lambdaExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">toString</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>String</code> part looks like it&#8217;s referring to a class but it&#8217;s actually referencing an instance. It&#8217;s confusing, I know but to see things more clearly, we need to see the function that&#8217;s making use of the lambda. It looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">function</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the string value is passed directly to the function, it would look like this as a fully qualified lambda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">lambdaExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">,</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you expand it fully to an anonymous interface, it looks like this. The <code>x</code> parameter is made available and not closed over. It&#8217;s a lambda rather than a closure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">lambdaExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// &lt;- takes the argument as a parameter, doesn&#39;t need to close over it</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>The difference between the two types of instance method reference is interesting but basically academic. Sometimes, you&#8217;ll need to pass something in, other times, the usage of the lambda will supply it for you. My gripe is with Oracle&#8217;s documentation. They make a big deal out of the distinction but fail to describe it in an easily understandable way. It&#8217;s <em>the</em> canonical reference material but is just plain confusing. It feels like interns are producing this stuff.</p>

<p>If you liked this post, you might like my course on <a href="https://www.udemy.com/whats-new-in-java-8/">Udemy</a>. For a limited time only, get <a href="https://www.udemy.com/whats-new-in-java-8/?couponCode=BLOG10">10% off with this coupon</a>!</p>

<h2>Caveat</h2>

<p><strong>†</strong> There&#8217;s a caveat here; the example isn&#8217;t a closure, so my comment about that being a distinguishing feature isn&#8217;t quiet true. If, as in the later examples, it closes over some <code>x</code> (as is more likely), great. If however, you use a literal value (as in my starred example), it wont close over the term <code>x</code> so it&#8217;s back to being a lambda. So doesn&#8217;t <em>have</em> to be a closure, it&#8217;s just more than likely to be one. For example;</p>

<figure class='code'><figcaption><span>This time the &#8220;reference to an instance method of a arbitrary object supplied later&#8221; is a Lambda, not a closure</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// String x = &quot;hello&quot;;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="s">&quot;hello&quot;</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA Retina Support JDK 1.7+]]></title>
    <link href="http://baddotrobot.com/blog/2014/01/20/intellij-idea-retina-support/"/>
    <updated>2014-01-20T19:33:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/01/20/intellij-idea-retina-support</id>
    <content type="html"><![CDATA[<p>Despite IntelliJ&#8217;s <a href="http://blog.jetbrains.com/idea/2013/09/jdk7_compatibility/">improvements to retina support</a>, IDEA still looks shabby when running a retina display with the JDK 7 and 8. See for yourself below.</p>

<p><a href="../../../../../images/IntelliJ_on_1.6.png"><span class='caption-wrapper'><img class='caption' src='http://baddotrobot.com/../../../../images/IntelliJ_on_1.6.png' width='266' height='148' title='Running on JDK 6'><span class='caption-text'>Running on JDK 6</span></span></a>
<a href="../../../../../images/IntelliJ_on_1.7.png"><span class='caption-wrapper'><img class='caption' src='http://baddotrobot.com/../../../../images/IntelliJ_on_1.7.png' width='266' height='148' title='Running on JDK 7'><span class='caption-text'>Running on JDK 7</span></span></a></p>

<!-- more -->


<p><a href="../../../../../images/IntelliJ_on_1.8ea.png"><span class='caption-wrapper'><img class='caption' src='http://baddotrobot.com/../../../../images/IntelliJ_on_1.8ea.png' width='266' height='148' title='Running on JDK 8'><span class='caption-text'>Running on JDK 8</span></span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another TeamCity Build Monitor]]></title>
    <link href="http://baddotrobot.com/blog/2014/01/01/another-teamcity-build-monitor/"/>
    <updated>2014-01-01T09:57:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/01/01/another-teamcity-build-monitor</id>
    <content type="html"><![CDATA[<p>My build monitor is a little different from the rest; it aggregates the status of all the builds on TeamCity to a single visual pass or fail. When build radiators show the status of individual builds on a single page, people can be tempted to ignore specific builds. They learn to ignore that flaky build or disregard the one that they haven&#8217;t been working on.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ZMQn-J435Lk "></iframe></div>


<p><a href="http://github.com/tobyweston/radiate">Radiate</a> takes a zero tolerance approach. Every build is as important as the next (else why have separate builds at all?) so Radiate hides which build is actually failing. Red or green, that&#8217;s all you get. It&#8217;s up to you to investigate the cause.</p>

<!-- more -->


<p>Build monitors are supposed to be highly visual, you should be able get some important piece of information from across the other side of the office. The <em>only</em> important piece of information for Radiate, is whether the build is passing or failing. Anything else is superfluous. After all, to investigate a failure, we&#8217;d typically open up the TeamCity page.</p>

<p>It&#8217;s got a couple of other neat features; it gives aggregated progress when builds are running, changing it&#8217;s status as soon as a failure is detected; it runs as a standalone executable jar, <code>.exe</code> or as a Windows screen saver (<code>.scr</code>); and it tries to be as light as possible on configuration (just configure an environment variable with your TeamCity host, and it figures out the rest).</p>

<p>Have a look on <a href="http://github.com/tobyweston/radiate">Github</a> and let me know what you think below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Currying Functions in Java & Scala]]></title>
    <link href="http://baddotrobot.com/blog/2013/07/21/curried-functions/"/>
    <updated>2013-07-21T06:58:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/07/21/curried-functions</id>
    <content type="html"><![CDATA[<p>Currying is the technique of transforming a function with multiple arguments into a function with just one argument. The single argument is the value of the first argument from the original function and the function returns another single argument function. This in turn would take the second original argument and itself return another single argument function. This chaining continues over the number of arguments of the original. The last in the chain will have access to all of the arguments and so can do whatever it needs to do.</p>

<p>You can turn any function with multiple arguments into it&#8217;s curried equivalent. Let&#8217;s have a look at this in action.</p>

<!-- more -->


<h2>Java</h2>

<p>For example, in Java, you can convert</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>into something like this (where <code>Function&lt;A, B&gt;</code> defines a single method <code>B apply(A a)</code>).</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">add</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">apply</span><span class="o">(</span><span class="kd">final</span> <span class="n">Integer</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling the original method</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>                       <span class="c1">// gives 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>and calling the curried version</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">add</span><span class="o">();</span>                          <span class="c1">// gives back a instance of Function&lt;[A, B]&gt;</span>
</span><span class='line'><span class="n">add</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>                 <span class="c1">// gives back a instance of Function&lt;[A, B]&gt;</span>
</span><span class='line'><span class="n">add</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>         <span class="c1">// gives 2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Java 8</h2>

<p>In Java 8, it&#8217;s much less verbose using the new lambda syntax.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">add</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scala</h2>

<p>In Scala, the regular uncurried function would look like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As Scala supports curried functions, you can turn this into it&#8217;s curried version simply by separating out the arguments.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// shorthand</span>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is shorthand for writing it out like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// longhand</span>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span> <span class="o">=&gt;</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">(</span><span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the REPL to show how they&#8217;re called;</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'>scala&gt; def add<span class="o">(</span>x: Int<span class="o">)(</span>y: Int<span class="o">)</span>: <span class="nv">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>     |   x + y
</span><span class='line'>     | <span class="o">}</span>
</span><span class='line'>add: <span class="o">(</span>x: Int<span class="o">)(</span>y: Int<span class="o">)</span>Int
</span><span class='line'>
</span><span class='line'>scala&gt; add<span class="o">(</span>1<span class="o">)</span> _
</span><span class='line'>res1: <span class="nv">Int</span> <span class="o">=</span>&gt; <span class="nv">Int</span> <span class="o">=</span> &lt;Function&gt;
</span><span class='line'>
</span><span class='line'>scala&gt; <span class="o">(</span>add<span class="o">(</span>1<span class="o">)</span> _<span class="o">)</span>.apply<span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>res2: <span class="nv">Int</span> <span class="o">=</span> 2
</span><span class='line'>
</span><span class='line'>scala&gt; add<span class="o">(</span>1<span class="o">)(</span>1<span class="o">)</span>
</span><span class='line'>res3: <span class="nv">Int</span> <span class="o">=</span> 2
</span></code></pre></td></tr></table></div></figure>


<p>and working with the longhand version;</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'>scala&gt; def add2<span class="o">(</span>x: Int<span class="o">)</span>: <span class="o">(</span><span class="nv">Int</span> <span class="o">=</span>&gt; Int<span class="o">)</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>     |   <span class="o">(</span>y: Int<span class="o">)</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>     |     x + y
</span><span class='line'>     |   <span class="o">}</span>
</span><span class='line'>     | <span class="o">}</span>
</span><span class='line'>add2: <span class="o">(</span>x: Int<span class="o">)</span><span class="nv">Int</span> <span class="o">=</span>&gt; Int
</span><span class='line'>
</span><span class='line'>scala&gt; add2<span class="o">(</span>1<span class="o">)</span>.apply<span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>res4: <span class="nv">Int</span> <span class="o">=</span> 2
</span></code></pre></td></tr></table></div></figure>


<p>It turns out that it&#8217;s this partial application of functions that&#8217;s really interesting. Currying in Scala allows us to defer execution and reuse functions. We&#8217;ll have a look at that in the next article.</p>

<h2>More Information</h2>

<ul>
<li><a href="https://gist.github.com/tobyweston/6027570">Gist</a></li>
<li><a href="http://www.codecommit.com/blog/scala/function-currying-in-scala">Function Currying in Scala</a></li>
<li><a href="http://danielwestheide.com/blog/2013/01/30/the-neophytes-guide-to-scala-part-11-currying-and-partially-applied-functions.html">Currying and Partially Applied Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically rebase on git pull]]></title>
    <link href="http://baddotrobot.com/blog/2013/07/09/automatically-rebase-on-git-pull/"/>
    <updated>2013-07-09T17:29:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/07/09/automatically-rebase-on-git-pull</id>
    <content type="html"><![CDATA[<p>Automaticaaly rebase your Git repository when you do a <code>pull</code>.</p>

<!-- more -->


<p>To configure your repository to always rebase when pulling;</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>git config branch.master.rebase true</span></code></pre></td></tr></table></div></figure>


<p>which turns the relevant section of your &#8216;.git/config&#8217; from</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>[branch "master"]
</span><span class='line'>  remote = origin
</span><span class='line'>  merge = refs/heads/master</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>[branch "master"]
</span><span class='line'>  remote = origin
</span><span class='line'>  merge = refs/heads/master
</span><span class='line'>  rebase = true</span></code></pre></td></tr></table></div></figure>


<p>In IntelliJ IDEA, when doing up SCM update, it may ask you how to go about the update. Here you can override the setting above to do a regular merge (which is in fact a <code>git fetch</code> followed by a <code>git merge</code> or in one command, <code>git pull --no-rebase</code>), a rebase (<code>git fetch</code>, <code>git rebase</code> or <code>git pull --rebase</code>) or rely on the setting above in your config.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate the Optimum Number of Threads]]></title>
    <link href="http://baddotrobot.com/blog/2013/06/01/optimum-number-of-threads/"/>
    <updated>2013-06-01T20:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/06/01/optimum-number-of-threads</id>
    <content type="html"><![CDATA[<p>Working out the theoretical optimal number of threads you should use for your application is fairly straightforward. You do, however, need to understand your applications runtime characteristics. Is it mostly occupied with CPU intensive work or is it mostly waiting for IO?</p>

<p>In this post, we look at how to work out a good thread pool size for your CPU and IO based tasks.</p>

<!-- more -->


<h2>CPU Bound Tasks</h2>

<p>For CPU bound tasks, Goetz (2002, 2006) recommends</p>

<pre><code>threads = number of CPUs + 1
</code></pre>

<p>Which is intuitive as if a CPU is being kept busy, we can&#8217;t do more work than the number of CPUs. Goetz purports that the additional CPU has been shown as an improvement over omitting it (2006), but others don&#8217;t agree and suggest just the number of CPUs is optimal.</p>

<h2>IO Bound Tasks</h2>

<p>Working out the optimal number for IO bound tasks is less obvious. During an IO bound task, a CPU will be left idle (waiting or blocking). This idle time can be better used in initiating another IO bound request.</p>

<p>Subramaniam (2011, p.31) describes the optimal number of threads in terms of the following formula.</p>

<pre><code>threads = number of cores /  (1 – blocking coefficient)
</code></pre>

<p><img src="../../../../../images/optimal-threads/subramaniam.gif"></p>

<p>And Goetz (2002) describes the optimal number of threads in terms of the following.</p>

<pre><code>threads = number of cores * (1 + wait time / service time)
</code></pre>

<p><img src="../../../../../images/optimal-threads/goetz-1.gif"></p>

<p>Where we can think of <code>wait time / service time</code> as a measure of how contended the task is.</p>

<h2>Goetz and Subramaniam Agree</h2>

<p>Just out of interest, we can show that both IO bound formulas are equivalent. Starting with Goetz’s formula, we assert that <code>w+s=1</code> and remove the service time (<code>s</code>) giving the following</p>

<p><img src="../../../../../images/optimal-threads/goetz-2.gif"></p>

<p>We can continue by multiplying both sides by <code>1-w</code> reducing the right hand side to <code>c</code> before reversing the operation and revealing Subramaniam’s expression.</p>

<p><img src="../../../../../images/optimal-threads/goetz-3.gif"></p>

<p><img src="../../../../../images/optimal-threads/goetz-4.gif"></p>

<p><img src="../../../../../images/optimal-threads/subramaniam.gif"></p>

<p>This post originally appeared on my concurrency library <a href="http://tempusfugitlibrary.org/">tempus-fugit</a>&#8217;s project site.</p>

<h2>References</h2>

<ul>
<li>Goetz, B. 2002. <a href="http://www.ibm.com/developerworks/java/library/j-jtp0730/index.html">Java theory and practice: Thread pools and work queues</a>. IBM DeveloperWorks.</li>
<li>Goetz, B. Peierls, T. Bloch, J. Bowbeer, J. Holmes, D. and Lea, D. 2006. <a href="http://amzn.to/NrXQPZ">Java Concurrency in Practice</a>. 1st Edition. Addison Wesley.</li>
<li>Subramaniam, V. 2011. <a href="http://amzn.to/NrXXuI">Programming Concurrency on the JVM</a>. 1st Edition. Pragmatic Bookshelf.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing my Book]]></title>
    <link href="http://baddotrobot.com/blog/2013/05/24/writing-my-book/"/>
    <updated>2013-05-24T13:57:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/05/24/writing-my-book</id>
    <content type="html"><![CDATA[<p>There haven&#8217;t been many posts on the blog recently because I&#8217;ve been super-busy working on my book <a href="http://baddotrobot.com/book/">Essential Acceptance Testing</a>. It&#8217;s published via <a href="https://leanpub.com/essential_acceptance_testing">Leanpub</a> and talks about the typical acceptance testing strategy and how, more often than not, it&#8217;s driven by dogma rather than by a genuine testing need.</p>

<p>Acceptance testing in it&#8217;s generally accepted form, is so full of duplication and cruft that gaining software confidence can come at a high price. It doesn&#8217;t have to be this way. The book talks about how we can reclaim all the good parts of acceptance testing without suffering the long build times and specification overload.</p>

<p>It also talks about when not to bother; how gaining software confidence isn&#8217;t always about testing. Fast feedback and writing software that&#8217;s cheap to change can be an effective alternative to testing and help shorten the path from concept to cash.</p>

<!-- more -->


<p>Keep an eye on my <a href="http://baddotrobot.com/book">blog&#8217;s book page</a> for the latest news and head over to <a href="https://leanpub.com/essential_acceptance_testing" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">Leanpub</a> to purchase a copy or <a href="http://samples.leanpub.com/essential_acceptance_testing-sample.pdf" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">download a free sample</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac Tips]]></title>
    <link href="http://baddotrobot.com/blog/2013/05/24/mac-tips/"/>
    <updated>2013-05-24T10:28:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/05/24/mac-tips</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://baddotrobot.com/blog/2013/05/24/mac-tips#show_hidden_finder">Show hidden files and folders in Finder</a></li>
<li><a href="http://baddotrobot.com/blog/2013/05/24/mac-tips#show_hidden_open">Show hidden files and folders from an application&#8217;s Open dialog</a></li>
<li><a href="http://baddotrobot.com/blog/2013/05/24/mac-tips#duplicates">Remove Duplicate Entries in &#8216;Open With&#8217; Menu</a></li>
<li><a href="http://baddotrobot.com/blog/2013/05/24/mac-tips#calculator">Show your workings with Calculator</a></li>
</ul>


<!-- more -->


<h2><a id="show_hidden_finder"></a>Show hidden files and folders in Finder</h2>

<p><img class="right" src="../../../../../images/relaunch_finder.png" width="220" height="290" title="'Relaunch Finder'" ></p>

<p>From a terminal window</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>defaults write com.apple.Finder AppleShowAllFiles YES
</span></code></pre></td></tr></table></div></figure>


<p>Then relaunch Finder with Option (<img src="http://baddotrobot.com/images/ks_option.gif" alt="Option" />) + Right Click, <code>Relaunch</code>. Switch back using <code>NO</code>.</p>

<h2><a id="show_hidden_open"></a>Show hidden files and folders from an application&#8217;s Open dialog</h2>

<p>When you&#8217;ve got the dialog open, just hit Command (<img src="http://baddotrobot.com/images/ks_command.gif" alt="Command" />) + Shift (<img src="http://baddotrobot.com/images/ks_shift.gif" alt="Shift" />) + <code>.</code> to toggle. Nice.</p>

<h2><a id="duplicates"></a>Remove Duplicate Entries in &#8216;Open With&#8217; Menu</h2>

<p>Remove duplicate entries from the terminal window.</p>

<p><img src="../../../../../images/duplicate_open_with_banner.png" title="'Relaunch Finder'" ></p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain <span class="nb">local</span> -domain user
</span></code></pre></td></tr></table></div></figure>


<h2><a id="calculator"></a>Show your Workings with Calculator</h2>

<p>Hitting Command (<img src="http://baddotrobot.com/images/ks_command.gif" alt="Command" />) + T in the Calculator app shows the paper tape so you can see you past calculations!</p>

<p><img class="right" src="../../../../../images/calculator-paper-tape.png" width="205" height="258" title="'Calculator's Paper Tape'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Git Commands]]></title>
    <link href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands/"/>
    <updated>2013-01-23T19:55:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2013/01/23/useful-git-commands</id>
    <content type="html"><![CDATA[<p><a id="top"></a>More as a reminder to myself than anything, here&#8217;s a bunch of Git commands I fund useful.</p>

<ul>
<li><a href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands#create_remote_branch">Create a branch on a remote (pushing a branch to a remote)</a></li>
<li><a href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands#delete_remote_branch">Delete a remote branch</a></li>
<li><a href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands#switch_to_ssh">Switch from HTTP to git/ssh</a></li>
<li><a href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands#set_upstream_branch">Set upstream branch</a></li>
<li><a href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands#status">Abbreviated status</a></li>
<li><a href="http://baddotrobot.com/blog/2013/01/23/useful-git-commands#alias">Useful Git aliases</a></li>
</ul>


<!-- more -->


<h2><a id="create_remote_branch"></a>Create a branch on a remote (pushing a branch to a remote)</h2>

<p>Having created a new feature branch locally, you can push to a remote, creating a new branch destination using.</p>

<pre><code>git push -u origin feature_branch
</code></pre>

<p>The <code>-u</code> sets upstream tracking and is optional.</p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="delete_remote_branch"></a>Delete a remote branch</h2>

<p>Having pushed your feature branch,</p>

<pre><code>git push origin feature_branch
</code></pre>

<p>delete locally,</p>

<pre><code>git branch -d feature_branch
</code></pre>

<p>then delete remotely,</p>

<pre><code>git push origin --delete feature_branch
</code></pre>

<p>which is short hand for <code>git push origin :feature_branch</code>. The colon looks out of place but its really just the everyday syntax of <code>git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code> with a empty string representing the local branch. Effectively, it&#8217;s saying, take no branch from my local branch and push it to the remote branch.</p>

<p>More on remote branches from <a href="http://gitready.com/beginner/2009/02/02/push-and-delete-branches.html">git ready</a></p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="switch_to_ssh"></a>Switch from HTTPS to git/ssh</h2>

<p>If you&#8217;re using HTTPS as your fetch url (check your <code>.git/config</code> file), you&#8217;ll likely be asked for your username and password on each push. Switch to git/ssh with the following (assuming you&#8217;ve <a href="https://help.github.com/articles/generating-ssh-keys">setup ssh</a>).</p>

<pre><code>git remote rm origin
git remote add origin git@github.com:tobyweston/playground
</code></pre>

<p>This will alter your <code>.git/config</code> file from</p>

<pre><code>[remote "origin"]
    url = https://github.com/tobyweston/playground.git
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>to</p>

<pre><code>[remote "origin"]
    url = git@github.com:tobyweston/playground.git
    fetch = +refs/heads/*:refs/remotes/origin/*
</code></pre>

<p>but won&#8217;t associate the remote branch with a local one. You&#8217;ll need to <a href="#set_upstream_branch">set an upstream branch</a> for that.</p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="set_upstream_branch"></a>Set upstream branch</h2>

<p>Trying a <code>git pull</code> after <a href="#switch_to_ssh">switching from HTTPS to git/ssh above</a> will give you an error.</p>

<pre><code>You asked to pull from the remote 'origin', but did not specify
a branch. Because this is not the default configured remote
for your current branch, you must specify a branch on the command line.
</code></pre>

<p>Set the upstream branch with</p>

<pre><code>git branch --set-upstream master origin/master
</code></pre>

<p>which should report back,</p>

<pre><code>Branch master set up to track remote branch master from origin.
</code></pre>

<p>and change your <code>.git/config</code> file from</p>

<pre><code>[remote "origin"]
</code></pre>

<p>to</p>

<pre><code>[branch "master"]
    remote = origin
    merge = refs/heads/master
</code></pre>

<p>Do the same for any other remote branches.</p>

<p><a href="#top">« Back to the list</a></p>

<h2><a id="status"></a>Abbreviated status</h2>

<p>The standard <code>git status</code> output</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="c"># On branch master</span>
</span><span class='line'><span class="c"># Your branch is ahead of &#39;origin/master&#39; by 1 commit.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Changes not staged for commit:</span>
</span><span class='line'><span class="c">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span>
</span><span class='line'><span class="c">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># modified:   LegoWars/BattleShip.h</span>
</span><span class='line'><span class="c"># modified:   LegoWars/BattleShip.m</span>
</span><span class='line'><span class="c">#</span>
</span></code></pre></td></tr></table></div></figure>


<p>The abbreviated <code>git status -sb</code> version</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git status -sb
</span><span class='line'><span class="c">## master...origin/master [ahead 1]</span>
</span><span class='line'> M LegoWars/BattleShip.h
</span><span class='line'> M LegoWars/BattleShip.m
</span></code></pre></td></tr></table></div></figure>


<h2><a id="alias"></a>Useful Git aliases and config</h2>

<p>Set the proxy, your user name and a couple of useful configurations. Feed straight in from the shell.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global http.proxy myproxy:8080
</span><span class='line'>git config --global user.email me@email.com
</span><span class='line'>git config --global user.name me
</span><span class='line'>git config --global color.ui <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some useful aliases.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'>git config --global alias.last <span class="s2">&quot;log -1 HEAD&quot;</span>
</span><span class='line'>git config --global alias.st <span class="s2">&quot;status -sb&quot;</span>
</span><span class='line'>git config --global alias.lg <span class="s2">&quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset abbrev-commit --date=relative&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Recommended Reading</h2>

<div>
    <script type="text/javascript">
    function trackOutboundLink(link, category, action) {

        try {
            _gaq.push(['_trackEvent', category , action]);
        } catch(err){}

        setTimeout(function() {
            document.location.href = link.href;
        }, 100);
    }
    </script>
</div>


<p><a href="http://www.amazon.co.uk/gp/product/1934356727/ref=as_li_ss_il?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356727&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img class="right" src="http://ecx.images-amazon.com/images/I/41iwlU4g9yL._SL160_.jpg" title="'Pragmatic Guide to Git (Pragmatic Programmers)'" ></a>
<a href="http://www.amazon.co.uk/gp/product/1934356158/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356158&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img class="right" src="http://ecx.images-amazon.com/images/I/519CeNsejdL._SL160_.jpg" title="'Pragmatic Version Control Using Git'" ></a></p>

<ul>
<li><a href="http://www.amazon.co.uk/gp/product/1934356727/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356727&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Pragmatic Guide to Git (Pragmatic Programmers)</a>, Travis Swicegood</li>
<li><a href="http://www.amazon.co.uk/gp/product/1934356158/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1934356158&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Pragmatic Version Control Using Git: 1 (Pragmatic Starter Kit)</a>, Travis Swicegood</li>
<li><a href="http://www.amazon.co.uk/gp/product/1430218339/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=1430218339&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Pro Git (Expert&#8217;s Voice in Software Development)</a>, Scott Chacon</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java Stack vs Deque]]></title>
    <link href="http://baddotrobot.com/blog/2013/01/10/stack-vs-deque/"/>
    <updated>2013-01-10T12:12:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2013/01/10/stack-vs-deque</id>
    <content type="html"><![CDATA[<p>Java has long had a <a href="http://baddotrobot.com/blog/2009/01/24/inheritance-vs-composition/">badly written</a> implementation of a stack. The stack is a great example of single responsibility; it&#8217;s supposed to implement LIFO and only LIFO behaviour. Java ignores this principle with the default implementation of <code>Stack</code>. It extends <code>Vector</code> and so is implemented in terms of inheritance rather than aggregation. It&#8217;s <em>both</em> a <code>Stack</code> <em>and</em> a <code>Vector</code>. They haven&#8217;t made the situation any better when recently deprecating <code>Stack</code> in favour of <code>Deque</code>.</p>

<!-- more -->


<h2>Don&#8217;t Use Deque</h2>

<p>I can understand that Sun/Oracle never corrected the mistake given Java&#8217;s principle of backwards compatibility but I was surprised when I noticed they recommend using Deque instead.</p>

<blockquote><p>A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class.</p><footer><strong>Oracle Documentation for Stack</strong> <cite><a href='http://docs.oracle.com/javase/7/docs/api/index.html?java/util/Stack.html'>docs.oracle.com/javase/7/docs/&hellip;</a></cite></footer></blockquote>


<p>A deque is a double ended queue, by definition it is <strong>not</strong> a stack. It allows LIFO <em>and</em> FIFO behaviour. I can&#8217;t see why Sun/Oracle are so happy to abandon encapsulation like this.</p>

<h2>Why is this Important?</h2>

<p>If you don&#8217;t control what operations a stack class can perform, you open up the class for non-stack like uses. For example, you might be able to insert objects into the middle of the stack. If client code starts using this behaviour, there&#8217;s immediately a  dependency on it. The client code now depends on the <em>implementation</em> and not the <em>role</em> of your class. You won&#8217;t be able to swap out the implementation of your stack without potentially forcing changes to clients.</p>

<p>You could argue that this is the client code&#8217;s choice. For classes with well known semantics like the stack, any client using non-stack behaviour should appreciate the coupling and be able to make an informed decision. For more domain or business specific behaviours however, it&#8217;s very likely that clients will benefit by avoiding this coupling. Forcing clients to depend on defined roles rather than implementation allows for flexibility of substitution.</p>

<h2>Use Encapsulation</h2>

<p>It seems like we should really use a <code>Stack</code> abstraction to define the <em>role</em> and composition to implement the stack. That way, we&#8217;re able to substitute any implementation and expect our clients to still work. We won&#8217;t be able to break encapsulation by exposing methods we shouldn&#8217;t and we&#8217;ll allow clients to substitute alternative implementations.</p>

<p>For example,</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="n">T</span> <span class="nf">pop</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DequeStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Deque</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayDeque</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">deque</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">deque</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s important to note that I&#8217;m not saying use composition to enforce encapsulation though. The example above restricts what can be done with the underlying <code>Deque</code>. It&#8217;s <em>hiding the implementation details</em> and exposing the role through an interface. It&#8217;s using information hiding to achieve encapsulation. That&#8217;s not to say that you can&#8217;t achieve the same thing using inheritance.</p>

<p>For example, the naive <code>BoundedStack</code> implementation below is still a <code>Stack</code>. It inherits it, it has an &#8220;is a&#8221; relationship with <code>Stack</code>. Any stack implementation most certainly does not have a &#8220;is a&#8221; relationship with list (<code>Vector</code>) or double ended queue (<code>Deque</code>).</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoundedStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">DequeStack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">push</span><span class="o">(</span><span class="n">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">&lt;</span> <span class="n">UPPER_BOUND</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">count</span><span class="o">++;</span>
</span><span class='line'>            <span class="n">deque</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">T</span> <span class="nf">pop</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">count</span><span class="o">--;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">deque</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Related</h2>

<div class="wikipedia">
  
  <h2>information hiding</h2>
  <div>
    <p>In <a href="http://en.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, <strong>information hiding</strong> is the principle of segregation of the <i><a href="http://en.wikipedia.org/wiki/Design" title="Design">design</a> decisions</i> in a <a href="http://en.wikipedia.org/wiki/Computer_program" title="Computer program">computer program</a> that are most likely to change, thus protecting other parts of the program from extensive modification if the design decision is changed. The protection involves providing a stable <a href="http://en.wikipedia.org/wiki/Interface_(computer_science)" title="Interface (computer science)" class="mw-redirect">interface</a> which protects the remainder of the program from the implementation (the details that are most likely to change).
</p>
  </div>
  <a href="http://en.wikipedia.org/wiki/Information_hiding" target="_blank">Read more on Wikipedia</a>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sending Messages vs Method Invocation]]></title>
    <link href="http://baddotrobot.com/blog/2012/10/06/sending-messages-vs-method-invocation/"/>
    <updated>2012-10-06T12:12:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/10/06/sending-messages-vs-method-invocation</id>
    <content type="html"><![CDATA[<p><img class="right" src="../../../../../images/letter.jpg" title="'Send a message'" ></p>

<p>In object-oriented languages, some people talk about sending messages whilst others talk about invoking methods. In this post, we&#8217;ll take a look at the conceptual difference in terminology and the more concrete, technical differences. Whilst we&#8217;re on the topic, we&#8217;ll look at the difference between a function and a method and discuss the difference between an object reference and a pointer.</p>

<!-- more -->


<h2>Sending Messages</h2>

<p>The terminology of sending a message to an object is partly historical. Languages like Smalltalk adopted it as a metaphor when working with objects. To understand why the metaphor is useful, we have to look at things before the advent of object oriented languages. In these days, procedural programming relied on subroutines (functions and procedures) to modify state. With no concept of &#8220;objects&#8221;, state is simply associated with data structures. So applying a function to those structures would produce new state and applying a procedure would modify state.</p>

<p>With the arrival of &#8220;objects&#8221; to encapsulate state <em>and</em> behaviour, the messaging metaphor invites us to think about objects performing their own operations. Objects communicate by sending each other <em>messages</em>. Instead of calling a function directly in procedural programming, you send a message to an object requesting it to perform one of it&#8217;s own subroutines. This allows us to think about <em>methods</em> in more abstract terms. Rather than think about data structures and the functions (and procedures) that affect them, we can focus on <em>behaviours</em> [2].</p>

<blockquote><p>So sending messages helps us think in object-oriented terms rather than procedural or functional terms; we think in terms of behaviours rather than data structures. However, there is also a more concrete, technical difference.</p></blockquote>

<p>Sending a message means the receiving object decides how to handle a message whilst a call to a function (or procedure) is a more static or class level notion [1]. In lanaguages like Java, the function (or procedure) lookup is still done, it&#8217;s just done behind the scenes at runtime. By calling a method, for example, <code>person.eat(apple)</code>, the reference to <code>person</code> allows the JVM to associate the object with the procedure <code>eat</code>. It&#8217;s a process called <a href="http://en.wikipedia.org/wiki/Dynamic_dispatch">dynamic dispatch</a>.</p>

<p>It&#8217;s very similar in concept to the distinction between functions and methods.</p>

<h2>Functions vs Methods</h2>

<p>Functions and procedures are <a href="http://en.wikipedia.org/wiki/Subroutine">subroutines</a> disassociated from the data they act upon. Methods on the other hand are subroutines associated with objects. Functions are class level subroutines whereas methods are object level subroutines. For example, a <em>method</em> in Objective-C, is compiled down to a C <em>function</em> with additional parameters, one of which is the receiver object (<code>id</code>). It associates the function with this object.</p>

<p>Lets have a look at that in detail. For example, our method above would look like the following in Objective-C.</p>

<figure class='code'><figcaption><span>Objective-C Method  </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">eat:</span><span class="p">(</span><span class="n">Food</span><span class="o">*</span><span class="p">)</span> <span class="n">food</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// nom nom nom</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The equivalent C function, would look like this. It isn&#8217;t associated with an instance of a class and would be globally available to all modules. It doesn&#8217;t make sense in the object-oriented world as there is no noun associated with the action. There is no <em>thing</em> eating the food. The act of eating simply affects some data structure. A C function is equivalent to a static class method in Java [3].</p>

<figure class='code'><figcaption><span>C Function  </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">eat</span><span class="p">(</span><span class="n">Food</span><span class="o">*</span> <span class="n">food</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// nom nom nom</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Objective-C would compile down the method above into a C function something like the following [3, pg 96-97][4]. The important thing to note is the <code>id</code> parameter, which is the receiving object of the message.</p>

<figure class='code'><figcaption><span>Objective C method compiled into a C Function  </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">eat</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">Food</span><span class="o">*</span> <span class="n">food</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// nom nom nom</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Object References</h2>

<p>So where does object references come in?</p>

<p>Java uses <em>object references</em> not <em>pointers</em>. Pointers are variables who&#8217;s <em>value</em> is an address in memory. With pointer arithmetic, you can manually manipulate this value to zip around memory locations. Java prevents you from directly accessing memory locations directly like this. Because a pointer is really just a memory location, it can point to anything, a integer, a float, a <code>struct</code> or even to a function [3]. Java&#8217;s object references point to objects only.</p>

<p>So in [1] when <a href="https://www.informit.com/articles/printerfriendly.aspx?p=1571983">Chisnall</a> says &#8220;in Java, a message call looks like a call to a function pointer in a C structure&#8221;, he&#8217;s referring to a C structure that contains a pointer to a function being dereferenced and how Java&#8217;s method invocation syntax looks similar. You access a C structure using the dot notation, so a structure containing a pointer to our C function might look like the following.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">person</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">eat</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">struct</span> <span class="n">person</span> <span class="n">person</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and dereferencing it would look similar to Java</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">person</span><span class="p">.</span><span class="n">eat</span><span class="p">(</span><span class="n">apple</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the context of his article, Chisnall is highlighting that Objective-C makes it&#8217;s syntax as distinct as possible when talking about message sending. It&#8217;s a useful idea as it makes the terminology of sending messages explicit and baked into the way you work with the language. With Java, you have to work harder to conceptually take up the metaphor. Java&#8217;s terminology is around calling a method so it brushes over some of these subtleties.</p>

<h2>Roundup</h2>

<p>For me, the challenge of working with object-oriented designs is keeping my object-oriented head on. It&#8217;s easy to slip into a procedural or functional way of coding but when the domain fits, I find that object-oriented solutions just <em>click</em>. To that end, I jump on any tool that helps remind me to think in terms of objects and their intercommunication, behaviours not accessors (tell don&#8217;t ask). I find the message sending metaphor useful in doing just that.</p>

<h2>References</h2>

<div>
    <script type="text/javascript">
    function trackOutboundLink(link, category, action) {

        try {
            _gaq.push(['_trackEvent', category , action]);
        } catch(err){}

        setTimeout(function() {
            document.location.href = link.href;
        }, 100);
    }
    </script>
</div>


<p>[1] Objective-C for Java Programmers, <a href="https://www.informit.com/articles/printerfriendly.aspx?p=1568732">Part 1</a>, <a href="https://www.informit.com/articles/printerfriendly.aspx?p=1571983">Part 2</a>, David Chisnall <br/>
[2] <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/OOP_ObjC/Introduction/Introduction.html">Object-Oriented Programming with Objective-C</a>, Apple.    <br/>
[3] <a href="http://amzn.to/Tm1Sh1" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Learn Objective-C for Java Developers</a>, James Bucanek
[4] <a href="http://www.mikeash.com/pyblog/friday-qa-2009-03-20-objective-c-messaging.html">Object-C Messages</a>, Mike Ash</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Daily Standups Don't Work]]></title>
    <link href="http://baddotrobot.com/blog/2012/09/15/daily-standups-dont-work/"/>
    <updated>2012-09-15T06:12:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/09/15/daily-standups-dont-work</id>
    <content type="html"><![CDATA[<p>At some point, standups have stopped working for me. They&#8217;ve certainly moved away from the original intention to improve collaboration and communication. I&#8217;m not sure I can put my finger on why, but I&#8217;m just not getting much out of them any more. It&#8217;s led me to think that standups per se just don&#8217;t work. At least in most of the environments I&#8217;ve encountered. So I&#8217;ve been thinking about what could work in their place and I think its just to <em>talk</em> more.</p>

<!-- more -->


<h2>Typical Problems</h2>

<p>Some typical problems I see again and again include standups taking too long; standups becoming a tool to chase progress or apply pressure and attendees glazing over when it&#8217;s not their turn to speak. <a href="http://jchyip.blogspot.co.uk/">Jason Yip</a> talks about some other <a href="http://martinfowler.com/articles/itsNotJustStandingUp.html#HowDoWeKnowWhenAStand-upIsGoingPoorly">common problems</a>. The biggest problem that I see though, is that standups have become more about the &#8220;status update&#8221; than communication and collaboration.</p>

<h2>It&#8217;s Not A Status Update</h2>

<p>If your standup is more about the status update than anything else, the rot may have already set in. It&#8217;s a shame  the first sentence of the <a href="https://en.wikipedia.org/wiki/Stand-up_meeting">wikipedia page</a> defines a standup as being a &#8220;status update&#8221;. In fact, nearly every page on the subject talks about it in terms of a &#8220;status update&#8221;. Nonsense.</p>

<p>In my view, it should be about communication and collaboration. The trouble with &#8220;status update&#8221; as a phrase, is that it has dark undertones. It has <em>reporting</em> connotations and can promote a command and control relationship. It&#8217;s pretty common for team leads, project managers or other stakeholders to coerce the standup into a tool for reporting. <strong>That&#8217;s what the board is for.</strong></p>

<p>When it becomes a tool to apply pressure or push a project management agenda, things can get pretty negative. Good team leads, managers and stakeholders will use the board for status updates and go round the team individually as they need to. It&#8217;s all too easy to condense this into an intense experience at standup but it won&#8217;t tell them the whole story. Those in project management roles have to work hard to preserve the spirit of the standup and get management information in other ways.</p>

<h2>Communication &amp; Collaboration</h2>

<p>If the spirit of the standup is really about communication and collaboration, why don&#8217;t we apply the same principles we apply with Extreme Programming, namely, to apply it all the time? <strong>I&#8217;d prefer standups to be more organic.</strong> Why not jump up and start a conversation when you feel like it? Grab anyone who looks up. Why prescribe a meeting first thing, when you may not have anything to talk about? When you&#8217;re working in the same physical proximity, it&#8217;s natural to overhear and contribute to the conversations around you. Standup, get involved.</p>

<p>The standard <a href="http://www.extremeprogramming.org/rules/standupmeeting.html">three report items</a> feel a bit arbitrary and anyway, they&#8217;re really intended as a guide, not a mantra. I&#8217;d go further than that and suggest that even the idea of <em>reporting</em> at standup is the thin end of the wedge. The three questions promote the idea of <em>reporting</em> when we should be promoting the idea of <em>collaboration</em>.</p>

<p>In the same way, wouldn&#8217;t it be nice if you pair with whomever, whenever the time is right? Rather than move board avatars around in the morning at standup to organising pairs, wouldn&#8217;t it be nice to seek a collaborator as you need to and change them often? A bit like socks.</p>

<h2>The Good Bits</h2>

<p>Of course, none of this may be ringing true for you. Standups might be the perfect forum for communication for your team. Despite the title, I don&#8217;t mean to suggest it plainly never works. I just want to emphasise how difficult it is to get it to work and avoid the pitfalls. There may even be a simpler, less leading mechanisms to promote communication and keep team focus. I&#8217;m talking here about <em>natural</em> conversation and social cohesion.</p>

<p>To offer at least a token effort at balance; even in a dysfunctional standup, I can still find a few things useful. I do like to start the day with a focusing session. A bit like <a href="http://baddotrobot.com/blog/2012/07/20/getting-things-done-i">GTD</a> where you ask &#8220;what is my immediate next action?&#8221;. It can also be a convenient time to pair up for the day and unfortunately, it does work as a status update tool for management.</p>

<h2>That&#8217;s All Folks</h2>

<p>It&#8217;s down to individuals in the team to engage. Forcing a standup meeting isn&#8217;t going to do that. Individuals should be nosey, keeping an eye on the board and the backlog. They don&#8217;t need to stand in front of the board and watch cards go up or move to the right in a daily standup to do that. They don&#8217;t need to listen to a synopsis of yesterday&#8217;s work if they were listening to it unfold yesterday. Management need another forum if they&#8217;re hijacking your standup and as an engaged individual, it&#8217;s up to you to champion that change.</p>

<p>Like a lot of the agile practices, its easy to fall into the habit of the daily standup without stopping to consider why we&#8217;re doing so. If you really don&#8217;t think you&#8217;re getting much out of it, stop and question things. Following agile practices mechanically isn&#8217;t the goal in itself; it&#8217;s about more than that.</p>

<p>If you fancy shaking things up, <a href="http://www.planningforfailure.com/">Todd Charron</a>&#8217;s created an interactive course with practical ideas to improve your standup. <a href="http://www.udemy.com/improv-your-agile-scrum-stand-up?couponCode=pffcommented">Check it out</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diff Excel with Java and Hamcrest]]></title>
    <link href="http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest/"/>
    <updated>2012-09-14T13:21:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/09/14/diff-excel-with-java-and-hamcrest</id>
    <content type="html"><![CDATA[<p>Comparing Excel spreadsheets programmatically can be tricky. Projects like <a href="http://poi.apache.org/">Apache POI</a> and <a href="http://jexcelapi.sourceforge.net/">JExcel</a> let you build and interrogate sheets but don&#8217;t offer a built in compare function. Fortunately, <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> offers a simplified API for building sheets in Java and a bunch of <a href="http://hamcrest.org/">Hamcrest</a> matchers to find any differences.</p>

<!-- more -->


<h2>Building Spreadsheets</h2>

<p><a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> takes a sheet as a template and allows you to apply changes programmatically to it. For example, you can start with a blank invoice sheet and insert items and totals from your Java code. It wraps Apache POI to make things easier to work with.</p>

<p>However you create your sheet, it&#8217;d be nice to be able to unit test it. <a href="http://github.com/tobyweston/simple-excel">Simple-excel</a> offers <code>Matcher</code>s to do just that. You can write unit style tests, making assertions against individual cells or rows or you can write coarser grained tests that compare every cell of one sheet against every cell of another.</p>

<h2>Matchers</h2>

<p>The matchers you&#8217;re most likely to use can be found in the <code>bad.robot.excel.matchers.Matchers</code> class. They include <code>WorkbookMatcher</code> and <code>CellMatcher</code> but there are a bunch of finer grained matchers in the <code>bad.robot.excel.matchers</code> package.</p>

<h2>Comparing Sheets</h2>

<p>Using the <code>WorkbookMatcher</code>, you can compare an entire workbook to another. The comparison is made against POI <code>Workbook</code> objects, so load these using POI.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Workbook</span> <span class="n">actual</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">expected</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(...);</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">actual</span><span class="o">,</span> <span class="n">sameWorkbook</span><span class="o">(</span><span class="n">expected</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you use the <code>MatcherAssert.assertThat</code> from Hamcrest rather than the vanilla JUnit version (<code>org.junit.Assert.assertThat</code>), you&#8217;ll see useful information on a failure.</p>

<pre><code>java.lang.AssertionError:
Expected: entire workbook to be equal
     but: cell at "C14" contained &lt;"bananas"&gt; expected &lt;nothing&gt;,
          cell at "C15" contained &lt;"£1,850,000"&gt; expected &lt;"£1,850,000.00"&gt;,
          cell at "D16" contained &lt;nothing&gt; expected &lt;"Tue Sep 04 06:30:00"&gt;
</code></pre>

<p>Other failures might include differing number of sheets, differently named sheets, different number of rows or columns. They&#8217;re all aggregated in the failure message so you don&#8217;t need to fix one and run the test again. It&#8217;ll try and report all errors up front.</p>

<h2>Finer Grained Comparisons</h2>

<p>Lets say we have a class, <code>InvoiceItem</code> representing a sale item. We&#8217;d like to append this line item as a row on an invoice. It might look something like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">InputStream</span> <span class="n">template</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;invoiceTemplate.xls&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Workbook</span> <span class="n">invoice</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HSSFWorkbook</span><span class="o">(</span><span class="n">template</span><span class="o">);</span>
</span><span class='line'><span class="n">InvoiceItem</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InvoiceItem</span><span class="o">();</span>
</span><span class='line'><span class="n">item</span><span class="o">.</span><span class="na">appendTo</span><span class="o">(</span><span class="n">invoice</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>appendTo</code> method uses <a href="http://github.com/tobyweston/simple-excel">simple-excel</a> to append the row to the invoice (ignore the details for now) but we&#8217;d like to verify that the sheet has been modified in the right way. Using the <code>CellMatcher</code>, you can do something like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">stringCell</span><span class="o">(</span><span class="s">&quot;Mac Book Pro&quot;</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">numberCell</span><span class="o">(</span><span class="mf">999.99</span><span class="n">D</span><span class="o">))));</span>
</span><span class='line'><span class="n">assertThat</span><span class="o">(</span><span class="n">getCellForCoordinate</span><span class="o">(</span><span class="n">coordinate</span><span class="o">(</span><span class="n">E</span><span class="o">,</span> <span class="mi">3</span><span class="o">),</span> <span class="n">invoice</span><span class="o">),</span> <span class="n">is</span><span class="o">(</span><span class="n">equalTo</span><span class="o">(</span><span class="n">blankCell</span><span class="o">()));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where the <code>getCellForCoordinate</code> returns a POI <code>Cell</code> object and <code>equalTo</code> is statically imported from <code>bad.robot.excel.matchers.Matchers</code> (not regular Hamcrest <code>equalTo</code>);</p>

<p>When it fails, you&#8217;ll get something friendly like this;</p>

<pre><code>java.lang.AssertionError:
Expected: is &lt;999.99D&gt;
     but: cell at "E2" contained &lt;1999.99D&gt; expected &lt;999.99D&gt;
</code></pre>

<p>It matches on type and content of the cell. So the string cell <code>"999.99"</code> is different than the numeric cell <code>999.99</code>. It doesn&#8217;t yet match against styling (things like borders or background colours).</p>

<p>The project is open source. As always, I&#8217;d love to hear how you get on using it. Check it out and the leave a comment if you like it. Issues are tracked on the <a href="http://github.com/tobyweston/simple-excel/issues">project site</a>.</p>

<h2>Recommended Reading</h2>

<div>
    <script type="text/javascript">
    function trackOutboundLink(link, category, action) {

        try {
            _gaq.push(['_trackEvent', category , action]);
        } catch(err){}

        setTimeout(function() {
            document.location.href = link.href;
        }, 100);
    }
    </script>
</div>


<p><a href="http://www.amazon.co.uk/gp/product/0321503627/ref=as_li_ss_il?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321503627&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img class="right" src="http://ws.assoc-amazon.co.uk/widgets/q?_encoding=UTF8&ASIN=0321503627&Format=_SL160_&ID=AsinImage&MarketPlace=GB&ServiceVersion=20070822&WS=1&tag=baddotrobotco-21" title="'Growing Object Oriented Software'" ></a></p>

<ul>
<li><a href="http://www.amazon.co.uk/gp/product/0321503627/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321503627&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Growing Object-Oriented Software, Guided by Tests</a>, Steve Freeman, Nat Pryce</li>
<li><a href="http://www.amazon.co.uk/gp/product/839348930X/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=839348930X&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Practical Unit Testing with TestNG and Mockito</a>, Tomek Kaczanowski</li>
<li><a href="http://www.amazon.co.uk/gp/product/0321784154/ref=as_li_ss_tl?ie=UTF8&camp=1634&creative=19450&creativeASIN=0321784154&linkCode=as2&tag=baddotrobot-21" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">ATDD by Example: A Practical Guide to Acceptance Test-driven Development</a>, Markus Gärtner</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play it Next App]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/28/play-it-next/"/>
    <updated>2012-08-28T19:29:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/28/play-it-next</id>
    <content type="html"><![CDATA[<p><a href="../../../../../images/play_it_next.png"><img class="right" src="../../../../../images/play_it_next.png" width="224" height="336" title="'Play it Next'" ></a></p>

<p>I&#8217;m often listening to something on my iPhone whilst thinking about what track to play next. It&#8217;s a shame the iPod app doesn&#8217;t let me queue up the next track without interrupting the one that&#8217;s playing.</p>

<p>I didn&#8217;t realise how much this bothered me until I found the workaround in the form of the awesome <a href="http://playitnextapp.com/">Play it Next</a> app. Now I can queue up the next track and get all deejay without breaks in my music. It&#8217;s like iTunes Up Next feature only for your iPod. I like it so much, I just had to mention it here.</p>

<p>Find it on the <a href="http://itunes.apple.com/us/app/play-it-next/id549859020?ls=1&amp;mt=8">app store</a>. I definitely recommend it but don&#8217;t take my word for it, check out the <a href="http://www.appcraver.com/play-it-next/">AppCraver review</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part III)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/13/oauth-and-http-part-iii/"/>
    <updated>2012-08-13T19:13:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/13/oauth-and-http-part-iii</id>
    <content type="html"><![CDATA[<p>In previous posts, we looked at setting up authentication with OAuth to access FreeAgent&#8217;s API. We&#8217;ve got something working but a couple of caveats remain when working with it from a rich client.</p>

<!-- more -->


<h2>The Workflow</h2>

<p>To summarise the workflow;</p>

<ol>
<li>Ask your user to authorise your application (on the target application&#8217;s servers).</li>
<li>You&#8217;ll be given an <em>authorisation token</em> from the above. Stash it.</li>
<li>Exchange your <em>authorisation token</em> for an <em>access token</em>. Stash this too (along with the <em>refresh token</em>).</li>
<li>Make requests passing along the <em>access token</em> to prove you&#8217;re you.</li>
</ol>


<h2>The Authorisation Request</h2>

<p>It&#8217;s not always clear, but step 1. above is a one time operation. You don&#8217;t make this request every time your programmatically want to access the target application. It also implies that the <code>GET</code> request is made from the browser. There are &#8220;out of band&#8221; options but in-browser is the simplest.</p>

<h2>The Access Token Request</h2>

<p>Again, it&#8217;s not always clear but the <em>access token</em> request only needs to be made once. In fact, if you&#8217;ve successfully retrieved an <em>access token</em> and then request a new one, FreeAgent will error with a basic authentication failure.</p>

<pre><code>HTTP/1.1 401 Unauthorized
Server: nginx/1.0.14
Date: Mon, 13 Aug 2012 18:13:44 GMT
Content-Type: text/html; charset=utf-8
Status: 401 Unauthorized
WWW-Authenticate: Basic realm="Application"
X-UA-Compatible: IE=Edge,chrome=1
X-Runtime: 0.099212
X-Rev: 9301db5
X-Host: web3

HTTP Basic: Access denied.
</code></pre>

<p>I think it&#8217;s trying to say that your application isn&#8217;t allowed to request a new access token whilst one is already valid.</p>

<h2>Refreshing the Access Token</h2>

<p>In a successful exchange of <em>authorisation code</em> for <em>access token</em>, you should see a response like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;access_token&quot;</span><span class="o">:</span><span class="s2">&quot;2YotasFasFzCXcCsMWp1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;token_type&quot;</span><span class="o">:</span><span class="s2">&quot;bearer&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;expires_in&quot;</span><span class="o">:</span><span class="mi">604800</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;refresh_token&quot;</span><span class="o">:</span><span class="s2">&quot;1Gzv0XG5Qx2T3JOkFlKWyj&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In OAuth, The <code>expires_in</code> value should be the time in seconds that the <em>access token</em> is valid.</p>

<blockquote><p>RECOMMENDED. The lifetime in seconds of the access token. For example, the value &#8220;3600&#8221; denotes that the access token will expire in one hour from the time the response was generated. If omitted, the authorization server SHOULD provide the expiration time via other means or document the default value.</p><footer><strong>OAuth 2.0 Specification</strong> <cite><a href='https://tools.ietf.org/html/draft-ietf-oauth-v2-26#section-4.2.2'>tools.ietf.org/html/&hellip;</a></cite></footer></blockquote>


<p>FreeAgent return <code>604800</code> which is consistent with their documentation as it works out as 7 days. As this countdown starts when you exchange the tokens, I convert the number into a concrete date when I get the response. That way, I can see later if I actually need to refresh the token. However, it seems that you can refresh your token at any point.</p>

<p>The process is similar to the <a href="http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii">requesting the original <em>access token</em></a>. Make a Basic auth HTTP POST but with a slightly smaller body.</p>

<pre><code>POST /v2/token_endpoint HTTP/1.1
Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
Accept: application/json
Content-Type: application/x-www-form-urlencoded
User-Agent: Java/1.6.0_33
Host: api.freeagent.com
Connection: close
Content-Length: 127

grant_type=refresh_token&amp;refresh_token=12wXjd7SL7SLOE1sdsaX8oCgix
</code></pre>

<p>which will return something like</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;access_token&quot;</span><span class="o">:</span><span class="s2">&quot;2YotasFasFzCXcCsMWp1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;token_type&quot;</span><span class="o">:</span><span class="s2">&quot;bearer&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;expires_in&quot;</span><span class="o">:</span><span class="mi">604800</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FreeAgent, OAuth &amp; HTTP (Part II)]]></title>
    <link href="http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii/"/>
    <updated>2012-08-12T11:13:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2012/08/12/oauth-and-http-part-ii</id>
    <content type="html"><![CDATA[<p>In the <a href="http://baddotrobot.com/blog/2012/08/11/oauth-and-http-part-i">previous post</a>, we walked through requesting &#8220;authorisation&#8221; from <a href="https://dev.freeagent.com/docs/oauth">FreeAgent</a> using OAuth. In this next post, we&#8217;ll look at the next steps, requesting an <em>access token</em> and actually making client API calls to our target application.</p>

<!-- more -->


<h2>After Authorisation</h2>

<p>Once you&#8217;ve got the <em>authorisation code</em> but before actually being able to access target resources, you need to exchange the code for an <em>access token</em>. If you don&#8217;t know what I&#8217;m talking about in terms of authorisation, refer back to the <a href="http://baddotrobot.com/blog/2012/08/11/oauth-and-http-part-i">previous post</a>.</p>

<p>To request the access token, you make a HTTP <code>POST</code> to the <em>token endpoint</em>. The request should give you back a <em>temporary</em> token which is required in <em>every subsequent</em> request to the target resources.</p>

<h2>Access Token Request</h2>

<p>The HTTP <code>POST</code> for FreeAgent requires <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">basic auth</a> using <em>client id</em> and <em>client secret</em> as the username and password. That means supplying a <code>Authorization</code> header with base 64 encoded username and password, separated by a colon. So,</p>

<pre><code>client_id:client_secret
</code></pre>

<p>Should be encoded and sent over in the header. It&#8217;ll look something like this.</p>

<pre><code>Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
</code></pre>

<p>The <code>POST</code> body should include the following <a href="http://baddotrobot.com/blog/2012/06/11/http-encoding-schemes">x-www-form-urlencoded</a> parameters.</p>

<ul>
<li><code>grant_type=authorization_code</code></li>
<li><code>code=</code>the authorisation code (see <a href="http://baddotrobot.com/blog/2012/08/11/oauth-and-http-part-i">previous post</a>)</li>
<li><code>redirect_uri=</code>your redirect URI</li>
</ul>


<p>FreeAgent differs from a lot of other OAuth implementations where the information is passed along as query parameters to a <code>GET</code> request.</p>

<p>The request should also include an <code>Accept</code> header of <code>application/xml</code> or <code>application/json</code>.</p>

<h2>The Request</h2>

<p>So, an example request would look like this.</p>

<pre><code>POST /v2/token_endpoint HTTP/1.1
Authorization: Basic Y2xpZW50X2lkOmNsaWVudF9zZWNyZXQ=
Accept: application/json
Content-Type: application/x-www-form-urlencoded
User-Agent: Java/1.6.0_33
Host: api.freeagent.com
Connection: close
Content-Length: 127

grant_type=authorization_code&amp;code=12P3AsFZXwXjd7SLOE1dsaX8oCgix&amp;redirect_uri=http%3A%2F%2Flocalhost%3A8080%2Foauth
</code></pre>

<h2>The Response</h2>

<p>Which should give back a response similar to below</p>

<pre><code>HTTP/1.1 200 OK
Server: nginx/1.0.14
Date: Sat, 11 Aug 2012 17:35:19 GMT
Content-Type: application/json;charset=UTF-8
Transfer-Encoding: chunked
Connection: close
Status: 200 OK
Cache-Control: no-store
Pragma: no-cache
ETag: "6eabf5cd4b391a5d7e6e0ded90e73d7b"
X-UA-Compatible: IE=Edge,chrome=1
X-Runtime: 0.283021
X-Rev: 9301db5
X-Host: web4

{
   "access_token":"1GwfYDOaz_rG352X-gf88aBUasP5QrG9FSasfiD13",
   "token_type":"bearer",
   "expires_in":604800,
   "refresh_token":"2sdf35SFdisaa1g-x1-MaBsdHsdO7ssgZfsSRhUVsjU"
}
</code></pre>

<h2>Using the Access Token</h2>

<p>To make fully authenticated calls to the target system, every request is made using the <em>access token</em>. Therefore, it must be extracted from the response above and stashed in your application. All that&#8217;s left to do is pass this through on every request to a protected resource.</p>

<p>In FreeAgent&#8217;s case, the token should be supplied in the <code>Authorization</code> header.</p>

<pre><code>Authorization: Bearer 1GwfYDOaz_rG35SSgf8y8aBUasP5QrG9FSasfiD13
</code></pre>

<h2>Refreshing the Access Token</h2>

<p>The access token will eventually expire (FreeAgent have set it to expire in seven days but this may change). To refresh the FreeAgent token, you send a similar <code>POST</code> request to the access token request with a few minor differences. See the <a href="https://dev.freeagent.com/docs/oauth#refreshing-the-access-token">FreeAgent documentation</a> for details.</p>

<h2>Next Up</h2>

<p>That&#8217;s about it for now. Hopefully its been useful. If there&#8217;s interest, I may continue the series and post an extended example using raw HTTP to interact with FreeAgent (not using an OAuth library). Let me know.</p>
]]></content>
  </entry>
  
</feed>
