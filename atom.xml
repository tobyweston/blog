<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bad.robot]]></title>
  <link href="http://baddotrobot.com/atom.xml" rel="self"/>
  <link href="http://baddotrobot.com/"/>
  <updated>2016-03-25T17:28:27+00:00</updated>
  <id>http://baddotrobot.com/</id>
  <author>
    <name><![CDATA[Toby Weston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Home Brew Temperature Logger]]></title>
    <link href="http://baddotrobot.com/blog/2016/03/23/homebrew-temperature-logger/"/>
    <updated>2016-03-23T21:39:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2016/03/23/homebrew-temperature-logger</id>
    <content type="html"><![CDATA[<p>Using a Raspberry Pi Zero, some cheap components and some custom software, you can build a data logger to track ambient temperature in your home for around £10. Track days, weeks and months worth of temperature data and display some pretty graphs via the web.</p>

<p><a href="../../../../../images/temperature-machine.png"><img itemprop="image" src="../../../../../images/temperature-machine.png" title="'The &#34;temperature machine&#34; in action'" alt="'The &#34;temperature machine&#34; in action'"></a></p>

<!-- more -->


<h2>Order list</h2>

<table>
<thead>
<tr>
<th></th>
<th> Item </th>
<th> Price </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> <a href="https://shop.pimoroni.com/products/raspberry-pi-zero">Raspberry Pi Zero</a> </td>
<td> £ 4</td>
</tr>
<tr>
<td></td>
<td> <a href="http://amzn.to/1T6zIc9">SanDisk 8GB microSDHC memory card</a> </td>
<td> £ 4</td>
</tr>
<tr>
<td></td>
<td> <a href="http://amzn.to/1pIKZ7m">2.54mm Header strip</a>  </td>
<td> £ 0.89</td>
</tr>
<tr>
<td></td>
<td> <a href="http://amzn.to/1RhmOHc">DS18B20 1-Wire temperature sensor</a>    </td>
<td> £ 2.49</td>
</tr>
<tr>
<td></td>
<td> 1 x 4.7k Ω resistor </td>
<td> £ 0.10</td>
</tr>
<tr>
<td></td>
<td> <a href="http://amzn.to/1Rlrbj9">Some jumper wires</a> or otherwise recycled wires with connectors </td>
<td>    £ 0.97</td>
</tr>
<tr>
<td></td>
<td> Data logging software </td>
<td> <span style="color:green;"><a href="https://github.com/tobyweston/temperature-machine">FREE</a></span></td>
</tr>
<tr>
<td></td>
<td> </td>
<td> &nbsp;</td>
</tr>
<tr>
<td></td>
<td> <strong>Total</strong> </td>
<td> <strong>£ 12.45</strong></td>
</tr>
</tbody>
</table>


<p><strong>Optional extras</strong> You might also want to consider a <a href="http://amzn.to/1RhmTKQ">USB Wifi adapter</a> (about £ 6), a case ()I like the one from <a href="https://socomponents.co.uk/shop/black-laser-cut-acrylic-raspberry-pi-zero-case-with-gpio-access/">Switched On Components</a> at £ 3.80) and a USB to TTL serial connection for headless setup. Something with a PL2302TA chip in it like <a href="http://amzn.to/1ZtRWoA">this module</a> or the <a href="https://www.adafruit.com/product/954">Adafruit console cable</a>.</p>

<h2>Setup the Hardware</h2>

<p>Connecting the temperature sensor to the Pi is straight forward. There a loads of <a href="https://www.google.co.uk/search?btnG=1&amp;pws=0&amp;q=pi+ds18b20+tutorial">tutorials on the web</a> but you&#8217;re looking to connect the following physical pins on the Pi to the following sensor connectors.</p>

<table>
<thead>
<tr>
<th>Physical Pi Pin </th>
<th> Description </th>
<th> DS18b20 Connector</th>
</tr>
</thead>
<tbody>
<tr>
<td>1 </td>
<td> 3.3v Power  </td>
<td> Power (<span style="color:red;">red</span>)</td>
</tr>
<tr>
<td>7 </td>
<td> GPIO 4      </td>
<td> Data (<span style="color:orange;">yellow</span>)</td>
</tr>
<tr>
<td>9 </td>
<td> Ground      </td>
<td> Ground (<span style="color:black;">black</span>)</td>
</tr>
</tbody>
</table>


<p>The other thing you&#8217;ll need to do is connect the 4.7k Ω between the power and data lines. This acts as a <a href="https://learn.sparkfun.com/tutorials/pull-up-resistors">pull-up resistor</a> to ensure that the Pi knows that the data line starts in a &#8220;high&#8221; state. Without it, it can&#8217;t tell if it should start as high or low; it would be left <em>floating</em>.</p>

<h2>Setup the Pi</h2>

<p>Make sure you have the following line in your <code>/boot/config.txt</code>. It will load the GPIO 1-wire driver and any attached temperature sensor should be automatically detected.</p>

<pre><code>dtoverlay=w1-gpio
</code></pre>

<p>On the sensor itself, temperature measurements are stored in an area of memory called the &#8220;scratchpad&#8221;. If everything is connected ok, the contents of the scratchpad will be written to a file under <code>/sys/bus/w1/devices/28-xxx/w1_slave</code> (where <code>xxx</code> will be a HEX number unique to your sensor). Here&#8217;s an example from my <code>w1_slave</code> file.</p>

<pre><code>4b 01 4b 46 7f ff 05 10 d8 : crc=d8 YES
4b 01 4b 46 7f ff 05 10 d8 t=20687
</code></pre>

<p>The temperature is shown as the <code>t</code> value; 20.687 °C in this case. The scratchpad allows you to program the sensor as well as read temperature data from it. See the <a href="https://www.adafruit.com/datasheets/DS18B20.pdf">data sheet</a> or <a href="">my associated README</a> for more details.</p>

<p>Once you can see the <code>w1_slave</code> file, you&#8217;re ready to install the data logging software.</p>

<h2>Setup the Data Logging Software</h2>

<p>There are lots of options to record the temperature data but for something a bit different, the <a href="https://github.com/tobyweston/temperature-machine">temperature-machine</a> software logs temperatures from multiple sensors on multiple Pi&#8217;s. It sends the data to a nominated &#8220;server&#8221; Pi and the server stores it all in a round robin database and serves up the charts via a web page.</p>

<p>It&#8217;s written in Scala and you&#8217;ll need the <code>sbt</code> tool to build it. To setup <code>sbt</code> follow these steps.</p>

<pre><code>$ cd /usr/local/bin
$ wget https://repo.typesafe.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.9/sbt-launch.jar
</code></pre>

<p>Create a file <code>/usr/local/bin/sbt</code> and paste the following in (take note that the max memory is set to 512 MB for the Pi Zero).</p>

<pre><code>#!/bin/bash
SBT_OPTS="-Xms512M -Xmx512M -Xss1M -XX:+CMSClassUnloadingEnabled"
java $SBT_OPTS -jar `dirname $0`/sbt-launch.jar "$@"
</code></pre>

<p>Then make it executable.</p>

<pre><code>chmod u+x ~/bin/sbt
</code></pre>

<p>Once you&#8217;ve setup SBT, clone the data logger&#8217;s Git repository and build the binary.</p>

<pre><code>$ mkdir ~/code
$ git clone https://github.com/tobyweston/temperature-machine.git ~/code/temperature-machine
$ cd ~/code/temperature-machine
$ sbt assembly
</code></pre>

<p>Then run from the project folder with the following.</p>

<pre><code>$ ./start.sh
</code></pre>

<p>The data will be stored in <code>~/.temperature</code> and you can access the web page via your internal network with something like <code>http://10.0.1.55:11900</code>. Get you&#8217;re IP address on the Pi with <code>hostname -I</code>.</p>

<h2>Add Multiple Machines</h2>

<p>Running <code>start.sh</code> will start up the app in &#8220;server&#8221; single-machine mode. It will start logging data and serve the web page but not expect any more machines to be sending it data. To support multiple machines, you need to do a little more configuration.</p>

<p>Due to the way round robin databases work, you need to say upfront how many machines you want to connect. It will support up to five sensors per machine. So the first thing is to start up the server specifying the <code>hostname</code> of each machine. To do this, you can use the <code>start-server.sh</code> script instead of <code>server.sh</code>.</p>

<pre><code>./start-server.sh bedroom garage
</code></pre>

<p>In this example, I changed the hostname of each machine to the room they&#8217;re situated in. It will start up in the server and log data sent from machines named <code>bedroom</code> and <code>garage</code>. Make sure the hostname of the machine you run this from is included in the list.</p>

<p>The next job is to run the client version on each machine, so if <code>garage</code> is my server, I&#8217;d run the following on the <code>bedroom</code> machine. Ensure this machine&#8217;s hostname matches what you setup on the server (i.e. <code>bedroom</code>).</p>

<pre><code>./start-client.sh
</code></pre>

<p>The server broadcasts it&#8217;s IP address, so any clients should automatically detect where the server is and start sending data to it.</p>

<h2>Add Multiple Sensors</h2>

<p>The 1-wire protocol allows you to chain multiple sensors, so each Pi can have any number of sensors attached. The software automatically supports up to five sensors. Connect them to your Pi and restart and they&#8217;ll be automatically detected and included in the charts.</p>

<p>I found soldering a bunch of sensor wires together along with the resistor a bit tricky so I put together a simple PCB to allow me to chain them without soldering.</p>

<p><a href="../../../../../images/temperature-machine-add-on-1.png"><img itemprop="image" src="../../../../../images/temperature-machine-add-on-1.png" width="266" height="200" title="'Save soldering with a multiple sensor add-on board'" ></a> <a href="../../../../../images/temperature-machine-add-on-2.png"><img itemprop="image" src="../../../../../images/temperature-machine-add-on-2.png" width="266" height="200" title="'With headers and resistor soldered'" ></a></p>

<h2>Start Logging Automatically</h2>

<p>There are different ways to start software automatically after a reboot. I chose to add the following to <code>/etc/rc.local</code> on the server.</p>

<pre><code>su pi -c 'cd /home/pi/code/temperature-machine &amp;&amp; ./start-server.sh garage bedroom &amp;'
</code></pre>

<p>and the following to the client.</p>

<pre><code>su pi -c 'cd /home/pi/code/temperature-machine &amp;&amp; ./start-client.sh &amp;'
</code></pre>

<p>It will run the startup scripts as the user <code>pi</code> and assumes you&#8217;ve cloned the code as above (to <code>/home/pi/code/temperature-machine</code>). After rebooting, you should see a log file and <code>pid</code> file in the same location.</p>

<p>To stop, just run the <code>stop.sh</code> script.</p>

<h2>Do Not Disturb</h2>

<p>If you&#8217;re monitoring temperatures in a bedroom, you might not want to be disturbed by the LEDs. To switch the Pi Zero LED off, see the <a href="https://www.raspberrypi.org/forums/viewtopic.php?f=29&amp;t=127336">Raspberry Pi Forum</a> and <a href="http://raspberrypi.stackexchange.com/questions/40559/disable-leds-pi-zero?noredirect=1#comment57599_40559">Stack Overflow</a> and to switch an Edimax EW-7811 LED off, see my <a href="http://baddotrobot.com/blog/2016/01/06/disable-led-for-edimax/">previous post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable Edimax Wifi Dongle's LED]]></title>
    <link href="http://baddotrobot.com/blog/2016/01/06/disable-led-for-edimax/"/>
    <updated>2016-01-06T19:39:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2016/01/06/disable-led-for-edimax</id>
    <content type="html"><![CDATA[<p>Pi specific instructions to disable the LED on the Edimax EW-7811UN USB wireless adapter.</p>

<!-- more -->


<p>The only way I found to disable the LED is by modifying the <a href="https://en.wikibooks.org/wiki/The_Linux_Kernel/Modules">kernel module</a>. Compiling that meant recompiling the associated kernel to get all the dependencies lined up.</p>

<h2>Gather Information</h2>

<p>You&#8217;ll need to know the specific kernel version. Run the following.</p>

<pre><code>$ uname -a
</code></pre>

<p>It&#8217;ll show something like this</p>

<pre><code>Linux raspberrypi 4.1.13+ #826 PREEMPT Fri Nov 13 20:13:22 GMT 2015 armv6l GNU/Linux
</code></pre>

<p>The Edimax uses the <code>8192cu</code> module. You can check it&#8217;s loaded with <code>lsmod</code>. You&#8217;ll see something like this.</p>

<pre><code>$ lsmod
Module                  Size  Used by
cfg80211              499834  0
rfkill                 22491  2 cfg80211
8192cu                569532  0
...
</code></pre>

<p>For interest, you can get more information running <code>modinfo 8192cu</code>.</p>

<pre><code>filename:       /lib/modules/4.1.13+/kernel/drivers/net/wireless/rtl8192cu/8192cu.ko
version:        v4.0.2_9000.20130911
author:         Realtek Semiconductor Corp.
description:    Realtek Wireless Lan Driver
license:        GPL
srcversion:     133EACDEB0C6BEBC3ECA8D0
vermagic:       4.1.13+ preempt mod_unload modversions ARMv6
...
</code></pre>

<h2>Get the Source</h2>

<p>You need both the <strong>module</strong> and <strong>kernel</strong> source.</p>

<p>The latest driver version (<code>v4.0.2_9000</code>) on the <a href="http://218.210.127.131/downloads/downloadsView.aspx?Langid=1&amp;PNid=21&amp;PFid=48&amp;Level=5&amp;Conn=4&amp;DownTypeID=3&amp;GetDown=false&amp;Downloads=true#2772">Realtek site</a> isn&#8217;t actually the latest version. At least, it&#8217;s been modified for the Pi. The good news is that the modified version is bundled with the Pi kernel source at <a href="https://github.com/raspberrypi/linux.git">https://github.com/raspberrypi/linux.git</a>. On the Pi, run the following (matching your running kernel version with the <code>--branch</code> option).</p>

<pre><code>$ git clone --branch=rpi-4.1.y --depth=50 https://github.com/raspberrypi/linux.git
$ ln -s linux linux-$(uname -r)
</code></pre>

<p>The <code>git clone</code> command will download the full source (including headers and all built-in drivers) into a new folder called <code>linux</code>. The symbolic link is just a handy reminder of what you&#8217;ve cloned.</p>

<p>The latest source may not match your running kernel version (<code>uname -r</code>). You can check in the <code>Makefile</code>;</p>

<pre><code>VERSION = 4
PATCHLEVEL = 1
SUBLEVEL = 15
...
</code></pre>

<p>This is version <code>4.1.15</code> whereas my version was <code>4.1.13</code>. Major versions are stored as branches in the repository (hence the <code>--branch=rpi-4.1.y</code> option above) but if like me, you version is a minor level, you have to scan the commits from the appropriate branch. For example, <a href="https://github.com/raspberrypi/linux/commit/1f2ce4a2e7aea3a2123b17aff62a80553df31e21">4.1.13</a> and <a href="https://github.com/raspberrypi/linux/commit/10f9e3bce7f3ab7ab4d09a9b78c7208c9a1455f7">4.1.12</a> were documented by <a href="https://github.com/gregkh">Greg Kroah-Hartman</a> in the commit messages. You could also try something <code>git log --oneline | grep "Linux 4.1.18"</code> to save manually scanning the logs.</p>

<p>The upshot is that you may need to roll back to the revision that is specifically for your kernel version. That&#8217;s why I used <code>--depth=50</code> in the hope of catching the revision I&#8217;m interested in.</p>

<pre><code>$ cd linux
$ git checkout 1f2ce4a2     # the SHA of your specific version, this is 4.1.13
</code></pre>

<h2>Manually Install the Headers</h2>

<p>Compiling anything in Linux usually requires you have the kernel header files available. The usual way to get these is to run <code>apt-get install linux-headers-$(uname -r)</code> but the maintainers for the Raspberry Pi linux distribution don’t make them available like this. Instead, we have to rely on the full kernel source you&#8217;ve just downloaded.</p>

<p>Create a symbolic link to fill in for the missing <code>build</code> folder in <code>/lib/modules</code> before you try and compile the driver:</p>

<pre><code>$ cd ..
$ ln -s linux /lib/modules/$(uname -r)/build
</code></pre>

<p>This creates the missing folder but points at the newly downloaded source. It&#8217;s what fixes the infamous error;</p>

<pre><code>make[1]: *** /lib/modules/4.1.13+/build: No such file or directory
</code></pre>

<h2>Setup your Config</h2>

<p>Before we build the kernel, we need to create a <code>.config</code> file containing the current kernel configuration. The current config should be in the <code>/proc/config.gz</code> file on the Pi. If the file doesn&#8217;t exist, run <code>sudo modprobe configs</code> and check again.</p>

<pre><code>$ cd linux
$ zcat /proc/config.gz &gt; .config
</code></pre>

<h2>Compile the Kernel</h2>

<p>This isn&#8217;t as scary as it sounds. We need to compile the kernel source. We&#8217;re not going to install it, but we do want to create various dependencies that are needed to compile the driver. For example, compiling the driver would fail with missing files like   <code>include/generated/autoconf.h</code> or <code>include/config/auto.conf</code>. Compiling the entire kernel is probably a bit overkill but I&#8217;ve found it easier than chasing down individual errors.</p>

<p>Before compiling the kernel, get some extra dependencies</p>

<pre><code>$ sudo apt-get install build-essential
$ sudo apt-get install libncurses5-dev      # required for menuconfig
$ sudo apt-get install bc                   # required for timeconst.h
</code></pre>

<p>You can have a go at running just <code>make</code> from the <code>linux</code> folder at this point but various options need to be set and it&#8217;s probably easier to use <code>menuconfig</code>. Make sure you created the <code>.config</code> from earlier then run the following.</p>

<pre><code>$ cd linux
$ make menuconfig
</code></pre>

<p>Scan the options but as they&#8217;re based on your current settings (via <code>.config</code>), you should just be able to quit (<code>ESC</code>, <code>ESC</code>) and something like the following will be output.</p>

<pre><code>  HOSTCC  scripts/kconfig/mconf.o
  HOSTCC  scripts/kconfig/zconf.tab.o
  HOSTCC  scripts/kconfig/lxdialog/checklist.o
  HOSTCC  scripts/kconfig/lxdialog/util.o
  HOSTCC  scripts/kconfig/lxdialog/inputbox.o
  HOSTCC  scripts/kconfig/lxdialog/textbox.o
  HOSTCC  scripts/kconfig/lxdialog/yesno.o
  HOSTCC  scripts/kconfig/lxdialog/menubox.o
  HOSTLD  scripts/kconfig/mconf
scripts/kconfig/mconf  Kconfig
configuration written to .config

*** End of the configuration.
*** Execute 'make' to start the build or try 'make help'.
</code></pre>

<p>The last remaining config files will have now been created, so you can do the actual build with;</p>

<pre><code>make ARCH=arm
</code></pre>

<p>This takes a while; on my Pi Zero, over 12 hours. There&#8217;s always the option to <a href="https://www.raspberrypi.org/documentation/linux/kernel/building.md">cross compile</a> if you&#8217;re in a hurry.</p>

<p>For extra background, I found an interesting guide on Stack Exchange about <a href="http://unix.stackexchange.com/questions/115620/configuring-compiling-and-installing-a-custom-linux-kernel/115621#115621.">Configuring, Compiling and Installing Kernels</a> (although we&#8217;re not going as far as installing the built kernel here).</p>

<h2>Modify the Driver</h2>

<p>This is the step that actually disables the LED on the dongle.</p>

<p>Locate the <code>autoconf.h</code> file in the drivers folder (<code>linux/drivers/net/wireless/rtl8192cu/include</code>) and comment out the <code>CONFIG_LED</code> macro definition. It should look like this when you&#8217;re done.</p>

<pre><code>// #define CONFIG_LED           // &lt;-- comment this line out to disable LED
#ifdef CONFIG_LED
    #define CONFIG_SW_LED
    #ifdef CONFIG_SW_LED
        //#define CONFIG_LED_HANDLED_BY_CMD_THREAD
    #endif
#endif // CONFIG_LED
</code></pre>

<h2>Compile the Driver</h2>

<p>The dependencies should all be available now, so you&#8217;re ready to compile the driver. Compile from the location of driver source (probably <code>linux/drivers/net/wireless/rtl8192cu</code>).</p>

<pre><code>$ cd linux/drivers/net/wireless/rtl8192cu
$ make ARCH=arm
</code></pre>

<h2>Test &amp; Install the Driver</h2>

<p>Once it&#8217;s compiled, remove the old driver with <code>sudo rmmod 8192cu</code> and from the driver folder, manually startup the newly compiled one; <code>sudo insmod 8192cu.ko</code>. Note that you&#8217;ll loose network connectivity after removing the old module. Make sure you&#8217;ve got a way to connect back to your Pi.</p>

<p>Running <code>modinfo 8192cu</code> doesn&#8217;t help verify the new driver as non of the meta-data has changed but you can check the datestamp of the <code>.ko</code> and you should see that there&#8217;s no LED flashing.</p>

<p>To keep the change, I renamed the patched module to <code>8192cu-led.ko</code> and copied it into the Pi&#8217;s main kernel drivers folder. I renamed the original driver to <code>8192cu-original.ko</code> and created a symbolic link for the true module name <code>8192cu.ko</code>. This is because I want to be able to swtich back easily and not have to modify any additional configuration (for example, any <code>/etc/modprobe.d/8219cu.conf</code> settings) or black lists.</p>

<pre><code>$ mv 8192cu.ko 8192cu-led.ko
$ sudo cp 8192cu-led.ko /lib/modules/4.1.13+/kernel/drivers/net/wireless/rtl8192cu/
$ cd /lib/modules/4.1.13+/kernel/drivers/net/wireless/rtl8192cu/
$ sudo mv 8192cu.ko 8192cu-original.ko
$ sudo ln -s 8192cu-led.ko 8192cu.ko
</code></pre>

<p>You should see something like this.</p>

<pre><code>$ ll
total 1332
lrwxrwxrwx 1 root root     13 Jan 12 17:58 8192cu.ko -&gt; 8192cu-led.ko
-rw-r--r-- 1 root root 672500 Jan 12 17:58 8192cu-led.ko
-rw-r--r-- 1 root root 686160 Nov 18 16:01 8192cu-original.ko
</code></pre>

<p>You can enable the original driver by reassigning the symbolic link.</p>

<h2>Common Problems</h2>

<h3>No <code>armv6l</code> folder</h3>

<pre><code>$ cd linux/arch
$ sudo ln -s arm armv6l
</code></pre>

<p>or always run the following when compiling</p>

<pre><code>make ARCH=arm
</code></pre>

<h3>Edimax Sleeps and Drops the Network</h3>

<p>Setup some config in the <code>modprobe.d</code> folder.</p>

<pre><code>$ cd /etc/modprobe.d/
$ ll
total 16
-rw-r--r-- 1 root root  73 Jan  1 19:45 8192cu.conf
$ cat 8192cu.conf
options 8192cu rtw_power_mgnt=0 rtw_enusbss=0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pair Testing Doesn't Work]]></title>
    <link href="http://baddotrobot.com/blog/2015/09/25/pair-tests-dont-work/"/>
    <updated>2015-09-25T16:57:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/09/25/pair-tests-dont-work</id>
    <content type="html"><![CDATA[<p>Either when looking for work or looking to recruit, I&#8217;ve been doing pair tests in one form or another since 2008. I&#8217;ve only recently come to the conclusion that they just don&#8217;t work. At least not reliably.</p>

<p>I&#8217;m left wondering why we still use &#8220;pair tests&#8221; for recruitment. Is it to see how candidates problem solve? How they&#8217;d be to work with? The only way to assess these things is actually to do them. Pair tests are a poor simulation. If you want to see how someone works, work with them. Don&#8217;t <em>pretend</em> to work with them.</p>

<!-- more -->


<h2>From the Interviewer Perspective</h2>

<p>If the goal is to see how candidates pair, a pair test in an interview context is just the wrong way to do it. You&#8217;re already setting things up as a <strong>test</strong> and however hard you try, it won&#8217;t be a realistic simulation. You already know the answers, so despite saying &#8220;let&#8217;s try and pair on a problem and work out the solution together&#8221;, you&#8217;re already coming to the table with huge preconceptions and are poised for judgement.</p>

<h2>From the Candidates Perspective</h2>

<p>The candidate has a right to understand what it might be like to work at your company and a pair test gives them very little information. As a candidate I&#8217;m terribly nervous, I&#8217;m full of doubt and questions about what the interviewers really want to see.</p>

<p>Candidates are often hyper-sensitive to the interviewer&#8217;s comments so when an interviewer asks what she considers an innocuous question about the exercise, it&#8217;s all to easy for the candidate to freak out. For example;</p>

<pre><code>Interviewer:            "So why have you used a `val` there and not a `def`."
Candidates inner voice: "Because that's how I like to do it... hang on, I can't say that. 
                         They know something I don't know. What is it? WHAT IS IT? Oh, my word, 
                         they think I'm an idiot. I *am* an idiot."  
</code></pre>

<p>It just comes with the territory. You&#8217;re at interview. There is a very clear and very deep seated notion of employer / employee deference at play. Candidates are often expected to want to take a job, even when they know very little about it. Remember, any interview should be a two way process. Am I right for the role and is the role right for me. It should be a partnership.</p>

<blockquote><p>During my last round of recruitment using pair testing, I made a huge effort to put candidates at ease. We asked candidates to bring code with them to extend and made it clear there is no right or wrong answer. Yet, without exception, all of them showed signs of stress, panicked and basically got them selves into a muddle.</p></blockquote>

<h2>Not Everyone Solves Problems the Same Way</h2>

<p>When you ask a candidate to solve a problem, however trivial you might think it is, you&#8217;re basically asking them to come up with a solution in thirty seconds. That&#8217;s not how I work in my day job. I&#8217;ll chew over a problem, try one or two things, roll back, have another go. I think about what I&#8217;m trying to do and that might take a minute. I don&#8217;t hack the first thing that comes into my head.</p>

<p>As an example, I did a pair test with a TV broadcasting company recently. They asked me to solve the <a href="https://github.com/tobyweston/shopping_basket">Shopping Basket Problem</a>. I floundered when I was put was on the spot but had another go later. At home, I spent an hour or so and came up with something I was really pleased with, including an elegant way to <a href="https://github.com/tobyweston/shopping_basket/blob/master/src/main/scala/shopping/Fruit.scala">mixin</a> offers to shopping items.</p>

<pre><code>case object Banana extends Fruit(51) with ThreeForTwo
case object Apple extends Fruit(12) with TwoForOne
case object Pineapple extends Fruit(95)
</code></pre>

<h2>Not Objective</h2>

<p>There is often no clear yes or no result to a pair test. Because of the stressful nature, you can&#8217;t be sure you&#8217;re getting the best out of candidates. People often don&#8217;t take this into account and assume the simulation was realistic. Best case scenario: someone flies through the exercise and gets everything &#8220;right&#8221;. Are they an easy hire? Is there more to them?</p>

<blockquote><p>In my recent round of recruitment, we offered four roles and each of them basically messed up the pair test. Each of them panicked or went off in a weird direction in a moment of stress. There&#8217;s no coming back for the candidate when that happens. I&#8217;m hugely proud that we understood things well enough to still make offers, after what might have been seen as a &#8220;fail&#8221;.</p></blockquote>

<h2>A Better Way</h2>

<p>Rather than simulate a working environment, create a real working environment. It&#8217;s not always practical to ask a candidate to work with you for a week on your projects but you can invite candidates to an assessment day or hackathon.</p>

<h2>Assessment Days</h2>

<p>Batch your candidates into cohorts and ask them to pair with <em>each other</em> whilst you observe. Solve a sensible but fun problem over the course of an entire day and get them to explain their choices and experiences.</p>

<p>Rotate the pairs and get everyone on your dev team involved. Get them to walk around the room to observe candidates. As you have the time, you can mix in more traditional one-to-one interviews towards the end of the day. Oh, and don&#8217;t forget to provide lunch.</p>

<h2>Summary</h2>

<p>It is really hard to be objective in assessing candidates using pair testing. Partly because this kind of assessment is inherently subjective. Pair testing doesn&#8217;t lend itself to critical thinking as there is no clear critique. Trying to identify objective criteria for code is a waste of your time; &#8220;quality&#8221; is not quantitative.</p>

<p>Candidates and interviewers come to pair testing with expectations and bias, knowingly or otherwise (search for framing, anchoring and cognitive bias). It means the thing isn&#8217;t fair from the start. You might get lucky and it&#8217;ll work out but from my experience, you&#8217;ll get more false negatives than positive outcomes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easily Switch JDK on Mac]]></title>
    <link href="http://baddotrobot.com/blog/2015/09/10/easily-switch-jdk-on-mac/"/>
    <updated>2015-09-10T19:47:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/09/10/easily-switch-jdk-on-mac</id>
    <content type="html"><![CDATA[<p>I have several versions of Java installed on my Mac. Trouble is, I can never remember where any of them are. So switching Java versions using the <code>JAVA_HOME</code> environment variable was always a pain. Then I discovered the handy <code>java_home</code> command.</p>

<pre><code>/usr/libexec/java_home -V
</code></pre>

<p>It shows the Java versions are available and where there are. For example, on my machine, the output looks like this.</p>

<!-- more -->


<pre><code>Matching Java Virtual Machines (4):
    1.8.0, x86_64:  "Java SE 8" /Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home
    1.7.0_25, x86_64:   "Java SE 7" /Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home
    1.6.0_65-b14-466.1, x86_64: "Java SE 6" /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
    1.6.0_65-b14-466.1, i386:   "Java SE 6" /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
</code></pre>

<p>If you use the alternative option <code>-v &lt;version&gt;</code>, you get the path to a specific version.</p>

<pre><code>/usr/libexec/java_home -v 1.8
</code></pre>

<p>It shows my 1.8 version lives at <code>/Library/Java/JavaVirtualMachines/jdk1.8.0.jdk/Contents/Home</code>.</p>

<h2>Switch it!</h2>

<p>To switch between versions, I can just run the following.</p>

<pre><code>export JAVA_HOME=`/usr/libexec/java_home -v 1.8` 
</code></pre>

<p>You could also add an alias to switch to a specific version;</p>

<pre><code>alias setjava8='export JAVA_HOME=`/usr/libexec/java_home -v 1.8`'
</code></pre>

<p>If you want to do something more sophisticated, you could try something like <a href="http://raibledesigns.com/rd/entry/installing_openjdk_7_on_os#comment-1311684547000">this</a> or <a href="http://nemecec.blogspot.co.uk/2012/04/os-x-switching-java-versions-easily.html">this</a>.</p>

<p><strong>Caveat:</strong> I don&#8217;t have Java on my path, if you do, switching versions using the environment variable may not work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit Functions in Scala]]></title>
    <link href="http://baddotrobot.com/blog/2015/07/14/scala-implicit-functions/"/>
    <updated>2015-07-14T18:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/07/14/scala-implicit-functions</id>
    <content type="html"><![CDATA[<p>In the <a href="http://baddotrobot.com/blog/2015/07/03/scala-implicit-parameters/">previous post</a>, we looked at implicit parameters; parameters that will be automatically passed values annotated as <code>implicit</code>. In this post, we&#8217;ll take a look at implicit functions and how they can be useful to convert things of one type to things of another.</p>

<!-- more -->


<h2>Implicit Functions</h2>

<p>Implicit functions will be called automatically if the compiler thinks it&#8217;s a good idea to do so. What that means is that if your code doesn&#8217;t compile but would, if a call was made to an implicit function, Scala will call that function to make it compile. They&#8217;re typically used to create <em>implicit conversion functions</em>; single argument functions to automatically convert from one type to another.</p>

<p>For example, the following function allows you to convert a Scala function into a instance of the Java 8 <code>Consumer</code> <a href="http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8/">single argument method</a> but still use Scala&#8217;s concise syntax.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">toConsumer</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">function</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="k">:</span> <span class="kt">Consumer</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Consumer</span><span class="o">[</span><span class="kt">A</span><span class="o">]()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">accept</span><span class="o">(</span><span class="n">arg</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">function</span><span class="o">.</span><span class="n">apply</span><span class="o">(</span><span class="n">arg</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can avoid having to write clunky anonymous class instantiation when interfacing with Java and so mimic Java&#8217;s lambda syntax. So rather than having to use the longhand version like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingJavaForEach</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">(</span><span class="k">new</span> <span class="nc">Consumer</span><span class="o">[</span><span class="kt">Element</span><span class="o">]()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">override</span> <span class="k">def</span> <span class="n">accept</span><span class="o">(</span><span class="n">element</span><span class="k">:</span> <span class="kt">Element</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span>
</span><span class='line'>  <span class="o">})</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can write this, where we just pass a Scala function to Java&#8217;s <code>forEach</code> method.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingImplicitConversion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">((</span><span class="n">element</span><span class="k">:</span> <span class="kt">Element</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The argument to <code>forEach</code> is actually a function of type <code>Element =&gt; Unit</code>. Scala recognises that the <code>toConsumer</code> method could convert this into a <code>Consumer[Element]</code> and does so implicitly.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingImplicitConversion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">function</span><span class="k">:</span> <span class="kt">ObserverS</span> <span class="o">=&gt;</span> <span class="nc">Unit</span> <span class="k">=</span> <span class="o">(</span><span class="n">observer</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">(</span><span class="n">function</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is basically short-hand for this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">exampleUsingImplicitConversion</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">function</span><span class="k">:</span> <span class="kt">ObserverS</span> <span class="o">=&gt;</span> <span class="nc">Unit</span> <span class="k">=</span> <span class="o">(</span><span class="n">observer</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">status</span><span class="o">)</span>
</span><span class='line'>  <span class="n">javaCollection</span><span class="o">.</span><span class="n">forEach</span><span class="o">(</span><span class="n">toConsumer</span><span class="o">(</span><span class="n">function</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Another Example</h2>

<p>If we have a button on we web page that we&#8217;d like to find using <a href="http://www.seleniumhq.org/projects/webdriver/">Web Driver</a>, we&#8217;d normally write something like the following, using a &#8220;locator&#8221; to locate it by <code>id</code> attribute.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">button</span><span class="k">:</span> <span class="kt">WebElement</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">findElement</span><span class="o">(</span><span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;save-button&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">click</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>It doesn&#8217;t take into account that the element might not be there when we call it (for example, when our UI uses ajax and adds the button asynchronously) and it&#8217;s also a bit verbose. We can use an implicit function to address both of these issues.</p>

<p>The fragment below uses the <a href="https://selenium.googlecode.com/git/docs/api/java/index.html?org/openqa/selenium/support/ui/WebDriverWait.html"><code>WebDriverWait</code></a> class to wait for a UI element to appear on the screen (using <code>findElement</code> to check and retrying if necessary) and so smooths out the asynchronous issues.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">waitForElement</span><span class="o">(</span><span class="n">locator</span><span class="k">:</span> <span class="kt">By</span><span class="o">)</span><span class="k">:</span> <span class="kt">WebElement</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">predicate</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=&gt;</span> <span class="nc">WebElement</span> <span class="k">=</span> <span class="k">_</span><span class="o">.</span><span class="n">findElement</span><span class="o">(</span><span class="n">locator</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">30</span><span class="o">).</span><span class="n">withMessage</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;waiting for element &#39;$locator&#39; on page &#39;${driver.getCurrentUrl}&#39;&quot;</span><span class="o">).</span><span class="n">until</span><span class="o">(</span><span class="n">predicate</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&#8217;s also an implicit function designed to convert a <code>By</code> locator into a <code>WebElement</code>. It means we can write something like the following where <code>button</code> is no longer a <code>WebElement</code>, but a <code>By</code>.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'>  <span class="k">val</span> <span class="n">button</span> <span class="k">=</span> <span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;save-button&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">button</span><span class="o">.</span><span class="n">click</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without the implicit <code>waitForElement</code> function, the code wouldn&#8217;t compile; <code>By</code> doesn&#8217;t have a <code>click</code> method on it. With the implicit function in scope however, the compiler works out that calling it (and passing in <code>create</code> as the argument), would return something that <em>does</em> have the <code>click</code> method and would compile.</p>

<h2>Single Arguments Only Please</h2>

<p>Now there&#8217;s one little bit I&#8217;ve brushed over here; namely how the <code>WebDriver</code> <code>driver</code> instance is made available. The example above assumes it&#8217;s available but it&#8217;d be nicer to pass it into the function along with <code>locator</code>. However, there&#8217;s a restriction of passing only a single argument into an implicit function. The answer is to use a second argument (using Scala&#8217;s built in <a href="http://baddotrobot.com/blog/2013/07/21/curried-functions/">currying support</a>). By combining implicit parameters the we saw in the <a href="http://baddotrobot.com/blog/2015/07/03/scala-implicit-parameters/">previous post</a>, we can maintain the elegant API.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">waitForElement</span><span class="o">(</span><span class="n">locator</span><span class="k">:</span> <span class="kt">By</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver:</span> <span class="kt">WebElement</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">predicate</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=&gt;</span> <span class="nc">WebElement</span> <span class="k">=</span> <span class="k">_</span><span class="o">.</span><span class="n">findElement</span><span class="o">(</span><span class="n">locator</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">30</span><span class="o">).</span><span class="n">withMessage</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;waiting for element &#39;$locator&#39; on page &#39;${driver.getCurrentUrl}&#39;&quot;</span><span class="o">).</span><span class="n">until</span><span class="o">(</span><span class="n">predicate</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the full example would look like this; making <code>driver</code> an implicit <code>val</code> means we can avoid a call to <code>button.click()(driver)</code>.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ExampleWebDriverTest</span> <span class="k">extends</span> <span class="n">mutable</span><span class="o">.</span><span class="nc">Specification</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=</span> <span class="nc">Browser</span><span class="o">.</span><span class="n">create</span><span class="o">.</span><span class="n">driver</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;The &#39;save&#39; button writes to the database&quot;</span> <span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">button</span> <span class="k">=</span> <span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;save&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// scala calls the implicit def to convert the button into a WebElement</span>
</span><span class='line'>    <span class="n">button</span><span class="o">.</span><span class="n">click</span><span class="o">()</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Roundup</h2>

<p>You can see from the examples above that implicit functions (and often combining them with implicit values) can make for succinct and more readable APIs. Next we&#8217;ll look at implicit classes.</p>

<p>If you&#8217;re interested in more Java bridge implicits like <code>toConsumer</code>, check out this <a href="https://gist.github.com/tobyweston/0fbb8eb114db48596e6b">gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implicit Parameters in Scala]]></title>
    <link href="http://baddotrobot.com/blog/2015/07/03/scala-implicit-parameters/"/>
    <updated>2015-07-03T18:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/07/03/scala-implicit-parameters</id>
    <content type="html"><![CDATA[<p>Scala &#8220;implicits&#8221; allow you to omit calling methods or referencing variables directly but instead rely on the compiler to make the connections for you. For example, you could write a function to convert from and <code>Int</code> to a <code>String</code> and rather than call that function <em>explicitly</em>, you can ask the compiler to do it for you, <em>implicitly</em>.</p>

<p>In the next few posts, we&#8217;ll look at the different types of implicit bindings Scala offers and show some examples of when they can be useful.</p>

<!-- more -->


<p>There are three categories of &#8220;implicits&#8221;;</p>

<ol>
<li><strong><a href="http://baddotrobot.com/blog/2015/07/03/scala-implicit-parameters/">Implicit parameters</a></strong> (aka implicit values) will be automatically passed values that have been marked as <code>implicit</code></li>
<li><strong><a href="http://baddotrobot.com/blog/2015/07/14/scala-implicit-functions/">Implicit functions</a></strong> are <code>def</code>s that will be called automatically if the code wouldn&#8217;t otherwise compile</li>
<li><strong>Implicit classes</strong> extend behaviour of existing classes you don&#8217;t otherwise control (akin to <a href="https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">categories</a> in Objective-C)</li>
</ol>


<!-- more -->


<h2>Implicit Parameters</h2>

<p>At it&#8217;s simplest, an implicit parameter is just a function parameter annotated with the <code>implicit</code> keyword. It means that if no value is supplied when called, the compiler will look for an implicit value and pass it in for you.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">multiply</span><span class="o">(</span><span class="k">implicit</span> <span class="n">by</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">value</span> <span class="o">*</span> <span class="n">by</span>
</span></code></pre></td></tr></table></div></figure>


<p>You tell the compiler what it can pass in implicitly but annotating values with <code>implicit</code></p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">multiplier</span> <span class="k">=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>and call the function like this</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">multiply</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler knows to convert this into a call to <code>multiply(multiplier)</code>. If you forget to define an implicit <code>var</code>, you&#8217;ll get an error like the following.</p>

<pre><code>error: could not find implicit value for parameter by: Int
       multiply
       ^
</code></pre>

<h2>Implicit <code>val</code>, <code>var</code> or <code>def</code></h2>

<p>You can ask the compiler to call your function with an implicit <code>val</code> (like we&#8217;ve just seen), a <code>var</code> or even another <code>def</code>. So, we could have written a function that returns an <code>Int</code> and Scala would attempt to use that instead.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">implicit</span> <span class="k">def</span> <span class="n">f</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="k">if</span> <span class="o">(</span><span class="n">monday</span><span class="o">)</span> <span class="mi">4</span> <span class="k">else</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler would try to resolve this as <code>multiply(f())</code>.</p>

<p>However, you can&#8217;t have more than one in scope. So if we have both the <code>multipler</code> value and <code>f</code> function defined as implicit and call <code>multiply</code>, we&#8217;d get the following error.</p>

<pre><code>error: ambiguous implicit values:
 both value multiplier of type =&gt; Int
 and method f of type =&gt; Int
 match expected type Int
       multiply
       ^
</code></pre>

<h2>Syntax</h2>

<p>You can only use <code>implicit</code> once in a parameter list and all parameters following it will be implicit. For example;</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">example1</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>                       <span class="c1">// x is implicit</span>
</span><span class='line'><span class="k">def</span> <span class="n">example2</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// x and y are implicit</span>
</span><span class='line'><span class="k">def</span> <span class="n">example3</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="k">implicit</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// wont compile </span>
</span><span class='line'><span class="k">def</span> <span class="n">example4</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// only y is implicit</span>
</span><span class='line'><span class="k">def</span> <span class="n">example5</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>               <span class="c1">// wont compile</span>
</span><span class='line'><span class="k">def</span> <span class="n">example6</span><span class="o">(</span><span class="k">implicit</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="k">implicit</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>      <span class="c1">// wont compile</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Example</h2>

<p>As an example, the test below uses <a href="http://www.seleniumhq.org/projects/webdriver/">Web Driver</a> (and specifically an instance of the <code>WebDriver</code> class) to check that a button is visible on screen. The <code>beVisible</code> method creates a <code>Matcher</code> that will check this for us but rather than pass in the <code>driver</code> instance explicitly, it uses an implicit <code>val</code> to do so.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">ExampleWebDriverTest</span> <span class="k">extends</span> <span class="n">mutable</span><span class="o">.</span><span class="nc">Specification</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver</span> <span class="o">=</span> <span class="nc">Browser</span><span class="o">.</span><span class="n">create</span><span class="o">.</span><span class="n">driver</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;The checkout button is visible&quot;</span> <span class="o">&gt;&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">button</span> <span class="k">=</span> <span class="nc">By</span><span class="o">.</span><span class="n">id</span><span class="o">(</span><span class="s">&quot;checkout&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="n">button</span> <span class="n">must</span> <span class="n">beVisible</span>           <span class="c1">// reads better than &#39;must beVisible(driver)&#39;   </span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">beVisible</span><span class="o">(</span><span class="k">implicit</span> <span class="n">driver</span><span class="k">:</span> <span class="kt">WebDriver</span><span class="o">)</span><span class="k">:</span> <span class="kt">Matcher</span><span class="o">[</span><span class="kt">By</span><span class="o">]</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Matcher</span><span class="o">[</span><span class="kt">By</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">apply</span><span class="o">[</span><span class="kt">S</span> <span class="k">&lt;:</span> <span class="kt">By</span><span class="o">](</span><span class="n">t</span><span class="k">:</span> <span class="kt">Expectable</span><span class="o">[</span><span class="kt">S</span><span class="o">])</span> <span class="k">=</span> <span class="n">result</span><span class="o">(</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">isDisplayed</span><span class="o">,</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;${t.value.toString} is visible&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="n">s</span><span class="s">&quot;${t.value.toString} is not visible&quot;</span><span class="o">,</span>
</span><span class='line'>      <span class="n">t</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Roundup</h2>

<p>Implicit parameters are useful for removing boiler plate parameter passing and can make your code more readable. So if you find yourself passing the same value several times in quick succession, they can help hide the duplication.</p>

<p>The Scala library often use them to define default implementations that are &#8220;just available&#8221;. When you come to need a custom implementation, you can pass one in explicitly or use your own implicit value. A good example here is the <code>sorted</code> method on <a href="http://www.scala-lang.org/api/2.11.7/#scala.collection.SeqLike"><code>SeqLike</code></a> class.</p>

<p>The really useful stuff though comes when we combine implicit parameters with the other types of &#8220;implicits&#8221;. Read more in the series to build up a picture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JMock to Scalamock Cheat Sheet]]></title>
    <link href="http://baddotrobot.com/blog/2015/05/09/jmock-to-scalamock-cheatsheet/"/>
    <updated>2015-05-09T12:41:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2015/05/09/jmock-to-scalamock-cheatsheet</id>
    <content type="html"><![CDATA[<p>An abbreviated set of JMock examples with their Scalamock equivalents.</p>

<!-- more -->


<h2>Mock Objects &amp; the &#8220;Context&#8221;</h2>

<figure class='code'><figcaption><span>Mocks and Mockery: Java / JMock </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">Mockery</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JUnit4Mockery</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">mock</span><span class="o">(</span><span class="n">ScheduledExecutorService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">ScheduledFuture</span> <span class="n">future</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">mock</span><span class="o">(</span><span class="n">ScheduledFuture</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Mocks and Mockery: Scala / Scalamock & Specs2 </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="s">&quot;A test with a mock context in scope&quot;</span> <span class="n">in</span> <span class="k">new</span> <span class="nc">MockContext</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">executor</span> <span class="k">=</span> <span class="n">mock</span><span class="o">[</span><span class="kt">ScheduledExecutorService</span><span class="o">]</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">future</span> <span class="k">=</span> <span class="n">mock</span><span class="o">[</span><span class="kt">ScheduledFuture</span><span class="o">[</span><span class="kt">Any</span><span class="o">]]</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Returns</h2>

<figure class='code'><figcaption><span>Return a value: Java / JMock </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">executor</span><span class="o">).</span><span class="na">shutdownNow</span><span class="o">();</span> <span class="n">will</span><span class="o">(</span><span class="n">returnValue</span><span class="o">(</span><span class="n">asList</span><span class="o">(</span><span class="n">waiting</span><span class="o">)));</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">waiting</span><span class="o">).</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Return a value: Scala / Scalamock </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">executor</span><span class="o">.</span><span class="n">shutdownNow</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">().</span><span class="n">returning</span><span class="o">(</span><span class="n">asList</span><span class="o">(</span><span class="n">waiting</span><span class="o">)).</span><span class="n">once</span>
</span><span class='line'><span class="o">(</span><span class="n">waiting</span><span class="o">.</span><span class="n">cancel</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="n">once</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Notes:</strong></p>

<ul>
<li><code>expects()</code> is required for zero argument method call expectations.</li>
<li>You can leave off <code>once</code>; it will default to the same behaviour</li>
</ul>


<h2>Allowing / Ignoring</h2>

<figure class='code'><figcaption><span>Allowing: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span>
</span><span class='line'>    <span class="n">allowing</span><span class="o">(</span><span class="n">executor</span><span class="o">).</span><span class="na">scheduleWithFixedDelay</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Runnable</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">class</span><span class="o">)),</span> <span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span> <span class="n">will</span><span class="o">(</span><span class="n">returnValue</span><span class="o">(</span><span class="n">future</span><span class="o">));</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">future</span><span class="o">).</span><span class="na">cancel</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Allowing: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">executor</span><span class="o">.</span><span class="n">scheduleWithFixedDelay</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">(*,</span> <span class="o">*,</span> <span class="o">*</span> <span class="o">,</span> <span class="o">*).</span><span class="n">returning</span><span class="o">(</span><span class="n">future</span><span class="o">)</span>
</span><span class='line'><span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="n">cancel</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">(</span><span class="kc">true</span><span class="o">).</span><span class="n">once</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Notes:</strong></p>

<ul>
<li>You could also add <code>.anyNumberOfTimes</code> after the <code>returning</code> call but it&#8217;s unnecessary.</li>
<li>There&#8217;s no way to distinguish the <em>intention</em> of allowing and ignoring interactions in Scalamock.</li>
</ul>


<h2>Default Values</h2>

<p>JMock will return a default value (as a dynamic proxy) if you set up an expectation but leave off a <code>returnValue</code>. In the example below, we don&#8217;t care if it returns anything so if the code under test relies on a value, but the test does not, we don&#8217;t have to express anything in the test.</p>

<figure class='code'><figcaption><span>Default Values: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">create</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the underlying code were to check, say, that the result of <code>factory.create()</code> was not an empty list with <code>if (result.isEmpty())</code>, JMock would return something sensible and we&#8217;d avoid a <code>NullPointerException</code>. You might argue that this side affect should be captured in a test but leaving it off makes the intention of expectation clearer; we only care that <code>create</code> is called, not what it returns.</p>

<p>Scalamock will return <code>null</code> by default. So the above example would give a <code>NullPointerException</code> and you&#8217;re required to do something like this. Notice we&#8217;re using a <code>stub</code> and not a <code>mock</code> here.</p>

<figure class='code'><figcaption><span>Default Values: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">stub</span><span class="o">[</span><span class="kt">Result</span><span class="o">]</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">create</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">().</span><span class="n">once</span><span class="o">.</span><span class="n">returning</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="n">result</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Any / Wildcards</h2>

<p>JMock uses <code>with</code> and Hamcrest the matcher <code>IsAnything</code> (<code>any</code>) to match anything. The type is used by the compiler.</p>

<figure class='code'><figcaption><span>Any: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span>
</span><span class='line'>    <span class="n">ignoring</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">notifyObservers</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">SomeException</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">notifyObservers</span><span class="o">(</span><span class="n">with</span><span class="o">(</span><span class="n">any</span><span class="o">(</span><span class="n">AnotherException</span><span class="o">.</span><span class="na">class</span><span class="o">)));</span>
</span><span class='line'><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the Scala version, use a <a href="http://docs.scala-lang.org/style/types.html#ascription">type ascription</a> to give the compiler a hand in the partially applied method call;</p>

<figure class='code'><figcaption><span>Any: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">notifyObservers</span><span class="o">(</span><span class="k">_:</span> <span class="kt">SomeException</span><span class="o">)).</span><span class="n">expects</span><span class="o">(*).</span><span class="n">anyNumberOfTimes</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">notifyObservers</span><span class="o">(</span><span class="k">_:</span> <span class="kt">SomeException</span><span class="o">)).</span><span class="n">expects</span><span class="o">(*).</span><span class="n">once</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Notes:</strong></p>

<ul>
<li><code>AnotherException</code> is a subtype of <code>SomeException</code> but <code>any</code> will match on literally anything. Using subtypes like this in JMock is a bit of a smell as a test won&#8217;t fail if a different subtype is thrown at runtime. It may be useful to express intent.</li>
<li><a href="http://stackoverflow.com/questions/30162263/scalamock-wildcard-argument-match-on-subtype">You can&#8217;t replicate the subtype line</a> in Scalamock; (<code>(factory.notifyObservers(_: AnotherException))</code> doesn&#8217;t compile.</li>
</ul>


<h2>Throwing Exceptions</h2>

<figure class='code'><figcaption><span>Exception: JMock / Java </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">final</span> <span class="n">Exception</span> <span class="n">exception</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">();</span>
</span><span class='line'><span class="n">context</span><span class="o">.</span><span class="na">checking</span><span class="o">(</span><span class="k">new</span> <span class="n">Expectations</span><span class="o">()</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">create</span><span class="o">();</span> <span class="n">will</span><span class="o">(</span><span class="n">throwException</span><span class="o">(</span><span class="n">exception</span><span class="o">));</span>
</span><span class='line'>    <span class="n">oneOf</span><span class="o">(</span><span class="n">factory</span><span class="o">).</span><span class="na">notifyObservers</span><span class="o">(</span><span class="n">exception</span><span class="o">);</span>
</span><span class='line'><span class="o">}});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Exception: Scalamock / Scala </span></figcaption>
 <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">exception</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Exception</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">create</span> <span class="k">_</span><span class="o">).</span><span class="n">expects</span><span class="o">().</span><span class="n">throws</span><span class="o">(</span><span class="n">exception</span><span class="o">).</span><span class="n">once</span>
</span><span class='line'><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="n">notifyObservers</span><span class="o">(</span><span class="k">_:</span> <span class="kt">Exception</span><span class="o">)).</span><span class="n">expects</span><span class="o">(</span><span class="n">exception</span><span class="o">).</span><span class="n">once</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Notes:</strong></p>

<ul>
<li>In Scalamock, <code>throws</code> and <code>throwing</code> are interchangeable.</li>
<li>Again, <code>once</code> is optional.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Learning Curve]]></title>
    <link href="http://baddotrobot.com/blog/2014/11/25/scala-learning-curve/"/>
    <updated>2014-11-25T07:09:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/11/25/scala-learning-curve</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve just started to learn Scala and are wondering what to expect, it&#8217;s typical to experience a quick ramp up in skill followed by a slower adoption of the more sophisticated features. In this post, I talk about what I think of as a typical learning curve.</p>

<p><img itemprop="image" class="center" src="../../../../../images/learning_curve.png" width="752" height="389"></p>

<p>Taken from my <a href="http://bit.ly/1DsYl9f">Pluralsight</a> course, the chart shows experience (or time) along the <code>x</code> axis and some measure of &#8220;learning&#8221; on the <code>y</code>.</p>

<!-- more -->


<h2>Milestone 1</h2>

<p>When you first start, you can expect getting up to speed with the language to be a fairly steep incline. That&#8217;s not to say that it&#8217;s difficult to get to the first plateau, so by &#8220;steep&#8221;, I really mean &#8220;short&#8221;; you can expect a relatively quick increment in learning.</p>

<p>You&#8217;ll probably sit here for a bit applying what you&#8217;ve learnt. I see this as the first milestone; to be able to build object-oriented or imperative applications using language specific constructs and features but without necessarily adopting functional programming. Just like learning any other language in the Java / C family.</p>

<h2>Milestone 2</h2>

<p>I see the next milestone as adopting functional programming techniques.</p>

<p>This is much more challenging and likely to be a shallower curve. Typically this will involve using traditional architecture design but implementing functional programming techniques in the small. You can think of this approach as <a href="http://www.johndcook.com/blog/2009/03/23/functional-in-the-small-oo-in-the-large/">&#8220;functional in the small, OO in the large&#8221;</a>. Starting to embrace a new functional way of thinking and unlearning some of the traditional techniques can be hard, hence the shallower incline.</p>

<p>Concrete examples here are more than just language syntax, so things like <a href="http://baddotrobot.com/blog/2012/04/03/scala-as-a-functional-oo-hybrid/">higher order and pure functions</a>, <a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)">referential transparency</a>, immutability and side-affect free, more declarative coding; all the things that are typically offered by <a href="http://en.wikipedia.org/wiki/Pure_function">pure</a> functional languages. <strong>The key thing here is that they&#8217;re applied in small, isolated areas.</strong></p>

<h2>Milestone 3</h2>

<p>The next challenge is working towards a more cohesive functional design; this really means adopting a functional style at a system level; architecting the entire application as functions and abandoning the object-oriented style completely. So, aiming for something like a Haskell application.</p>

<p>All the concrete functional programming mechanisms above apply but this time, throughout the system; not to isolated areas but lifted to application-wide concerns. Picking up advanced libraries like <a href="http://eed3si9n.com/learning-scalaz/index.html">Scalaz</a> seems to go hand-in-hand with this point of the curve.</p>

<h2>As a Continuum</h2>

<p>You can also think of adoption as more of a continuum with traditional imperative programming on the left and pure functionally programming on the right.</p>

<p><img itemprop="image" class="center" src="../../../../../images/continuum.png" width="591" height="368"></p>

<p>You can think of the far right as Haskell on the JVM. Haskell is a pure functional language so you don&#8217;t have any choice but to design your app in a functional way. Scala is an object-oriented / functional hybrid, it can only give you the tools. It can&#8217;t enforce functional programming; you need discipline and experience in Scala to avoid mutating state for example. Haskell will physically stop you.</p>

<p>So as you start out on the continuum using Java and move to the right, libraries like <a href="http://www.functionaljava.org/">Functional Java</a>, <a href="https://code.google.com/p/totallylazy/">Totally Lazy</a> and even <a href="https://leanpub.com/whatsnewjava8">Java 8 features</a> help you adopt a more functional style. There comes a point where a language switch helps even more. Functional idioms become a <strong>language feature</strong> rather than a <strong>library feature</strong>. The syntactical sugar of for-comprehensions are a good example.</p>

<h2>Final Thoughts</h2>

<p>Libraries like <a href="http://eed3si9n.com/learning-scalaz/index.html">Scalaz</a> make it easier to a develop a purely functional style. It&#8217;s worth noting that reaching the far right of the continuum (or top right quadrant of the learning curve) doesn&#8217;t have to be the goal. There are plenty of teams operating effectively across the continuum.</p>

<p>When you&#8217;re adopting Scala, make a deliberate decision about where you want to be on the continuum, be clear about <em>why</em> and use my learning curve as a way to gauge your progress.</p>

<p>I&#8217;ve developed a video course exclusively for <a href="http://bit.ly/1DsYl9f">Pluralsight</a> to help Java teams make the transition to Scala. If you&#8217;re interested and liked this post, <a href="http://bit.ly/1DsYl9f">check it out</a> or read my book <a href="http://amzn.to/1M0w9jZ">Learn Scala for Java Developers</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Mixins: The Right Way]]></title>
    <link href="http://baddotrobot.com/blog/2014/09/22/scala-mixins/"/>
    <updated>2014-09-22T06:09:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/09/22/scala-mixins</id>
    <content type="html"><![CDATA[<p>Scala traits are interesting because they can be used for <a href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science">inclusion polymorphism</a> <em>and</em> to <a href="http://en.wikipedia.org/wiki/Mixin">mixin</a> behaviour. I&#8217;ve found tension here though, as the former uses inheritance and the later is more about code re-use. So when a Scala class extends a trait with behaviour, it seems to go against the generally accepted view that using inheritance as a mechanism for code re-use <a href="http://baddotrobot.com/blog/2009/01/24/inheritance-vs-composition/">is a bad idea</a>.</p>

<p>It can be tricky not break the <a href="http://en.wikipedia.org/wiki/Composition_over_inheritance#Benefits">inheritance vs. composition</a> principle when using traits with behaviour. Is it clear to you when you might be?</p>

<!-- more -->


<h2>Mixins the Wrong Way</h2>

<p><a href="https://www.amazon.co.uk/Programming-Scala-Martin-Odersky/dp/0981531644/ref=as_sl_pc_ss_til?tag=baddotrobotco-21&amp;linkCode=w01&amp;linkId=DNXSQPP4AVLACD7U&amp;creativeASIN=0981531644">Odersky</a> calls traits with behaviour &#8220;mixin traits&#8221;. To be a genuine mixin trait, it should be used to mixin behaviour and not just something you inherit from. But what&#8217;s the difference? Let&#8217;s look at an example.</p>

<p>Let&#8217;s say that you have a <a href="http://martinfowler.com/eaaCatalog/repository.html">repository</a> style class who&#8217;s API talks about business operations, a <code>Customers</code> class for example. You might have an database backed version and you don&#8217;t want anything going behind your back and messing with the data; everything in production code should go through your business API.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">OracleCustomers</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">customer</span><span class="k">:</span> <span class="kt">Customer</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">getCustomer</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">CustomerId</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">getBasketValue</span><span class="o">(</span><span class="n">query</span><span class="k">:</span> <span class="kt">CustomerQuery</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">ship</span><span class="o">(</span><span class="n">query</span><span class="k">:</span> <span class="kt">CustomerQuery</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s say that you want a test fixture to allow you to quickly setup test data in your <code>Customers</code> without having to go through the production API. You can provide an implementation to a trait and collect some data together like this;</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">BackdoorCustomers</span> <span class="o">{</span>                               <span class="c1">// &lt;- bad name, this is really a &quot;fixture&quot;</span>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">val</span> <span class="n">customers</span><span class="k">:</span> <span class="kt">Customers</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">addSomeCustomersWithFullBaskets</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">customers</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">RandomCustomer</span><span class="o">().</span><span class="k">with</span><span class="o">(</span><span class="nc">RandomFullBasket</span><span class="o">()))</span>
</span><span class='line'>        <span class="n">customers</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">RandomDiscountedCustomer</span><span class="o">().</span><span class="k">with</span><span class="o">(</span><span class="nc">RandomFullBasket</span><span class="o">()))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">addSomeCustomersWithEmptyBaskets</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">customers</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">RandomCustomer</span><span class="o">())</span>
</span><span class='line'>        <span class="n">customers</span><span class="o">.</span><span class="n">add</span><span class="o">(</span><span class="nc">RandomExpiredCustomer</span><span class="o">())</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This says that extending classes must provide a value for <code>customers</code>. It implements some coarse grained test setup against <code>customers</code>. So when writing a test, it&#8217;s easy to just extend the trait and slot in an implementation of <code>customers</code>. For example an <code>InMemoryCustomers</code> or an Oracle implementation that by-passes any constraint checking the proper API might enforce.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">OracleCustomerTest</span> <span class="k">extends</span> <span class="nc">BackdoorCustomers</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">override</span> <span class="k">val</span> <span class="n">customers</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">InMemoryCustomers</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">application</span> <span class="k">=</span> <span class="nc">ApplicationBuilder</span><span class="o">.</span><span class="k">with</span><span class="o">(</span><span class="n">customers</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test</span><span class="o">(</span><span class="s">&quot;ensure basket totals are correct when discounts are applied&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="n">addSomeCustomersWithFullBaskets</span><span class="o">()</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">application</span><span class="o">.</span><span class="n">doSomethingAgainstCustomersViaTheApi</span>
</span><span class='line'>        <span class="n">result</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="n">asExpected</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we&#8217;re saying here that an <code>OracleCustomerTest</code> <em>is a</em> <code>BackdoorCustomers</code>. That doesn&#8217;t even make sense. There&#8217;s no strong notion of a <code>BackdoorCustomers</code>; it&#8217;s not a meaningful <em>noun</em>. Best case scenario, you&#8217;re upfront about the fact that it&#8217;s a fixture and rename <code>BackdoorCustomers</code> to <code>CustomersTestFixture</code> but even then, the <em>test</em> is not a <em>fixture</em>, the two are independent. <strong>One is test apparatus that supports the test, the other is the test or experiment itself</strong>.</p>

<p>It&#8217;s tempting to use traits like this under the pretense of &#8220;mixing in&#8221; behaviour but you&#8217;re really inheriting behaviour from something (that in our case) isn&#8217;t related. You&#8217;re precluding any type of substitution or inclusion polymorphism. Now arguably, substitution isn&#8217;t of great value in test code like this but it&#8217;s still a laudable goal.</p>

<h2>Proper Mixins</h2>

<p>Using inheritance to mixin behaviour contradicts the inheritance vs. composition principle. So just when is a trait with behaviour a genuine mixin? The trick is in <em>how</em> we mix it in. Before, we made the <em>types</em> inherit the trait but we could have mixed the trait into a specific <em>instance</em>.</p>

<p>For example, we can rework our trait to be a self type.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">BackdoorCustomers</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this:</span> <span class="kt">Customers</span> <span class="o">=&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">addSomeCustomersWithFullBaskets</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">add</span><span class="o">(</span><span class="nc">RandomCustomer</span><span class="o">().</span><span class="k">with</span><span class="o">(</span><span class="nc">RandomFullBasket</span><span class="o">()))</span>
</span><span class='line'>        <span class="n">add</span><span class="o">(</span><span class="nc">RandomDiscountedCustomer</span><span class="o">().</span><span class="k">with</span><span class="o">(</span><span class="nc">RandomFullBasket</span><span class="o">()))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">addSomeCustomersWithEmptyBaskets</span><span class="o">()</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">add</span><span class="o">(</span><span class="nc">RandomCustomer</span><span class="o">())</span>
</span><span class='line'>        <span class="n">add</span><span class="o">(</span><span class="nc">RandomExpiredCustomer</span><span class="o">())</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It now enforces implementers to also be a sub-type of <code>Customers</code>. This, in turn, forces us to rewrite the test</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">OracleCustomerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="n">customers</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">InMemoryCustomers</span> <span class="k">with</span> <span class="nc">BackdoorCustomers</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">val</span> <span class="n">application</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">ApplicationBuilder</span><span class="o">.</span><span class="k">with</span><span class="o">(</span><span class="n">customers</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">test</span><span class="o">(</span><span class="s">&quot;ensure basket totals are correct when discounts are applied&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now our test is not inheriting an orthogonal type. From an object-oriented perspective, it&#8217;s much cleaner. We use composition to give the test a <code>customers</code> instance but this time, we treat it as two things. The actual type of the thing is;</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="nc">InMemoryCustomers</span> <span class="k">with</span> <span class="nc">BackdoorCustomers</span>
</span></code></pre></td></tr></table></div></figure>


<p>So all the backdoor methods work along with the API methods but now we can clearer about which is which. For example,</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">customers</span><span class="o">.</span><span class="n">addSomeCustomersWithFullBaskets</span><span class="o">()</span>         <span class="c1">// &lt;- a backdoor &quot;fixture&quot; method</span>
</span><span class='line'><span class="n">application</span><span class="o">.</span><span class="n">doSomethingAgainstCustomersViaTheApi</span>    <span class="c1">// &lt;- more likely to be the method under test</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Scala is both an object-oriented language and a functional language. So unless your team is entirely behind doing things functionally, you&#8217;re still going to come across object-oriented thinking and principles. Traits that have behaviour make it awkward because functionally-thinking, you could argue that nouns aren&#8217;t important and behaviour in traits is just behaviour. So why not extend that behaviour by whatever means (including inheritance)?</p>

<p>Because Scala <em>has objects</em> you can&#8217;t really just ignore object-oriented semantics and thinking. Not unless, like I say, the entire team buy into functional only code. If that were the case, then reusable behaviour should really be represented as functions on <a href="http://tutorials.jenkov.com/scala/singleton-and-companion-objects.html">Scala singleton objects</a> and not traits. You&#8217;d be forced to use composition anyway.</p>

<p>By that logic, it feels like extending traits for re-use in a functional programming context is just lazy. Mixing behaviour &#8220;the right way&#8221; seems much less contentious.</p>

<h2>Recommended Reading</h2>

<ul>
<li><a href="http://leanpub.com/whatsnewjava8" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">What&#8217;s New in Java 8</a>, Toby Weston</li>
<li><a href="http://amzn.to/1M0w9jZ" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Learn Scala for Java Developers</a>, Toby Weston</li>
</ul>


<p>&nbsp;
&nbsp;
&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with Exceptions as Monads]]></title>
    <link href="http://baddotrobot.com/blog/2014/09/21/exceptions-as-monads/"/>
    <updated>2014-09-21T05:12:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/09/21/exceptions-as-monads</id>
    <content type="html"><![CDATA[<p>In some <a href="http://baddotrobot.com/blog/categories/exceptions/">previous posts</a>, I wrote about treating exceptions as a system wide concern. In this post, I extend that idea and talk about distinguishing between exceptional behaviour and just code that didn&#8217;t return what you wanted.</p>

<p>Pure functional languages often discourage the use of exceptions because when they are used to control execution flow, they introduce side-affects and violate <a href="http://baddotrobot.com/blog/2012/04/03/scala-as-a-functional-oo-hybrid/">purity of function</a>. By using the type system to capture exceptional behaviour and dealing with exceptions monadically, it&#8217;s much easier to provide that system wide consistently I&#8217;ve been talking about.</p>

<!-- more -->


<h2>Object-Oriented</h2>

<p><strong><em>The norm for object oriented code is to use exceptions to control execution flow.</em></strong> When you have a method that can return <code>true</code> or <code>false</code> <em>and</em> throw an exception, it might as well be returning three things. It forces clients to have to reason about logic that has nothing to do with the function of the method. It&#8217;s complicated and often makes it hard to treat exceptions consistently across the entire application.</p>

<h2>Functional</h2>

<p><strong><em>So what can we learn from functional programing languages?</em></strong> Exceptions are a fact of life, unexpected things can happen with your code and you still need to deal with them. The subtlety here is that functional languages emphasize the <em>unexpected</em> part with exceptions. They try and discourage you from using exceptions for dealing with known branches of logic and instead use them like Java uses <code>Error</code>s (ie as non-recoverable). This means thinking of exceptions of <em>exceptional behaviour</em> and not Java&#8217;s notion of checked <code>Exceptions</code>.</p>

<p><strong><em>So how do languages like Scala discourage you using them like Java?</em></strong> They usually offer alternative mechanisms. Scala for example has the <a href="http://www.scala-lang.org/api/2.11.1/#scala.util.Either"><code>Either</code></a> and <a href="http://www.scala-lang.org/api/2.11.1/#scala.util.Try"><code>Try</code></a> classes. These classes allow you to express using the type system, that a method was successful or unsuccessful, independently from the return value. As an additional bonus, because they are <a href="http://debasishg.blogspot.co.uk/2008/03/monads-another-way-to-abstract.html">monadic</a>, you can deal with exceptional and expected behaviour consistently in code. That means you can use the same structures to process the positive and the negative case without resorting to <code>catch</code> blocks.</p>

<h2>Either in Java</h2>

<p>For example, let&#8217;s say we have a method <code>uploadExpenses</code> that uploads this months expenses to my online accountant&#8217;s web service. It uploads a single expense at a time, so it could fail because of some network problem or if the web service rejects an individual <code>Expense</code>. Once done, I&#8217;d like to produce a report (just using <code>System.out</code> in our example).</p>

<h3>Traditional Exception Throwing</h3>

<p>In a traditional exception throwing version below, the <code>uploadExpenses</code> call can break after only some expenses have been uploaded. With no report, it would be hard to work out which were successfully uploaded. You&#8217;re also left to deal with the exceptions. If other code depends on this, it may make sense to propagate the exception to an <a href="http://baddotrobot.com/blog/2012/03/28/exception-handling-as-a-system-wide-concern/">appropriate system boundary</a> but dealing with exceptions consistently for the entire system is a real challenge.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">&gt;</span> <span class="n">expenses</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'>    <span class="n">Expenses</span> <span class="n">uploaded</span> <span class="o">=</span> <span class="n">uploadExpenses</span><span class="o">(</span><span class="n">expenses</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">()));</span>    <span class="c1">// &lt;- can throw exceptions</span>
</span><span class='line'>    <span class="n">uploaded</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">HttpProblem</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// what to do?</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">DuplicateExpenseFound</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// what to do?</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Eithers</h3>

<p>On the other hand, if we use an <code>Either</code> we can make the <code>uploadExpenses</code> call return <em>either</em> a successfully upload <code>Expense</code> or a tuple detailing the expense that failed to upload along with the reason why. Once we have a list of these, we can process them in the same way to produce our report. The neat thing here is that the exceptional behaviour is encoded in the return type; clients know that this thing could fail and can deal with it without coding alternative logic.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">&gt;</span> <span class="n">expenses</span> <span class="o">=</span> <span class="o">...</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Either</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">&gt;,</span> <span class="n">Expense</span><span class="o">&gt;&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="n">uploadExpenses</span><span class="o">(</span><span class="n">expenses</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Pair</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">&gt;&gt;</span> <span class="n">failures</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">flatMap</span><span class="o">(</span><span class="n">either</span> <span class="o">-&gt;</span> <span class="n">either</span><span class="o">.</span><span class="na">left</span><span class="o">());</span>
</span><span class='line'><span class="n">failures</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">failure</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">failure</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Expense</span><span class="o">&gt;</span> <span class="n">successes</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">flatMap</span><span class="o">(</span><span class="n">either</span> <span class="o">-&gt;</span> <span class="n">either</span><span class="o">.</span><span class="na">right</span><span class="o">());</span>
</span><span class='line'><span class="n">successes</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">success</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">success</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this way, having the semantics baked into the return types is what forces clients to deal with the exceptional behaviour. Dealing with them monadically ensures that we can deal with them consistently. For a naive implementation, have a look at my <a href="https://gist.github.com/tobyweston/caefc3b5ec36348387e5">gist</a> and for fuller implementations, see <a href="https://github.com/scala/scala/blob/2.11.x/src/library/scala/util/Either.scala">Scala&#8217;s version</a> or the <a href="https://code.google.com/p/totallylazy/source/browse/src/com/googlecode/totallylazy/Either.java">TotallyLazy</a> and <a href="https://functionaljava.ci.cloudbees.com/job/master/javadoc/fj/data/Either.html">Functional Java</a> versions in Java.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Udemy Java 8 Course]]></title>
    <link href="http://baddotrobot.com/blog/2014/05/20/udemy-course/"/>
    <updated>2014-05-20T19:12:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/05/20/udemy-course</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just published my course on Java 8 over at <a href="https://www.udemy.com/whats-new-in-java-8/">Udemy.com</a>, for a limited time only, get <a href="https://www.udemy.com/whats-new-in-java-8/?couponCode=BLOG10">10% off with coupon code BLOG10</a>!</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/BOgcl5anYyI "></iframe></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes vs. Functions]]></title>
    <link href="http://baddotrobot.com/blog/2014/04/08/classes-vs-functions/"/>
    <updated>2014-04-08T19:40:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/04/08/classes-vs-functions</id>
    <content type="html"><![CDATA[<p>You can use lambdas in Java 8 anywhere you would have previously used a <a href="http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8">single method interface</a> so it may just look like syntactic sugar but it&#8217;s not. Let&#8217;s have a look at how they differ; it&#8217;s anonymous classes vs. lambdas or simply put, classes vs. functions.</p>

<!-- more -->


<p>So, a typical implementation of an anonymous class (a single method interface) in Java pre-8, might look something like this. The <code>anonymousClass</code> method is calling the <code>waitFor</code> method passing in some implementation of <code>Condition</code>, in this case it&#8217;s saying wait for some server to have shutdown.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">anonymousClass</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpServer</span><span class="o">();</span>
</span><span class='line'>    <span class="n">waitFor</span><span class="o">(</span><span class="k">new</span> <span class="n">Condition</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Boolean</span> <span class="nf">isSatisfied</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">!</span><span class="n">server</span><span class="o">.</span><span class="na">isRunning</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The functionally equivalent lambda would look like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">closure</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpServer</span><span class="o">();</span>
</span><span class='line'>    <span class="n">waitFor</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">!</span><span class="n">server</span><span class="o">.</span><span class="na">isRunning</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where in the interest of completeness, a naive polling <code>waitFor</code> method might look like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">WaitFor</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">waitFor</span><span class="o">(</span><span class="n">Condition</span> <span class="n">condition</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">while</span> <span class="o">(!</span><span class="n">condition</span><span class="o">.</span><span class="na">isSatisfied</span><span class="o">())</span>
</span><span class='line'>          <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">250</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Some Theoretical Differences</h2>

<p>Firstly, both implementations are in-fact closures, the later is also a lambda. Confused, see <a href="http://baddotrobot.com/blog/2010/07/13/lambdas-vs-closures">my distinction between lambdas and closures</a>. This means that both have to capture their &#8220;environment&#8221; at runtime. In Java pre-8, this means copying the things the closure needs into an instance of an class (an anonymous instances of <code>Condition</code>). In our example, the <code>server</code> variable.</p>

<p>As it&#8217;s a copy, it has to be declared final to ensure that it can not be changed between when it&#8217;s captured and when it&#8217;s used. These two points in time could be very different given that closures are often used to defer execution until some later point (see <a href="http://en.wikipedia.org/wiki/Lazy_evaluation">lazy evaluation</a> for example). Java 8 uses a neat trick whereby if it can reason that a variable is never updated, it might as well be final so it treats it as &#8220;effectively final&#8221; and you don&#8217;t need to declare it as <code>final</code> explicitly.</p>

<p>A lambda on the other hand, doesn&#8217;t need to copy it&#8217;s environment or <em>capture any terms</em>. This means it can be treated as a genuine function and not an instance of a class. What&#8217;s the difference? Plenty.</p>

<h3>Functions vs. Classes</h3>

<p>For a start, functions; <a href="http://en.wikipedia.org/wiki/Pure_function">genuine functions</a>, don&#8217;t need to be instantiated many times. I&#8217;m not sure if instantiation is even the right word to use when talking about allocating memory and loading a chunk of machine code as a function. The point is, once it&#8217;s available, it can be re-used, it&#8217;s idempotent in nature as it retains no state. Static class methods are the closest thing Java has to functions.</p>

<p>For Java, this means that a lambda need not be instantiated every time it&#8217;s evaluated which is a big deal. Unlike instantiating an anonymous class, the memory impact should be minimal.</p>

<p>In terms of some conceptual differences then;</p>

<ul>
<li>Classes must be instantiated, whereas functions are not.</li>
<li>When classes are newed up, memory is allocated for the object.</li>
<li>Memory need only be allocated once for functions. They are stored in the &#8220;permanent&#8221; area of the heap.</li>
<li>Objects act on their own data, functions act on unrelated data.</li>
<li>Static class methods in Java are roughly equivalent to functions.</li>
</ul>


<h2>Some Concrete Differences</h2>

<h3>Capture Semantics</h3>

<p>Another difference is around capture semantics for <code>this</code>. In an anonymous class, <code>this</code> refers to the instance of the anonymous class. For example, <code>Foo$InnerClass</code> and not <code>Foo</code>. That&#8217;s why you have whacky syntax like <code>Foo.this.x</code> when you refer to the enclosing scope from the anonymous class.</p>

<p>In lambdas on the other hand, <code>this</code> refers to the enclosing scope (<code>Foo</code> directly in our example). In fact, lambdas are <strong>entirely lexically scoped</strong>, meaning they don&#8217;t inherit any names from a super type or introduce a new level of scoping at all; you can directly access fields, methods and local variables from the enclosing scope.</p>

<p>For example, this class shows that the lambda can reference the <code>firstName</code> variable directly.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="s">&quot;Jack&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">addSurname</span> <span class="o">=</span> <span class="n">surname</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">firstName</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">surname</span><span class="o">;</span>       <span class="c1">// equivalent to this.firstName</span>
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The anonymous class equivalent would need to explicitly refer to <code>firstName</code> from the enclosing scope.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="s">&quot;Charlie&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">anotherExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">addSurname</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">surname</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Example</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">firstName</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">surname</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Shadowing also becomes much more straight forward to reason about (when referencing shadowed variables).</p>

<h3>Byte Code Differences</h3>

<p>The other thing to note is the byte code an anonymous class implementation produces compared to the lambda byte-code. The former will use the <code>invokespecial</code> whereas a lambda uses <code>invokedynamic</code>. The difference is about when the caller is linked to a destination; lambdas are matched at <em>runtime</em> (<code>invokedynamic</code>) rather than compile time (<code>invokespecial</code> and <code>invokevirtual</code>).</p>

<p>This may not seem like a big deal but the main take-away is that these instructions can be optimised by the JVM. We can expect dynamic invocations (and so lambdas) to out-perform their more traditional counterparts.</p>

<p>The <code>invokedynamic</code> instruction was originally motivated by supporting more dynamic languages on the JVM. With it, you don&#8217;t need to know the types ahead of time (statically typed) and you can relax these constraints and support dynamically typed languages (like JavaScript). However, it can be used to do so much more.</p>

<p>It links into type inference and target typing with Java 8, supporting method references (method handles), default methods, removing the need to create intermediary anonymous instances, avoid bridge methods as well as optimisation opportunities. It&#8217;s introduction in Java 7 was under the radar for the mainstream but it&#8217;s probably the biggest proponent to supporting Java 8 features like lambdas. It&#8217;s the mechanism by which Java achieves no additional class loading when using lambdas.</p>

<h2>Summary</h2>

<p>So there we have it. Functions in the academic sense are very different things from anonymous classes (which we often treat like functions in Java pre-8). I find it useful to keep the distinctions in my head as I feel that I need to be able to justify the use of Java 8 lambdas in my code with more than just arguing for their concise syntax. Of course, there&#8217;s lots of additional advantages in using lambdas (not least the retrofit of the JDK to heavily use them), but I want to be able to respond when people say &#8220;isn&#8217;t that just syntactic sugar over anonymous classes?&#8221;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Interfaces in Java 8]]></title>
    <link href="http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8/"/>
    <updated>2014-04-07T21:33:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2014/04/07/functional-interfaces-in-java8</id>
    <content type="html"><![CDATA[<p>Java 8 treats lambdas as an instance of an interface type. It formalises this into something it calls &#8220;functional interfaces&#8221;. A functional interface is just an interface with a single method. Java calls the method a &#8220;functional method&#8221; but the name &#8220;single abstract method&#8221; or SAM is often used. All the existing single method interfaces like <code>Runnable</code> and <code>Callable</code> in the JDK are now functional interfaces and lambdas can be used anywhere a single abstract method interface is used.</p>

<p>Let&#8217;s run through the basic syntax.</p>

<!-- more -->


<h2>@FunctionalInterface</h2>

<p>Oracle have introduced a new annotation <code>@FunctionalInterface</code> to mark an interface as such. It&#8217;s basically to communicate intent but also allows the compiler to do some additional checks.</p>

<p>For example, this interface compiles,</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>but when you indicate that it should be a <em>functional interface</em></p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span> <span class="c1">// &lt;- error here</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The compiler will raise an error as there is no method. It says that &#8220;Example is not a functional interface&#8221; as &#8220;no abstract method was found&#8221;. It&#8217;ll also error if we try and add a second method.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">FunctionalInterfaceExample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">illegal</span><span class="o">();</span>    <span class="c1">// &lt;- error here</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This time it&#8217;s saying &#8220;multiple, non-overriding abstract methods were found&#8221;. Functional interfaces can have only <strong>one</strong> method.</p>

<h2>Extension</h2>

<p>What about the case of an interfaces that extends another interfaces?</p>

<p>Let&#8217;s create a new functional interface called <code>A</code> and another called <code>B</code>. <code>B</code> extends <code>A</code>. <code>B</code> is still &#8220;functional&#8221;. It inherits the parents <code>apply</code> method as you&#8217;d expect.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanted to make this clearer, you can also override the functional method from the parent.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can verify it works as a functional interface if we use it as a lambda. So I&#8217;ll implement a little method to show that a lambda can be assigned to a type of <code>A</code> and a type of <code>B</code>. The implementation will just print out &#8220;A&#8221; or &#8220;B&#8221;.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can&#8217;t add a new abstract method to the extending interface though, as the resulting type would have two abstract methods and the compiler will error.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FunctionalInterface</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">apply</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">B</span> <span class="kd">extends</span> <span class="n">A</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">illegal</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;A&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;B&quot;</span><span class="o">);</span>    <span class="c1">// &lt;- error</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, you can override methods from <code>Object</code> without causing problems. You can also add default methods (also new to Java 8). As you&#8217;d probably expect, it doesn&#8217;t make sense to try and mark an abstract class as a functional interface.</p>

<h2>Summary</h2>

<p>An important point to take away was the idea that any place a functional interface is used, you can now use lambdas. Lambdas can be used in-lieu of anonymous implementations of the functional interface. Using a lambda instead of the anonymous class may seem like syntactic sugar, but they&#8217;re actually quiet different. See the <a href="http://baddotrobot.com/blog/2014/04/08/classes-vs-functions">Classes vs. Functions</a> post for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Method References in Java 8]]></title>
    <link href="http://baddotrobot.com/blog/2014/02/18/method-references-in-java8/"/>
    <updated>2014-02-18T21:33:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/02/18/method-references-in-java8</id>
    <content type="html"><![CDATA[<p>Java 8 brings with it method references; shortcuts that you can use anywhere you would use a lambda. The <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Oracle docs</a> describe four types of method reference but do such a poor job of describing them that I felt compelled to describe them myself.</p>

<!-- more -->


<p><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">Oracle describe the four kinds of method reference</a> as follows.</p>

<table>
<thead>
<tr>
<th></th>
<th> Kind                                                                           </th>
<th> Example                                </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Reference to a static method                                                   </td>
<td> <code>ContainingClass::staticMethodName</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a particular object                         </td>
<td> <code>ContainingObject::instanceMethodName</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of an arbitrary object of a particular type    </td>
<td> <code>ContainingType::methodName</code></td>
</tr>
<tr>
<td></td>
<td> Reference to a constructor                                                     </td>
<td> <code>ClassName::new</code></td>
</tr>
</tbody>
</table>


<p>Static and constructor references are straight forward but it&#8217;s their description of instance method references that muddies the waters. What on earth is an instance method of an arbitrary object of a particular type? Aren&#8217;t all objects <em>of a</em> particular type?  Why is it important that the object is <em>arbitrary</em>?</p>

<h2>What they should have written</h2>

<p>It&#8217;s talking about four types of method reference; constructor references, static method references, instance method references and what it calls instance method references of a particular type. The last one is really just another kind of instance method reference.</p>

<p>What they should have written is this.</p>

<table>
<thead>
<tr>
<th></th>
<th> Kind                                                                 </th>
<th> Syntax                           </th>
<th> Example                  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Reference to a static method                                         </td>
<td> <code>Class::staticMethodName</code>        </td>
<td> <code>String::valueOf</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a specific object                 </td>
<td> <code>object::instanceMethodName</code>     </td>
<td> <code>x::toString</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a arbitrary object supplied later </td>
<td> <code>Class::instanceMethodName</code>      </td>
<td> <code>String::toString</code></td>
</tr>
<tr>
<td></td>
<td> Reference to a constructor                                           </td>
<td> <code>ClassName::new</code>                 </td>
<td> <code>String::new</code></td>
</tr>
</tbody>
</table>


<p>or as lambdas</p>

<table>
<thead>
<tr>
<th></th>
<th> Kind                                                                 </th>
<th> Syntax                           </th>
<th> As Lambda                  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Reference to a static method                                         </td>
<td> <code>Class::staticMethodName</code>        </td>
<td> <code>(s) -&gt; String.valueOf(s)</code></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a specific object                 </td>
<td> <code>object::instanceMethodName</code>     </td>
<td> <code>() -&gt; "hello".toString()</code> <strong>†</strong></td>
</tr>
<tr>
<td></td>
<td> Reference to an instance method of a arbitrary object supplied later </td>
<td> <code>Class::instanceMethodName</code>      </td>
<td> <code>(s) -&gt; s.toString()</code></td>
</tr>
<tr>
<td></td>
<td> Reference to a constructor                                           </td>
<td> <code>ClassName::new</code>                 </td>
<td> <code>() -&gt; new String()</code></td>
</tr>
</tbody>
</table>


<p>I found their description of the two confusing. I prefer to think of the first as an instance method of a <em>specific</em> object known ahead of time and the second as an instance method of an arbitrary object that will be <em>supplied</em> later. Interestingly, this means the first is a <em>closure</em> and the second is a <em>lambda</em>. One is <em>bound</em> and the other <em>unbound</em>.</p>

<p>The distinction between a method reference that closes over something (a closure) and one that doesn&#8217;t (a lambda) may be a bit academic but at least it&#8217;s a more formal definition than Oracle&#8217;s unhelpful description. If you&#8217;re interested in the difference between a closure and a lambda, check out my <a href="http://baddotrobot.com/blog/2010/07/13/lambdas-vs-closures">previous article</a>.</p>

<h2>The &#8220;closure&#8221; method reference</h2>

<p>The example above (<code>x::toString</code>) is an instance method reference using a closure. It creates a lambda that will call the <code>toString</code> method on the instance <code>x</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="nl">x:</span><span class="o">:</span><span class="n">toString</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>where the signature of <code>function</code> looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">function</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">supplier</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">supplier</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Supplier</code> interface must provide a string value (the <code>get</code> call) and the only way it can do that is if it&#8217;s been supplied to it on construction. It&#8217;s equivalent to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice here that the lambda has no arguments (it uses the &#8216;hamburger&#8217; symbol). This shows that the value of <code>x</code> isn&#8217;t available in the lambda&#8217;s local scope and so can only be available from outside it&#8217;s scope. It&#8217;s a closure because must close over <code>x</code>.</p>

<p>The anonymous class equivalent really makes this obvious, it looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">x</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span> <span class="c1">// &lt;- closes over &#39;x&#39;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All three of these are equivalent. Compare this to the lambda variation of an instance method reference where it doesn&#8217;t have it&#8217;s argument explicitly passed in from an outside scope.</p>

<h2>The &#8220;lambda&#8221; method reference</h2>

<p>The other example (<code>String::toString</code>) is similar to the previous one, it calls the <code>toString</code> method of a string only this time, the string is supplied to the function that&#8217;s making use of the lambda and not passed in from an outside scope.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">lambdaExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">,</span> <span class="nl">String:</span><span class="o">:</span><span class="n">toString</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>String</code> part looks like it&#8217;s referring to a class but it&#8217;s actually referencing an instance. It&#8217;s confusing, I know but to see things more clearly, we need to see the function that&#8217;s making use of the lambda. It looks like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">function</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the string value is passed directly to the function, it would look like this as a fully qualified lambda.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">lambdaExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">,</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you expand it fully to an anonymous interface, it looks like this. The <code>x</code> parameter is made available and not closed over. It&#8217;s a lambda rather than a closure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">lambdaExample</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">apply</span><span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// &lt;- takes the argument as a parameter, doesn&#39;t need to close over it</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>The difference between the two types of instance method reference is interesting but basically academic. Sometimes, you&#8217;ll need to pass something in, other times, the usage of the lambda will supply it for you. My gripe is with Oracle&#8217;s documentation. They make a big deal out of the distinction but fail to describe it in an easily understandable way. It&#8217;s <em>the</em> canonical reference material but it&#8217;s just plain confusing. It feels like interns are producing this stuff.</p>

<p>If you liked this post, you might like my course on <a href="https://www.udemy.com/whats-new-in-java-8/">Udemy</a>. For a limited time only, get <a href="https://www.udemy.com/whats-new-in-java-8/?couponCode=BLOG10">10% off with this coupon</a>!</p>

<h2>Caveat</h2>

<p><strong>†</strong> There&#8217;s a caveat here; the example isn&#8217;t a closure, so my comment about that being a distinguishing feature isn&#8217;t quiet true. If, as in the later examples, it closes over some <code>x</code> (as is more likely), great. If however, you use a literal value (as in my starred example), it wont close over the term <code>x</code> so it&#8217;s back to being a lambda. So doesn&#8217;t <em>have</em> to be a closure, it&#8217;s just more than likely to be one. For example;</p>

<figure class='code'><figcaption><span>This time the &#8220;reference to an instance method of a arbitrary object supplied later&#8221; is a Lambda, not a closure</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">example</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// String x = &quot;hello&quot;;</span>
</span><span class='line'>    <span class="n">function</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="s">&quot;hello&quot;</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://amzn.to/1M0w9jZ" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;"><img itemprop="image" class="right" src="http://ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=1508734178&Format=_SL160_&ID=AsinImage&MarketPlace=GB&ServiceVersion=20070822&WS=1&tag=baddotrobotco-21" title="Learn Scala for Java Developers" ></a>
<a href="http://leanpub.com/whatsnewjava8" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;"><img itemprop="image" class="right" src="http://titlepages.leanpub.com/whatsnewjava8/bookpage" width="140" height="180" title="Learn Scala for Java Developers" ></a></p>

<h2>Recommended Reading</h2>

<ul>
<li><a href="http://leanpub.com/whatsnewjava8" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">What&#8217;s New in Java 8</a>, Toby Weston</li>
<li><a href="http://amzn.to/1M0w9jZ" onClick="trackOutboundLink(this, 'Outbound Links', 'amazon.com'); return false;">Learn Scala for Java Developers</a>, Toby Weston</li>
</ul>


<p>&nbsp;
&nbsp;
&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA Retina Support JDK 1.7+]]></title>
    <link href="http://baddotrobot.com/blog/2014/01/20/intellij-idea-retina-support/"/>
    <updated>2014-01-20T19:33:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/01/20/intellij-idea-retina-support</id>
    <content type="html"><![CDATA[<p>Despite IntelliJ&#8217;s <a href="http://blog.jetbrains.com/idea/2013/09/jdk7_compatibility/">improvements to retina support</a>, IDEA still looks shabby when running a retina display with the JDK 7 and 8. See for yourself below.</p>

<p><a href="../../../../../images/IntelliJ_on_1.6.png"><span class='caption-wrapper'><img class='caption' src='http://baddotrobot.com/../../../../images/IntelliJ_on_1.6.png' width='266' height='148' title='Running on JDK 6'><span class='caption-text'>Running on JDK 6</span></span></a>
<a href="../../../../../images/IntelliJ_on_1.7.png"><span class='caption-wrapper'><img class='caption' src='http://baddotrobot.com/../../../../images/IntelliJ_on_1.7.png' width='266' height='148' title='Running on JDK 7'><span class='caption-text'>Running on JDK 7</span></span></a></p>

<!-- more -->


<p><a href="../../../../../images/IntelliJ_on_1.8ea.png"><span class='caption-wrapper'><img class='caption' src='http://baddotrobot.com/../../../../images/IntelliJ_on_1.8ea.png' width='266' height='148' title='Running on JDK 8'><span class='caption-text'>Running on JDK 8</span></span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another TeamCity Build Monitor]]></title>
    <link href="http://baddotrobot.com/blog/2014/01/01/another-teamcity-build-monitor/"/>
    <updated>2014-01-01T09:57:00+00:00</updated>
    <id>http://baddotrobot.com/blog/2014/01/01/another-teamcity-build-monitor</id>
    <content type="html"><![CDATA[<p>My build monitor is a little different from the rest; it aggregates the status of all the builds on TeamCity to a single visual pass or fail. When build radiators show the status of individual builds on a single page, people can be tempted to ignore specific builds. They learn to ignore that flaky build or disregard the one that they haven&#8217;t been working on.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ZMQn-J435Lk "></iframe></div>


<p><a href="http://github.com/tobyweston/radiate">Radiate</a> takes a zero tolerance approach. Every build is as important as the next (else why have separate builds at all?) so Radiate hides which build is actually failing. Red or green, that&#8217;s all you get. It&#8217;s up to you to investigate the cause.</p>

<!-- more -->


<p>Build monitors are supposed to be highly visual, you should be able get some important piece of information from across the other side of the office. The <em>only</em> important piece of information for Radiate, is whether the build is passing or failing. Anything else is superfluous. After all, to investigate a failure, we&#8217;d typically open up the TeamCity page.</p>

<p>It&#8217;s got a couple of other neat features; it gives aggregated progress when builds are running, changing it&#8217;s status as soon as a failure is detected; it runs as a standalone executable jar, <code>.exe</code> or as a Windows screen saver (<code>.scr</code>); and it tries to be as light as possible on configuration (just configure an environment variable with your TeamCity host, and it figures out the rest).</p>

<p>Have a look on <a href="http://github.com/tobyweston/radiate">Github</a> and let me know what you think below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Currying Functions in Java & Scala]]></title>
    <link href="http://baddotrobot.com/blog/2013/07/21/curried-functions/"/>
    <updated>2013-07-21T06:58:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/07/21/curried-functions</id>
    <content type="html"><![CDATA[<p>Currying is the technique of transforming a function with multiple arguments into a function with just one argument. The single argument is the value of the first argument from the original function and the function returns another single argument function. This in turn would take the second original argument and itself return another single argument function. This chaining continues over the number of arguments of the original. The last in the chain will have access to all of the arguments and so can do whatever it needs to do.</p>

<p>You can turn any function with multiple arguments into it&#8217;s curried equivalent. Let&#8217;s have a look at this in action.</p>

<!-- more -->


<h2>Java</h2>

<p>For example, in Java, you can convert</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>into something like this (where <code>Function&lt;A, B&gt;</code> defines a single method <code>B apply(A a)</code>).</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">add</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">apply</span><span class="o">(</span><span class="kd">final</span> <span class="n">Integer</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">apply</span><span class="o">(</span><span class="n">Integer</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">};</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling the original method</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>                       <span class="c1">// gives 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>and calling the curried version</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">add</span><span class="o">();</span>                          <span class="c1">// gives back a instance of Function&lt;[A, B]&gt;</span>
</span><span class='line'><span class="n">add</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>                 <span class="c1">// gives back a instance of Function&lt;[A, B]&gt;</span>
</span><span class='line'><span class="n">add</span><span class="o">().</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">apply</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>         <span class="c1">// gives 2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Java 8</h2>

<p>In Java 8, it&#8217;s much less verbose using the new lambda syntax.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">add</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scala</h2>

<p>In Scala, the regular uncurried function would look like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As Scala supports curried functions, you can turn this into it&#8217;s curried version simply by separating out the arguments.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// shorthand</span>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)(</span><span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which is shorthand for writing it out like this.</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// longhand</span>
</span><span class='line'><span class="k">def</span> <span class="n">add</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span> <span class="o">=&gt;</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">(</span><span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the REPL to show how they&#8217;re called;</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'>scala&gt; def add<span class="o">(</span>x: Int<span class="o">)(</span>y: Int<span class="o">)</span>: <span class="nv">Int</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>     |   x + y
</span><span class='line'>     | <span class="o">}</span>
</span><span class='line'>add: <span class="o">(</span>x: Int<span class="o">)(</span>y: Int<span class="o">)</span>Int
</span><span class='line'>
</span><span class='line'>scala&gt; add<span class="o">(</span>1<span class="o">)</span> _
</span><span class='line'>res1: <span class="nv">Int</span> <span class="o">=</span>&gt; <span class="nv">Int</span> <span class="o">=</span> &lt;Function&gt;
</span><span class='line'>
</span><span class='line'>scala&gt; <span class="o">(</span>add<span class="o">(</span>1<span class="o">)</span> _<span class="o">)</span>.apply<span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>res2: <span class="nv">Int</span> <span class="o">=</span> 2
</span><span class='line'>
</span><span class='line'>scala&gt; add<span class="o">(</span>1<span class="o">)(</span>1<span class="o">)</span>
</span><span class='line'>res3: <span class="nv">Int</span> <span class="o">=</span> 2
</span></code></pre></td></tr></table></div></figure>


<p>and working with the longhand version;</p>

<figure class='code'> <div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sh'><span class='line'>scala&gt; def add2<span class="o">(</span>x: Int<span class="o">)</span>: <span class="o">(</span><span class="nv">Int</span> <span class="o">=</span>&gt; Int<span class="o">)</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>     |   <span class="o">(</span>y: Int<span class="o">)</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>     |     x + y
</span><span class='line'>     |   <span class="o">}</span>
</span><span class='line'>     | <span class="o">}</span>
</span><span class='line'>add2: <span class="o">(</span>x: Int<span class="o">)</span><span class="nv">Int</span> <span class="o">=</span>&gt; Int
</span><span class='line'>
</span><span class='line'>scala&gt; add2<span class="o">(</span>1<span class="o">)</span>.apply<span class="o">(</span>1<span class="o">)</span>
</span><span class='line'>res4: <span class="nv">Int</span> <span class="o">=</span> 2
</span></code></pre></td></tr></table></div></figure>


<p>It turns out that it&#8217;s this partial application of functions that&#8217;s really interesting. Currying in Scala allows us to defer execution and reuse functions. We&#8217;ll have a look at that in the next article.</p>

<h2>More Information</h2>

<ul>
<li><a href="https://gist.github.com/tobyweston/6027570">Gist</a></li>
<li><a href="http://www.codecommit.com/blog/scala/function-currying-in-scala">Function Currying in Scala</a></li>
<li><a href="http://danielwestheide.com/blog/2013/01/30/the-neophytes-guide-to-scala-part-11-currying-and-partially-applied-functions.html">Currying and Partially Applied Functions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically rebase on git pull]]></title>
    <link href="http://baddotrobot.com/blog/2013/07/09/automatically-rebase-on-git-pull/"/>
    <updated>2013-07-09T17:29:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/07/09/automatically-rebase-on-git-pull</id>
    <content type="html"><![CDATA[<p>Automaticaaly rebase your Git repository when you do a <code>pull</code>.</p>

<!-- more -->


<p>To configure your repository to always rebase when pulling;</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>git config branch.master.rebase true</span></code></pre></td></tr></table></div></figure>


<p>which turns the relevant section of your &#8216;.git/config&#8217; from</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>[branch "master"]
</span><span class='line'>  remote = origin
</span><span class='line'>  merge = refs/heads/master</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>[branch "master"]
</span><span class='line'>  remote = origin
</span><span class='line'>  merge = refs/heads/master
</span><span class='line'>  rebase = true</span></code></pre></td></tr></table></div></figure>


<p>In IntelliJ IDEA, when doing up SCM update, it may ask you how to go about the update. Here you can override the setting above to do a regular merge (which is in fact a <code>git fetch</code> followed by a <code>git merge</code> or in one command, <code>git pull --no-rebase</code>), a rebase (<code>git fetch</code>, <code>git rebase</code> or <code>git pull --rebase</code>) or rely on the setting above in your config.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calculate the Optimum Number of Threads]]></title>
    <link href="http://baddotrobot.com/blog/2013/06/01/optimum-number-of-threads/"/>
    <updated>2013-06-01T20:42:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/06/01/optimum-number-of-threads</id>
    <content type="html"><![CDATA[<p>Working out the theoretical optimal number of threads you should use for your application is fairly straightforward. You do, however, need to understand your applications runtime characteristics. Is it mostly occupied with CPU intensive work or is it mostly waiting for IO?</p>

<p>In this post, we look at how to work out a good thread pool size for your CPU and IO based tasks.</p>

<!-- more -->


<h2>CPU Bound Tasks</h2>

<p>For CPU bound tasks, Goetz (2002, 2006) recommends</p>

<pre><code>threads = number of CPUs + 1
</code></pre>

<p>Which is intuitive as if a CPU is being kept busy, we can&#8217;t do more work than the number of CPUs. Goetz purports that the additional CPU has been shown as an improvement over omitting it (2006), but others don&#8217;t agree and suggest just the number of CPUs is optimal.</p>

<h2>IO Bound Tasks</h2>

<p>Working out the optimal number for IO bound tasks is less obvious. During an IO bound task, a CPU will be left idle (waiting or blocking). This idle time can be better used in initiating another IO bound request.</p>

<p>Subramaniam (2011, p.31) describes the optimal number of threads in terms of the following formula.</p>

<pre><code>threads = number of cores /  (1 – blocking coefficient)
</code></pre>

<p><img itemprop="image" src="../../../../../images/optimal-threads/subramaniam.gif"></p>

<p>And Goetz (2002) describes the optimal number of threads in terms of the following.</p>

<pre><code>threads = number of cores * (1 + wait time / service time)
</code></pre>

<p><img itemprop="image" src="../../../../../images/optimal-threads/goetz-1.gif"></p>

<p>Where we can think of <code>wait time / service time</code> as a measure of how contended the task is.</p>

<h2>Goetz and Subramaniam Agree</h2>

<p>Just out of interest, we can show that both IO bound formulas are equivalent. Starting with Goetz’s formula, we assert that <code>w+s=1</code> and remove the service time (<code>s</code>) giving the following</p>

<p><img itemprop="image" src="../../../../../images/optimal-threads/goetz-2.gif"></p>

<p>We can continue by multiplying both sides by <code>1-w</code> reducing the right hand side to <code>c</code> before reversing the operation and revealing Subramaniam’s expression.</p>

<p><img itemprop="image" src="../../../../../images/optimal-threads/goetz-3.gif"></p>

<p><img itemprop="image" src="../../../../../images/optimal-threads/goetz-4.gif"></p>

<p><img itemprop="image" src="../../../../../images/optimal-threads/subramaniam.gif"></p>

<p>This post originally appeared on my concurrency library <a href="http://tempusfugitlibrary.org/">tempus-fugit</a>&#8217;s project site.</p>

<h2>References</h2>

<ul>
<li>Goetz, B. 2002. <a href="http://www.ibm.com/developerworks/java/library/j-jtp0730/index.html">Java theory and practice: Thread pools and work queues</a>. IBM DeveloperWorks.</li>
<li>Goetz, B. Peierls, T. Bloch, J. Bowbeer, J. Holmes, D. and Lea, D. 2006. <a href="http://amzn.to/NrXQPZ">Java Concurrency in Practice</a>. 1st Edition. Addison Wesley.</li>
<li>Subramaniam, V. 2011. <a href="http://amzn.to/NrXXuI">Programming Concurrency on the JVM</a>. 1st Edition. Pragmatic Bookshelf.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing my Book]]></title>
    <link href="http://baddotrobot.com/blog/2013/05/24/writing-my-book/"/>
    <updated>2013-05-24T13:57:00+01:00</updated>
    <id>http://baddotrobot.com/blog/2013/05/24/writing-my-book</id>
    <content type="html"><![CDATA[<p>There haven&#8217;t been many posts on the blog recently because I&#8217;ve been super-busy working on my book <a href="http://baddotrobot.com/book/">Essential Acceptance Testing</a>. It&#8217;s published via <a href="https://leanpub.com/essential_acceptance_testing">Leanpub</a> and talks about the typical acceptance testing strategy and how, more often than not, it&#8217;s driven by dogma rather than by a genuine testing need.</p>

<p>Acceptance testing in it&#8217;s generally accepted form, is so full of duplication and cruft that gaining software confidence can come at a high price. It doesn&#8217;t have to be this way. The book talks about how we can reclaim all the good parts of acceptance testing without suffering the long build times and specification overload.</p>

<p>It also talks about when not to bother; how gaining software confidence isn&#8217;t always about testing. Fast feedback and writing software that&#8217;s cheap to change can be an effective alternative to testing and help shorten the path from concept to cash.</p>

<!-- more -->


<p>Keep an eye on my <a href="http://baddotrobot.com/book">blog&#8217;s book page</a> for the latest news and head over to <a href="https://leanpub.com/essential_acceptance_testing" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">Leanpub</a> to purchase a copy or <a href="http://samples.leanpub.com/essential_acceptance_testing-sample.pdf" onClick="trackOutboundLink(this, 'Outbound Links', 'leanpub.com'); return false;">download a free sample</a>.</p>
]]></content>
  </entry>
  
</feed>
